#include "scripts\base.inc"

// this script runs in an endless loop and does all the user-interface work
// that needs to be periodically updated
// such as the floating items captions display and positioning
// and the sliding inventory window handling


global WinCaption;
global WinMenu;

global ClickStarted;
global ClickStartTime;
global ClickObject;


var VerbHoldTime = 200; // in milliseconds


var InventoryState = 0; // 0..normal, 1..closing, 2..opening
var InventoryLastTime = 0;
var InventorySpeed = 20; // milliseconds
var InventoryMove = 10; // pixels


Game.InventoryVisible = true;
var InvWindow = Game.GetInventoryWindow();
InvWindow.Y = -70;



// infinite loop
while(true)
{
  // handle verb coin if the the required time has passed
  if(ClickStarted && !WinMenu.Visible && Game.CurrentTime - ClickStartTime >= VerbHoldTime && Game.Interactive && Game.SelectedItem == null)
  {
    // position the verbs window
    WinMenu.X = Game.MouseX - WinMenu.Width/2;
    if(WinMenu.X < 0) WinMenu.X = 0;
    if(WinMenu.X + WinMenu.Width>Game.ScreenWidth) WinMenu.X = Game.ScreenWidth - WinMenu.Width;

    WinMenu.Y = Game.MouseY - WinMenu.Height/2 + 10;
    if(WinMenu.Y < 0) WinMenu.Y = 0;
    if(WinMenu.Y + WinMenu.Height>Game.ScreenHeight) WinMenu.Y = Game.ScreenHeight - WinMenu.Height;
    
    // and display it
    WinMenu.ResetButtons();
    WinMenu.Visible = true;
    
    var Caption = WinMenu.GetControl("caption");
    Caption.Text = ClickObject.Caption;


    // if we are about to show the verbs, we tell the actor to cancel
    // whatever he was going to do
    actor.Reset();
  }
  
  // save the active object for later
  var ActObj = Game.ActiveObject;
  
  // handle the standard foating caption
  if(Game.Interactive && ActObj!=null)
  {
    if (Game.SelectedItem==null)
    {
      WinCaption.X = Game.MouseX;
      WinCaption.Y = Game.MouseY + 20;
      WinCaption.TextAlign = TAL_LEFT;
      WinCaption.Text = ActObj.Caption;

      // keep the caption on screen
      WinCaption.SizeToFit();
      if(WinCaption.X + WinCaption.Width > Game.ScreenWidth) WinCaption.X = Game.ScreenWidth - WinCaption.Width;
      if(WinCaption.Y + WinCaption.Height > Game.ScreenHeight) WinCaption.Y = Game.ScreenHeight - WinCaption.Height;
	  }
    // handle the caption when you want to use an object with another
    else {
      var Item = Game.SelectedItem;

      WinCaption.X = 0;
      WinCaption.Y = 580;
      WinCaption.Width = Game.ScreenWidth;
      WinCaption.TextAlign = TAL_CENTER;
      WinCaption.Text = "Use " + Item.Caption + " with " + ActObj.Caption;
    }
    WinCaption.Visible = true;
    WinCaption.Focus();
  }
  else WinCaption.Visible = false;


  // display the inventory window
  if(Scene.Name=="Menu" || Scene.Name=="Credits" || Scene.Name=="intro")
  {
  	Game.InventoryVisible = false;
  }
  else
  {
  	Game.InventoryVisible = true;
    if(Game.Interactive && Game.MouseY < 45 && !Game.ResponsesVisible && !WinMenu.Visible)
    {
    	
  	  InventoryState = 2;
    }
    else if(Game.MouseY > 100 || Game.ResponsesVisible || !Game.Interactive)
    {
    	InventoryState = 1;
    }

    switch(InventoryState)
    {
    	case 1: // closing
  	    if(Game.CurrentTime - InventoryLastTime >= InventorySpeed)
  	    {
  	  	   InventoryLastTime = Game.CurrentTime;
  	  	   InvWindow.Y = InvWindow.Y - InventoryMove;
  	  	   if(InvWindow.Y <= -70)
  	  	   {
    	  	 	 InvWindow.Y = -70;
    	  	 	 InventoryState = 0;
  	    	 }
    	  }
    	  break;

  	  case 2: // opening
  	    if(Game.CurrentTime - InventoryLastTime >= InventorySpeed)
  	    {
  	  	   InventoryLastTime = Game.CurrentTime;
  	  	   InvWindow.Y = InvWindow.Y + InventoryMove;
  	  	   if(InvWindow.Y >= 0)
  	  	   {
    	  	 	 InvWindow.Y = 0;
    	  	 	 InventoryState = 0;
  	  	   }
  	    }
  	    break;
    }
  }




  // go to sleep for 20 miliseconds to allow the engine to perform other tasks
  // it is important for the "endless" scripts to call the Sleep command, otherwise the game will get stuck
  Sleep(20);
}
