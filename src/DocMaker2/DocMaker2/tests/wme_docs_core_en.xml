<?xml version="1.0"?>
<!--Generated by: DeadCode.WME.DocMaker, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null-->
<!--Generated on: 7.11.2005 18:05:38-->
<WmeDocs>
  <ScriptObjects>
    <ScriptObject>
      <BaseFilename>scripting_ref_functions</BaseFilename>
      <Name>Global functions and variables</Name>
      <Description>These global functions and variables are available in all scripts.</Description>
      <Method Global="True" Constructor="False">
        <Description>Suspends the script for a specified number of milliseconds </Description>
        <Remarks>The &lt;b&gt;Sleep&lt;/b&gt; function suspends the script and returns control back to the engine. If you have a script that runs for a very long time, you should periodically call the &lt;b&gt;Sleep&lt;/b&gt; function, otherwise the game will seem to be "stuck" until the script finishes.</Remarks>
        <Signature>Sleep (Milliseconds)</Signature>
        <Parameter Optional="False">
          <Name>Milliseconds</Name>
          <Description>Number of milliseconds to suspend the script for</Description>
        </Parameter>
      </Method>
      <Method Global="True" Constructor="False">
        <Description>Suspends the script until the specified object is "ready"</Description>
        <Remarks>The object is "ready", when it doesn't perform any action (like talking, walking etc.).</Remarks>
        <Signature>WaitFor (Object)</Signature>
        <Parameter Optional="False">
          <Name>Object</Name>
          <Description>The object to wait for</Description>
        </Parameter>
      </Method>
      <Method Global="True" Constructor="False">
        <Description>Returns a pseudo-random number from a specified range </Description>
        <Signature>Random (From, To)</Signature>
        <Parameter Optional="False">
          <Name>From</Name>
          <Description>The lower bound of the range</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>To</Name>
          <Description>The higher bound of the range</Description>
        </Parameter>
      </Method>
      <Method Global="True" Constructor="False">
        <Description>The script will be automatically suspended after a specified time interval </Description>
        <Remarks>If you have a script that runs for a very long time, you should return control to the engine from time to time. You can do it either manually by calling the &lt;b&gt;Sleep&lt;/b&gt; function, or you can set the time-slice interval. In that case, the engine will suspend the script automatically, perform other tasks, and return to the script again.</Remarks>
        <Signature>SetScriptTimeSlice (Milliseconds)</Signature>
        <Parameter Optional="False">
          <Name>Milliseconds</Name>
          <Description>The time interval after which the script will be suspended</Description>
        </Parameter>
      </Method>
      <Method Global="True" Constructor="False">
        <Description>Packs the Red, Green, Blue and Alpha color values into one number</Description>
        <Remarks>All the color components range from 0 to 255. The alpha component specifies the transparency of the resulting color. It ranges from 0 (completely transparent) to 255 (opaque).</Remarks>
        <Signature>MakeRGBA (R, G, B, A)</Signature>
        <Parameter Optional="False">
          <Name>R</Name>
          <Description>The Red component of the requested color</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>G</Name>
          <Description>The Green component of the requested color</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>B</Name>
          <Description>The Blue component of the requested color</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>A</Name>
          <Description>The Alpha component of the requested color (optional, defaults to 255)</Description>
        </Parameter>
      </Method>
      <Method Global="True" Constructor="False">
        <Description>Extracts a Red portion of a color</Description>
        <Signature>GetRValue (Color)</Signature>
        <Parameter Optional="False">
          <Name>Color</Name>
          <Description>A packed RGBA color</Description>
        </Parameter>
      </Method>
      <Method Global="True" Constructor="False">
        <Description>Extracts a Green portion of a color</Description>
        <Signature>GetGValue (Color)</Signature>
        <Parameter Optional="False">
          <Name>Color</Name>
          <Description>A packed RGBA color</Description>
        </Parameter>
      </Method>
      <Method Global="True" Constructor="False">
        <Description>Extracts a Blue portion of a color</Description>
        <Signature>GetBValue (Color)</Signature>
        <Parameter Optional="False">
          <Name>Color</Name>
          <Description>A packed RGBA color</Description>
        </Parameter>
      </Method>
      <Method Global="True" Constructor="False">
        <Description>Extracts an Alpha portion of a color</Description>
        <Signature>GetAValue (Color)</Signature>
        <Parameter Optional="False">
          <Name>Color</Name>
          <Description>A packed RGBA color</Description>
        </Parameter>
      </Method>
      <Method Global="True" Constructor="False">
        <Description>Converts a specified value to a string</Description>
        <Signature>ToString (Value)</Signature>
        <Parameter Optional="False">
          <Name>Value</Name>
          <Description>The value to be converted</Description>
        </Parameter>
      </Method>
      <Method Global="True" Constructor="False">
        <Description>Converts a specified value to an integer number</Description>
        <Signature>ToInt (Value)</Signature>
        <Parameter Optional="False">
          <Name>Value</Name>
          <Description>The value to be converted</Description>
        </Parameter>
      </Method>
      <Method Global="True" Constructor="False">
        <Description>Converts a specified value to a boolean (logical) value</Description>
        <Signature>ToBool (Value)</Signature>
        <Parameter Optional="False">
          <Name>Value</Name>
          <Description>The value to be converted</Description>
        </Parameter>
      </Method>
      <Method Global="True" Constructor="False">
        <Description>Converts a specified value to a floating point number</Description>
        <Signature>ToFloat (Value)</Signature>
        <Parameter Optional="False">
          <Name>Value</Name>
          <Description>The value to be converted</Description>
        </Parameter>
      </Method>
      <Attribute Global="True" ReadOnly="True">
        <Name>Game</Name>
        <Description>The one and only game object reference</Description>
      </Attribute>
    </ScriptObject>
    <ScriptObject>
      <BaseFilename>scripting_ref_game</BaseFilename>
      <Name>Game object</Name>
      <Description>The Game object allows you to access the properties of your game, and the engine itself. There is always one and only Game object available and it's stored in a predefined variable &lt;b&gt;Game&lt;/b&gt;.</Description>
      <Method Global="False" Constructor="False">
        <Group>Diagnostic functions</Group>
        <Description>Writes a text string to the system log file.</Description>
        <Remarks>When the game runs in debug mode, it generates a "wme.log" file in the same directory where the project file resides. Using this method you can add your own diagnostic messages to the log file.</Remarks>
        <Signature>LOG(Text)</Signature>
        <Parameter Optional="False">
          <Name>Text</Name>
          <Description>The text string to be written to the system log file.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Diagnostic functions</Group>
        <Description>Writes a quick diagnostic message to the screen.</Description>
        <Remarks>The quick message disappears after a few seconds.</Remarks>
        <Signature>Msg(Text)</Signature>
        <Parameter Optional="False">
          <Name>Text</Name>
          <Description>The text string to de displayed on screen.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Diagnostic functions</Group>
        <Description>Writes texture usage data to a text file in CSV format.</Description>
        <Remarks>This method is only available if the game runs in accelerated mode.</Remarks>
        <Signature>DumpTextureStats(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The name of the export file.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Object manipulation</Group>
        <Description>Queries whether a given object reference is valid.</Description>
        <Remarks>If you store an object reference in a variable, you can ensure this object is still valid using the ValidObject method. Objects become invalid after they are unloaded from memory (ether explicitly or for example by changing to a different scene).</Remarks>
        <Signature>ValidObject(Object)</Signature>
        <Parameter Optional="False">
          <Name>Object</Name>
          <Description>An object reference to be tested for validity.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Object manipulation</Group>
        <Description>Removes an object from memory.</Description>
        <Remarks>If you load an object using the Game.LoadActor, Game.LoadEntity and similar methods, you should unload those when you no longer need them to free memory. Otherwise those objects will be released when the game quits.</Remarks>
        <Signature>UnloadObject(Object)</Signature>
        <Parameter Optional="False">
          <Name>Object</Name>
          <Description>The object to be removed from memory.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Object manipulation</Group>
        <Description>Loads a new actor from a file.</Description>
        <Signature>LoadActor(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the actor file to be loaded.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Object manipulation</Group>
        <Description>Loads a new 3D actor from a file.</Description>
        <Signature>LoadActor3D(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the 3D actor file to be loaded.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Object manipulation</Group>
        <Description>Loads a new entity from a file.</Description>
        <Signature>LoadEntity(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the entity file to be loaded.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Object manipulation</Group>
        <Description>Loads a new window from a file.</Description>
        <Signature>LoadWindow(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>Filename of the window definition file to be loaded.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Object manipulation</Group>
        <Description>Expands a given string using the string table.</Description>
        <Remarks>Note that methods such as Actor.Talk() do expand strings automatically, you don't need to expand them yourself.</Remarks>
        <Signature>ExpandString(String)</Signature>
        <Parameter Optional="False">
          <Name>String</Name>
          <Description>The text string to be expanded.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Music functions</Group>
        <Description>Crossfades two music channels</Description>
        <Remarks>There can be always only two channels crossfading at one moment.</Remarks>
        <Signature>MusicCrossfade(Channel1, Channel2, Time, SwapChannels)</Signature>
        <Parameter Optional="False">
          <Name>Channel1</Name>
          <Description>The channel which should fade out</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Channel2</Name>
          <Description>The channel which should fade int</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Time</Name>
          <Description>A time period in which the channels should be crossfading</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>SwapChannels</Name>
          <Description>Specifies whether the two channels will be swapped after the crossfading finishes (optional, default=true)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Music functions</Group>
        <Description>Plays a music.</Description>
        <Signature>PlayMusic(Filename, Looping, LoopStart)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the sound file to be played.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Looping</Name>
          <Description>Whether the music should be looped (optional, default = true).</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>LoopStart</Name>
          <Description>The position where to restart the music when looping, in milliseconds (optional, default = 0).</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Music functions</Group>
        <Description>Stops a music playback.</Description>
        <Signature>StopMusic()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Music functions</Group>
        <Description>Pauses a music playback.</Description>
        <Signature>PauseMusic()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Music functions</Group>
        <Description>Resumes a paused music playback.</Description>
        <Signature>ResumeMusic()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Music functions</Group>
        <Description>Sets the music's current playing position.</Description>
        <Signature>SetMusicPosition(Time)</Signature>
        <Parameter Optional="False">
          <Name>Time</Name>
          <Description>A new playing position (in milliseconds)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Music functions</Group>
        <Description>Queries the music's current playing position</Description>
        <Signature>GetMusicPosition()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Music functions</Group>
        <Description>Queries whether the music is currently playing</Description>
        <Signature>IsMusicPlaying()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Music functions</Group>
        <Description>Queries the filename of the current music</Description>
        <Signature>GetMusic()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Music functions</Group>
        <Description>Sets the volume of currently playing music.</Description>
        <Signature>SetMusicVolume(Volume)</Signature>
        <Parameter Optional="False">
          <Name>Volume</Name>
          <Description>Music volume in percent.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Music functions</Group>
        <Description>Queries the music's current volume.</Description>
        <Signature>GetMusicVolume()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Music functions</Group>
        <Description>Plays a music in a specified channel.</Description>
        <Signature>PlayMusicChannel(Channel, Filename, Looping, LoopStart)</Signature>
        <Parameter Optional="False">
          <Name>Channel</Name>
          <Description>Which music channel to use</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the sound file to be played.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Looping</Name>
          <Description>Whether the music should be looped (optional, default = true).</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>LoopStart</Name>
          <Description>The position where to restart the music when looping, in milliseconds (optional, default = 0).</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Music functions</Group>
        <Description>Stops a music playback in a specified channel.</Description>
        <Signature>StopMusicChannel(Channel)</Signature>
        <Parameter Optional="False">
          <Name>Channel</Name>
          <Description>Which music channel to use</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Music functions</Group>
        <Description>Pauses a music playback in a specified channel.</Description>
        <Signature>PauseMusicChannel(Channel)</Signature>
        <Parameter Optional="False">
          <Name>Channel</Name>
          <Description>Which music channel to use</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Music functions</Group>
        <Description>Resumes a paused music playback in a specified channel.</Description>
        <Signature>ResumeMusicChannel(Channel)</Signature>
        <Parameter Optional="False">
          <Name>Channel</Name>
          <Description>Which music channel to use</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Music functions</Group>
        <Description>Sets the music's current playing position in a specified channel.</Description>
        <Signature>SetMusicChannelPosition(Channel, Time)</Signature>
        <Parameter Optional="False">
          <Name>Channel</Name>
          <Description>Which music channel to use</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Time</Name>
          <Description>A new playing position (in milliseconds)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Music functions</Group>
        <Description>Queries the music's current playing position in a specified channel.</Description>
        <Signature>GetMusicChannelPosition(Channel)</Signature>
        <Parameter Optional="False">
          <Name>Channel</Name>
          <Description>Which music channel to use</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Music functions</Group>
        <Description>Queries whether the music is currently playing in a specified channel</Description>
        <Signature>IsMusicChannelPlaying(Channel)</Signature>
        <Parameter Optional="False">
          <Name>Channel</Name>
          <Description>Which music channel to use</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Music functions</Group>
        <Description>Queries the filename of the current music in a specified channel</Description>
        <Signature>GetMusicChannel(Channel)</Signature>
        <Parameter Optional="False">
          <Name>Channel</Name>
          <Description>Which music channel to use</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Music functions</Group>
        <Description>Sets the volume of currently playing music in a specified channel.</Description>
        <Signature>SetMusicChannelVolume(Channel, Volume)</Signature>
        <Parameter Optional="False">
          <Name>Channel</Name>
          <Description>Which music channel to use</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Volume</Name>
          <Description>Music volume in percent</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Music functions</Group>
        <Description>Queries the music's current volume in a specified channel.</Description>
        <Signature>GetMusicChannelVolume(Channel)</Signature>
        <Parameter Optional="False">
          <Name>Channel</Name>
          <Description>Which music channel to use</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Executes a script file and attaches it to the object.</Description>
        <Remarks>Each WME object can have multiple scripts attached.</Remarks>
        <Signature>AttachScript(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the script file to be executed.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Terminates a specified script file and detaches it from an object.</Description>
        <Signature>DetachScript(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the (running) script to be terminated and detached.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Queries whether a specified script file is running and attached to an object.</Description>
        <Signature>IsScriptRunning(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the script to be queried.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Queries whether the object supports a method of a specified name.</Description>
        <Signature>CanHandleMethod(MethodName)</Signature>
        <Parameter Optional="False">
          <Name>MethodName</Name>
          <Description>The name of the method to be checked.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Queries length of a given sound file</Description>
        <Signature>GetSoundLength(SoundFilename)</Signature>
        <Parameter Optional="False">
          <Name>SoundFilename</Name>
          <Description>Name of the sound file to be queried</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Plays a sound. If the filename is omitted, the currently assigned sound is played (if any).</Description>
        <Signature>PlaySound(Filename, Looping, LoopStart)</Signature>
        <Signature>PlaySound(Looping, LoopStart)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the sound file to be played</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Looping</Name>
          <Description>Whether the sound should be looped (optional, default = false).</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>LoopStart</Name>
          <Description>The point from which the sound restarts when looping, in milliseconds (optional, default=0).</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Plays a sound and triggers an event when the sound is over. If the filename is omitted, the currently assigned sound is played (if any).</Description>
        <Signature>PlaySoundEvent(Filename, EventName)</Signature>
        <Signature>PlaySoundEvent(EventName)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the sound file to be played</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>EventName</Name>
          <Description>The name of the event to be triggered after the sound finishes.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Stops the currently playing sound (if any).</Description>
        <Signature>StopSound()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Pauses the currently playing sound.</Description>
        <Signature>PauseSound()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Resumes a paused sound playback.</Description>
        <Signature>ResumeSound()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Queries whether a sound playback is in progress.</Description>
        <Signature>IsSoundPlaying()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Sets the sound's current playing position.</Description>
        <Signature>SetSoundPosition(Time)</Signature>
        <Parameter Optional="False">
          <Name>Time</Name>
          <Description>A new playing position (in milliseconds)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Queries the sound's current playing position</Description>
        <Signature>GetSoundPosition()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Sets a volume of the currently playing sound.</Description>
        <Signature>SetSoundVolume(Volume)</Signature>
        <Parameter Optional="False">
          <Name>Volume</Name>
          <Description>A new sound volume (in percent).</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Gets a volume of the currently playing sound.</Description>
        <Signature>GetSoundVolume()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Initializes a sound from file and makes it ready to be played.</Description>
        <Remarks>Use this method to pre-cache a sound file. Initializing the sound takes some time and sometimes it's desirable to move all sound initialization to e.g. scene start so that the subsequent PlaySound calls don't slow the game down. That's what LoadSound is for. To play the pre-cached sound simply call PlaySound without specifying a filename, for example SomeObject.PlaySound(false);</Remarks>
        <Signature>LoadSound(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The sound file to be loaded</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound effects functions</Group>
        <Description>Removes any sound effect currently assigned to this object.</Description>
        <Signature>SoundFXNone()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound effects functions</Group>
        <Description>Assigns an echo effect to the sounds played by this object.</Description>
        <Remarks>Example: &lt;b&gt;actor.SoundFXEcho(50, 50);&lt;/b&gt;</Remarks>
        <Signature>SoundFXEcho(WetDryMix, Feedback, LeftDelay, RightDelay)</Signature>
        <Parameter Optional="False">
          <Name>WetDryMix</Name>
          <Description>Wet/Dry Mix, in percent (0 to 100)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Feedback</Name>
          <Description>Feedback, in percent (0 to 100)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>LeftDelay</Name>
          <Description>Left delay, in milliseconds (1 to 2000)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>RightDelay</Name>
          <Description>Right delay, in milliseconds (1 to 2000)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound effects functions</Group>
        <Description>Assigns a reverb effect to the sounds played by this object.</Description>
        <Remarks>Example: &lt;b&gt;actor.SoundFXReverb(0, 0, 2000);&lt;/b&gt;</Remarks>
        <Signature>SoundFXReverb(InGain, ReverbMix, ReverbTime, HighFreqRTRatio)</Signature>
        <Parameter Optional="False">
          <Name>InGain</Name>
          <Description>In gain, in dB (-96 to 0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ReverbMix</Name>
          <Description>Reverb mix, in dB (-96 to 0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ReverbTime</Name>
          <Description>Reverb time, in milliseconds (0.001 to 3000)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>HighFreqRTRatio</Name>
          <Description>HighFreq RT Ratio (0.001 to 0.999)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Event functions</Group>
        <Description>Applies a named event to the object.</Description>
        <Signature>ApplyEvent(EventName)</Signature>
        <Parameter Optional="False">
          <Name>EventName</Name>
          <Description>A name of the event to be applied to the object.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Event functions</Group>
        <Description>Queries whether the object has an event handler for a specified event.</Description>
        <Signature>CanHandleEvent(EventName)</Signature>
        <Parameter Optional="False">
          <Name>EventName</Name>
          <Description>The name of the event to be checked.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Moves an object to a specified location.</Description>
        <Signature>SkipTo(X, Y)</Signature>
        <Parameter Optional="False">
          <Name>X</Name>
          <Description>Destination X coordinate.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Y</Name>
          <Description>Destination Y coordinate.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Sets the mouse cursor position.</Description>
        <Signature>SetMousePos(X, Y)</Signature>
        <Parameter Optional="False">
          <Name>X</Name>
          <Description>New X position of the mouse cursor. </Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Y</Name>
          <Description>New Y position of the mouse cursor. </Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Quits the current game session.</Description>
        <Signature>QuitGame()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Queries whether a given file exists.</Description>
        <Signature>FileExists(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>Filename to be tested.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Takes a screenshot of the current game and saves it into a BMP file.</Description>
        <Signature>Screenshot(Name)</Signature>
        <Parameter Optional="False">
          <Name>Name</Name>
          <Description>Base name to be used for the generated BMP file (optional, defaults to Game.Name)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Takes an (optionally resized) screenshot of the current game and saves it into a BMP file.</Description>
        <Signature>ScreenshotEx(Filename, Width, Height)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>Filename of the BMP file to be created</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Width</Name>
          <Description>The resuting width of the screenshot</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Height</Name>
          <Description>The resuting height of the screenshot</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Loads the string table from a file.</Description>
        <Remarks>The string table is NOT part of the saved game. You need either to ask user for language selection each time the game is started or store the setting in the registry.</Remarks>
        <Signature>LoadStringTable(Filename, ClearOld)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>Name of the string table to be loaded</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ClearOld</Name>
          <Description>Remove the old string from the string table (optional, default=true)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Adds a directory to be used when WME automatically looks for speech files.</Description>
        <Remarks>By default WME looks for speech files in a "speech" directory only.</Remarks>
        <Signature>AddSpeechDir(Directory)</Signature>
        <Parameter Optional="False">
          <Name>Directory</Name>
          <Description>The directory name to look in</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Removes a directory from the list of dirs to look for speech files automatically.</Description>
        <Signature>RemoveSpeechDir(Directory)</Signature>
        <Parameter Optional="False">
          <Name>Directory</Name>
          <Description>The directory to be removed</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Resets the game's persistent data.</Description>
        <Remarks>This method deletes all scene states, selected responses, sets timer to zero and also clears all global variables, except those holding game objects (such as windows or entities). Use this method if you want to start a new game.</Remarks>
        <Signature>Reset()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Opens a specified document file or internet URL in an associated program.</Description>
        <Remarks>This method uses the Windows extension associations to run the right program. Note that the document file MUST NOT be stored inside the game packages. It must be a regular file and you must reference it either by full filename or a filename relative to the game directory.</Remarks>
        <Signature>OpenDocument(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the document file to be opened</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Sets an image to be displayed while loading a saved game.</Description>
        <Signature>SetLoadingScreen(ImageFilename, PosX, PosY)</Signature>
        <Parameter Optional="False">
          <Name>ImageFilename</Name>
          <Description>The filename of the image to be used or null</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>PosX</Name>
          <Description>The X position of the image</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>PosY</Name>
          <Description>The Y position of the image</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Sets an image to be displayed while saving the game.</Description>
        <Signature>SetSavingScreen(ImageFilename, PosX, PosY)</Signature>
        <Parameter Optional="False">
          <Name>ImageFilename</Name>
          <Description>The filename of the image to be used or null</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>PosX</Name>
          <Description>The X position of the image</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>PosY</Name>
          <Description>The Y position of the image</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Clears the content of the engine script cache.</Description>
        <Remarks>Normally the engine caches compiled scripts so that they don't need to be compiled multiple times. This method allows you to flush the script cache, for example if you generate scripts dynamically and need them to be always re-compiled.</Remarks>
        <Signature>ClearScriptCache()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Briefly displays a "loading" icon.</Description>
        <Remarks>You can use this function to briefly display a "work-in-progress" symbol; for example call this method before calling a command which takes a long time (loading a window, long animation etc.). The icon is displayed until the script returns control back to the engine, unless the Persistent parameter is set to true. In that case you have to manually hide the icon by calling the &lt;b&gt;Game.HideLoadingIcon()&lt;/b&gt; method.</Remarks>
        <Signature>DisplayLoadingIcon(Sprite, X, Y, Persistent)</Signature>
        <Parameter Optional="False">
          <Name>Sprite</Name>
          <Description>The filename of a sprite to be displayed as a loading icon.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>X</Name>
          <Description>The X position of the loading icon.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Y</Name>
          <Description>The Y position of the loading icon.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Persistent</Name>
          <Description>Specifies if the icon should stay on screen until HideLoadingIcon() is called (optional, default=false)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Hides a "loading" icon displayed by DisplayLoadingIcon()</Description>
        <Signature>HideLoadingIcon()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Video functions</Group>
        <Description>Plays a given AVI video file</Description>
        <Signature>PlayVideo(Filename, Type, X, Y, FreezeMusic)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the AVI file to be played.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Type</Name>
          <Description>Type of display, 0=at a given position, 1=stretched, 2=centered (optional, default=1)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>X</Name>
          <Description>X position on screen. Only used when Type is 0 (optional, default=0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Y</Name>
          <Description>Y position on screen. Only used when Type is 0 (optional, default=0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>FreezeMusic</Name>
          <Description>Specifies whether the background music should be suspended while video is playing (optional, default=true)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Video functions</Group>
        <Description>Plays a given Theora video file</Description>
        <Signature>PlayTheora(Filename, Type, X, Y, FreezeMusic, DropFrames)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the Ogg Theora file to be played.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Type</Name>
          <Description>Type of display, 0=at a given position, 1=stretched, 2=centered (optional, default=1)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>X</Name>
          <Description>X position on screen. Only used when Type is 0 (optional, default=0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Y</Name>
          <Description>Y position on screen. Only used when Type is 0 (optional, default=0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>FreezeMusic</Name>
          <Description>Specifies whether the background music should be suspended while video is playing (optional, default=true)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>DropFrames</Name>
          <Description>Specifies whether the video playback should drop frames if the playback is too slow (optional, default=true)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Registry functions</Group>
        <Description>Writes a given number to the Windows Registry.</Description>
        <Signature>RegWriteNumber(Key, Value)</Signature>
        <Parameter Optional="False">
          <Name>Key</Name>
          <Description>Name of the key to be written</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Value</Name>
          <Description>The number to be written</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Registry functions</Group>
        <Description>Writes a given string to the Windows Registry.</Description>
        <Signature>RegWriteString(Key, Value)</Signature>
        <Parameter Optional="False">
          <Name>Key</Name>
          <Description>Name of the key to be written</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Value</Name>
          <Description>The string to be written</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Registry functions</Group>
        <Description>Reads a numeric value from the Windows Registry.</Description>
        <Signature>RegReadNumber(Key, InitValue)</Signature>
        <Parameter Optional="False">
          <Name>Key</Name>
          <Description>Name of the key to be read from</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>InitValue</Name>
          <Description>Initial value to be returned if the key doesn't exist (optional, default=null)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Registry functions</Group>
        <Description>Reads a string value from the Windows Registry.</Description>
        <Signature>RegReadString(Key, InitValue)</Signature>
        <Parameter Optional="False">
          <Name>Key</Name>
          <Description>Name of the key to be read from</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>InitValue</Name>
          <Description>Initial value to be returned if the key doesn't exist (optional, default=null)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Save/load functions</Group>
        <Description>Saves a game to the given save slot.</Description>
        <Signature>SaveGame(Slot, Description)</Signature>
        <Parameter Optional="False">
          <Name>Slot</Name>
          <Description>Number of the save slot to be used</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Description</Name>
          <Description>Description of the saved game</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Save/load functions</Group>
        <Description>Loads a game from the given save slot.</Description>
        <Signature>LoadGame(Slot)</Signature>
        <Parameter Optional="False">
          <Name>Slot</Name>
          <Description>Number of the save slot to be used</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Save/load functions</Group>
        <Description>Queries whether a given save slot is in use.</Description>
        <Signature>IsSaveSlotUsed(Slot)</Signature>
        <Parameter Optional="False">
          <Name>Slot</Name>
          <Description>Number of the save slot to be tested.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Save/load functions</Group>
        <Description>Queries a description of a given save slot.</Description>
        <Signature>GetSaveSlotDescription(Slot)</Signature>
        <Parameter Optional="False">
          <Name>Slot</Name>
          <Description>Number of the save slot to be queried</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Save/load functions</Group>
        <Description>Empties a given save slot.</Description>
        <Signature>EmptySaveSlot(Slot)</Signature>
        <Parameter Optional="False">
          <Name>Slot</Name>
          <Description>Number of the save slot to be emptied.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Volume functions</Group>
        <Description>Sets the volume of sound effects.</Description>
        <Signature>SetGlobalSFXVolume(Percent)</Signature>
        <Parameter Optional="False">
          <Name>Percent</Name>
          <Description>A new sound volume (in percent)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Volume functions</Group>
        <Description>Sets the volume of speech.</Description>
        <Signature>SetGlobalSpeechVolume(Percent)</Signature>
        <Parameter Optional="False">
          <Name>Percent</Name>
          <Description>A new speech volume (in percent)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Volume functions</Group>
        <Description>Sets the volume of music.</Description>
        <Signature>SetGlobalMusicVolume(Percent)</Signature>
        <Parameter Optional="False">
          <Name>Percent</Name>
          <Description>A new music volume (in percent)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Volume functions</Group>
        <Description>Sets the master volume.</Description>
        <Signature>SetGlobalMasterVolume(Percent)</Signature>
        <Parameter Optional="False">
          <Name>Percent</Name>
          <Description>A new sound volume (in percent)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Volume functions</Group>
        <Description>Gets the current sound effects volume.</Description>
        <Signature>GetGlobalSFXVolume()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Volume functions</Group>
        <Description>Gets the current speech volume.</Description>
        <Signature>GetGlobalSpeechVolume()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Volume functions</Group>
        <Description>Gets the current music volume.</Description>
        <Signature>GetGlobalMusicVolume()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Volume functions</Group>
        <Description>Gets the current master volume.</Description>
        <Signature>GetGlobalMasterVolume()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Sets the standard cursor.</Description>
        <Signature>SetCursor(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>Filename of a sprite file to be used as a cursor pointer.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Returns the filename of the cursor sprite (or null if no cursor is set)</Description>
        <Signature>GetCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Returns a reference to the cursor sprite (or null if no cursor is set)</Description>
        <Signature>GetCursorObject()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Removes the standard cursor.</Description>
        <Signature>RemoveCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Queries whether the standard cursor is set.</Description>
        <Signature>HasCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Sets the active cursor.</Description>
        <Remarks>The "active" cursor is used when the mouse pointer is over an interactive object.</Remarks>
        <Signature>SetActiveCursor(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>Filename of a sprite file to be used as a cursor pointer.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Returns the filename of the active cursor sprite (or null if no cursor is set)</Description>
        <Signature>GetActiveCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Returns a reference to the active cursor sprite (or null if no cursor is set)</Description>
        <Signature>GetActiveCursorObject()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Removes the active cursor.</Description>
        <Signature>RemoveActiveCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Queries whether the active cursor is set.</Description>
        <Signature>HasActiveCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Sets the non-interactive cursor.</Description>
        <Signature>SetWaitCursor(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>Filename of a sprite file to be used as a cursor pointer.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Returns the filename of the non-interactive cursor sprite (or null if no cursor is set)</Description>
        <Signature>GetWaitCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Returns a reference to the non-interactive cursor sprite (or null if no cursor is set)</Description>
        <Signature>GetWaitCursorObject()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Removes the non-interactive cursor.</Description>
        <Signature>RemoveWaitCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Fading functions</Group>
        <Description>Fades the screen out to a specified color.</Description>
        <Remarks>The &lt;b&gt;FadeOut&lt;/b&gt; method blocks the script execution until the fading is over, while the &lt;b&gt;FadeOutAsync&lt;/b&gt; method returns immediately. The &lt;b&gt;SystemFadeOut&lt;/b&gt; and &lt;b&gt;SystemFadeOutAsync&lt;/b&gt; methods continue fading even after the game enters the system exclusive mode.</Remarks>
        <Signature>FadeOut(Duration, TargetRed, TargetGreen, TargetBlue, TargetAlpha)</Signature>
        <Signature>FadeOutAsync(Duration, TargetRed, TargetGreen, TargetBlue, TargetAlpha)</Signature>
        <Signature>SystemFadeOut(Duration, TargetRed, TargetGreen, TargetBlue, TargetAlpha)</Signature>
        <Signature>SystemFadeOutAsync(Duration, TargetRed, TargetGreen, TargetBlue, TargetAlpha)</Signature>
        <Parameter Optional="False">
          <Name>Duration</Name>
          <Description>Specifies how long it will take to fade out, in milliseconds (optional, default=500)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>TargetRed</Name>
          <Description>The Red component of a target fade color (optional, default=0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>TargetGreen</Name>
          <Description>The Green component of a target fade color (optional, default=0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>TargetBlue</Name>
          <Description>The Blue component of a target fade color (optional, default=0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>TargetAlpha</Name>
          <Description>The Alpha component (opacity) of a target fade color (optional, default=255)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Fading functions</Group>
        <Description>Fades the screen in from a specified color.</Description>
        <Remarks>The &lt;b&gt;FadeIn&lt;/b&gt; method blocks the script execution until the fading is over, while the &lt;b&gt;FadeInAsync&lt;/b&gt; method returns immediately. The &lt;b&gt;SystemFadeIn&lt;/b&gt; and &lt;b&gt;SystemFadeInAsync&lt;/b&gt; methods continue fading even after the game enters the system exclusive mode.</Remarks>
        <Signature>FadeIn(Duration, SourceRed, SourceGreen, SourceBlue, SourceAlpha)</Signature>
        <Signature>FadeInAsync(Duration, SourceRed, SourceGreen, SourceBlue, SourceAlpha)</Signature>
        <Signature>SystemFadeIn(Duration, SourceRed, SourceGreen, SourceBlue, SourceAlpha)</Signature>
        <Signature>SystemFadeInAsync(Duration, SourceRed, SourceGreen, SourceBlue, SourceAlpha)</Signature>
        <Parameter Optional="False">
          <Name>Duration</Name>
          <Description>Specifies how long it will take to fade in, in milliseconds (optional, default=500)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>SourceRed</Name>
          <Description>The Red component of the initial fade color (optional, default=0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>SourceGreen</Name>
          <Description>The Green component of the initial fade color (optional, default=0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>SourceBlue</Name>
          <Description>The Blue component of the initial fade color (optional, default=0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>SourceAlpha</Name>
          <Description>The Alpha component (opacity) of the initial fade color (optional, default=255)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Fading functions</Group>
        <Description>Gets the current fading color.</Description>
        <Remarks>You can use the GetRValue(), GetGValue(), GetBValue() and GetAValue() functions to extract individual color components.</Remarks>
        <Signature>GetFadeColor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Scene functions</Group>
        <Description>Loads a specified scene file.</Description>
        <Signature>ChangeScene(Filename, FadeOut, FadeIn)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>Filename of the scene file to be loaded.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>FadeOut</Name>
          <Description>Whether the old scene should fade out before the scene change (optional, default = true)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>FadeIn</Name>
          <Description>Whether the new scene should fade in after the scene change (optional, default = true)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Responses/inventory</Group>
        <Description>Adds a single response sentence to the response box.</Description>
        <Signature>AddResponse(ID, Response, IconFilename, HoverIconFilename, PressedIconFilename, FontFilename)</Signature>
        <Parameter Optional="False">
          <Name>ID</Name>
          <Description>An ID number of this response.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Response</Name>
          <Description>A text of this reponse.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>IconFilename</Name>
          <Description>A filename of a sprite for this response (optional).</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>HoverIconFilename</Name>
          <Description>A filename of a hover sprite for this response (optional).</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>PressedIconFilename</Name>
          <Description>A filename of a pressed sprite for this response (optional).</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>FontFilename</Name>
          <Description>Filename of font to be used for this response (optional).</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Responses/inventory</Group>
        <Description>Adds a single response sentence to the response box. The response is only added once per a dialogue branch.</Description>
        <Remarks>The engine will only add the response to the response box if it wasn't selected before by the player in the current dialogue branch. You must denote the dialogue branch using the Game.StartDlgBranch() and Game.EntDlgBranch() to make this method work.</Remarks>
        <Signature>AddResponseOnce(ID, Response, IconFilename, HoverIconFilename, PressedIconFilename, FontFilename)</Signature>
        <Parameter Optional="False">
          <Name>ID</Name>
          <Description>An ID number of this response.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Response</Name>
          <Description>A text of this reponse.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>IconFilename</Name>
          <Description>A filename of a sprite for this response (optional).</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>HoverIconFilename</Name>
          <Description>A filename of a hover sprite for this response (optional).</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>PressedIconFilename</Name>
          <Description>A filename of a pressed sprite for this response (optional).</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>FontFilename</Name>
          <Description>Filename of font to be used for this response (optional).</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Responses/inventory</Group>
        <Description>Adds a single response sentence to the response box. The response is only added once per a game session.</Description>
        <Remarks>The engine will only add the response to the response box if it wasn't selected before by the player before. You must denote a dialogue branch using the Game.StartDlgBranch() and Game.EntDlgBranch() to make this method work.</Remarks>
        <Signature>AddResponseOnceGame(ID, Response, IconFilename, HoverIconFilename, PressedIconFilename, FontFilename)</Signature>
        <Parameter Optional="False">
          <Name>ID</Name>
          <Description>An ID number of this response.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Response</Name>
          <Description>A text of this reponse.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>IconFilename</Name>
          <Description>A filename of a sprite for this response (optional).</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>HoverIconFilename</Name>
          <Description>A filename of a hover sprite for this response (optional).</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>PressedIconFilename</Name>
          <Description>A filename of a pressed sprite for this response (optional).</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>FontFilename</Name>
          <Description>Filename of font to be used for this response (optional).</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Responses/inventory</Group>
        <Description>Revives a previously disabled response.</Description>
        <Remarks>If you add a response using the Game.AddResponseOnce() or Game.AddResponseOnceGame() methods, it gets disabled once the player selects it. Use the ResetResponse method to make such response reappear.</Remarks>
        <Signature>ResetResponse(ID)</Signature>
        <Parameter Optional="False">
          <Name>ID</Name>
          <Description>An ID number of response to be revived.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Responses/inventory</Group>
        <Description>Displays a response box and waits for the player's choice.</Description>
        <Signature>GetResponse(AutoSelectLastResp)</Signature>
        <Parameter Optional="False">
          <Name>AutoSelectLastResp</Name>
          <Description>Specifies whether the last remaining response should be automatically selected (optional, defaul=false)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Responses/inventory</Group>
        <Description>Queries the number of remaining responses in the response box.</Description>
        <Remarks>Some of the responses added by the AddResponseOnce or AddResponseOnceGame methods may have not been actually added to the response box. Use this method to find out how many responses currently really are prepared in the response box.</Remarks>
        <Signature>GetNumResponses()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Responses/inventory</Group>
        <Description>Returns a reference to the window object used by the inventory box.</Description>
        <Signature>GetInventoryWindow()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Responses/inventory</Group>
        <Description>Returns a reference to the window object used by the responses box.</Description>
        <Signature>GetResponsesWindow()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Responses/inventory</Group>
        <Description>Denotes a start of a dialogue branch.</Description>
        <Remarks>Dialogue branches only need to be explicitly denoted if you want to use the Game.AddResponseOnce() or Game.AddResponseOnceGame() methods.</Remarks>
        <Signature>StartDlgBranch(DialogueName)</Signature>
        <Parameter Optional="False">
          <Name>DialogueName</Name>
          <Description>A name of the dialogue branch. Dialogue names should be unique within one script file. The parameter is optional but it's recommended to specify a name.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Responses/inventory</Group>
        <Description>Denotes an end of a dialogue branch.</Description>
        <Remarks>Dialogue branches only need to be explicitly denoted if you want to use the Game.AddResponseOnce() or Game.AddResponseOnceGame() methods.</Remarks>
        <Signature>EndDlgBranch(DialogueName)</Signature>
        <Parameter Optional="False">
          <Name>DialogueName</Name>
          <Description>A name of the dialogue branch. Dialogue names should be unique within one script file. The parameter is optional; if you don't specify a name, the inner-most dialogue branch is ended.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Responses/inventory</Group>
        <Description>Queries a current dialogue branch name.</Description>
        <Signature>GetCurrentDlgBranch()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Responses/inventory</Group>
        <Description>Reloads a response box from file.</Description>
        <Signature>LoadResponseBox(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The response-box definition file to be loaded.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Responses/inventory</Group>
        <Description>Reloads an inventory box from file.</Description>
        <Signature>LoadInventoryBox(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The inventory-box definition file to be loaded.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Responses/inventory</Group>
        <Description>Loads inventory items from a definition file.</Description>
        <Signature>LoadItems(Filename, Merge)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The items definition file to be loaded</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Merge</Name>
          <Description>The new items will be merged with existing ones (optional, default=false)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Item functions</Group>
        <Description>Adds an item into the inventory.</Description>
        <Signature>TakeItem(ItemName, InsertAfter)</Signature>
        <Parameter Optional="False">
          <Name>ItemName</Name>
          <Description>A name of the item to be added to object's inventory.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>InsertAfter</Name>
          <Description>A name of the item which the new item should be inserted after (optional).</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Item functions</Group>
        <Description>Removes an item from the inventory.</Description>
        <Signature>DropItem(ItemName)</Signature>
        <Parameter Optional="False">
          <Name>ItemName</Name>
          <Description>A name of the item to be removed from object's inventory.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Item functions</Group>
        <Description>Queries an inventory item.</Description>
        <Signature>GetItem(ItemIndex)</Signature>
        <Signature>GetItem(ItemName)</Signature>
        <Parameter Optional="False">
          <Name>ItemIndex</Name>
          <Description>An index of a &lt;b&gt;taken item&lt;/b&gt; to be queried.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ItemName</Name>
          <Description>A name of an inventory item to be queried.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Item functions</Group>
        <Description>Queries whether a given item is in inventory of any of this object.</Description>
        <Remarks>Note that this method only searches the current object, use the &lt;b&gt;Game.IsItemTaken()&lt;/b&gt; method if you want to search all game objects.</Remarks>
        <Signature>HasItem(ItemName)</Signature>
        <Signature>HasItem(ItemObject)</Signature>
        <Parameter Optional="False">
          <Name>ItemName</Name>
          <Description>A name of the item to be queried.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ItemObject</Name>
          <Description>Reference to the item object to be queried.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Item functions</Group>
        <Description>Queries whether a given item is in inventory of any of the game objects.</Description>
        <Signature>IsItemTaken(ItemName)</Signature>
        <Signature>IsItemTaken(ItemObject)</Signature>
        <Parameter Optional="False">
          <Name>ItemName</Name>
          <Description>A name of the item to be queried.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ItemObject</Name>
          <Description>Reference to the item object to be queried.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Dynamic object creation</Group>
        <Description>Creates a new entity object.</Description>
        <Signature>CreateEntity(Name)</Signature>
        <Parameter Optional="False">
          <Name>Name</Name>
          <Description>The name of the entity object (optional)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Dynamic object creation</Group>
        <Description>Destroys a entity object.</Description>
        <Signature>DeleteEntity(Entity)</Signature>
        <Parameter Optional="False">
          <Name>Entity</Name>
          <Description>The entity object to be destroyed</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Dynamic object creation</Group>
        <Description>Creates a new window object.</Description>
        <Signature>CreateWindow(Name)</Signature>
        <Parameter Optional="False">
          <Name>Name</Name>
          <Description>The name of the window object (optional)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Dynamic object creation</Group>
        <Description>Destroys a window object.</Description>
        <Signature>DeleteWindow(Window)</Signature>
        <Parameter Optional="False">
          <Name>Window</Name>
          <Description>The window object to be destroyed</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Dynamic object creation</Group>
        <Description>Creates a new inventory item object.</Description>
        <Signature>CreateItem(Name)</Signature>
        <Parameter Optional="False">
          <Name>Name</Name>
          <Description>The name of the item object (optional)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Dynamic object creation</Group>
        <Description>Destroys an item object.</Description>
        <Remarks>This method permanently destroys the inventory item. You can no longer reference it in methods like TakeItem etc.</Remarks>
        <Signature>DeleteItem(Item)</Signature>
        <Parameter Optional="False">
          <Name>Item</Name>
          <Description>The item object to be destroyed</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>3D characters related</Group>
        <Description>Sets and image to be used as a simple shadow for 3D characters</Description>
        <Signature>SetShadowImage(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of an image to be used</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>3D characters related</Group>
        <Description>Gets the currently assigned image to be used as a simple shadow for 3D characters</Description>
        <Signature>GetShadowImage()</Signature>
      </Method>
      <Attribute Global="False" ReadOnly="True">
        <Name>Type</Name>
        <Description>Returns always "game"</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Accelerated</Name>
        <Description>Returns &lt;b&gt;true&lt;/b&gt; if the game currently uses 3D acceleration to display graphics.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>CurrentTime</Name>
        <Description>Returns the time elapsed since the game has started.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>WindowsTime</Name>
        <Description>Returns the time elapsed since Windows has started.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>TextEncoding</Name>
        <Description>Specifies text encoding used for in-game texts, 0..ANSI, 1..UTF8</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>TextRTL</Name>
        <Description>Specifies if the game uses right-to-left reading order (for Henrew and Arabic). Only affects TrueType fonts!</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>MouseX</Name>
        <Description>The current X position of the mouse cursor</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>MouseY</Name>
        <Description>The current Y position of the mouse cursor</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>MainObject</Name>
        <Description>The object which is used for the scene's auto scrolling, can be (set to) &lt;b&gt;null&lt;/b&gt;</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>ActiveObject</Name>
        <Description>Returns the object which is currently under the mouse cursor (or &lt;b&gt;null&lt;/b&gt; if there's none)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>InventoryObject</Name>
        <Description>The object whose inventory is currently displayed.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>ScreenWidth</Name>
        <Description>Returns the screen's width in pixels.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>ScreenHeight</Name>
        <Description>Returns the screen's height in pixels.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>DebugMode</Name>
        <Description>Returns whether the game runs in the debugging mode.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>SoundAvailable</Name>
        <Description>Returns whether the sound is available and enabled.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Keyboard</Name>
        <Description>Returns a reference to the Keyboard State object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Subtitles</Name>
        <Description>Specifes whether the speech subtitles are enabled.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>VideoSubtitles</Name>
        <Description>Specifes whether the AVI/Theora video subtitles are enabled.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SubtitlesSpeed</Name>
        <Description>Specifies the speech subtitles speed (in milliseconds per one character)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Scene</Name>
        <Description>Returns a reference to the currently loaded scene object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SelectedItem</Name>
        <Description>Currently selected inventory item (or &lt;b&gt;null&lt;/b&gt; for no item).</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>NumItems</Name>
        <Description>Returns the number of items in the player's inventory.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>InventoryVisible</Name>
        <Description>Specifies whether the inventory box is currently visible.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>ResponsesVisible</Name>
        <Description>Returns whether a response box is visible (i.e. the game awaits player's choice).</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>WindowedMode</Name>
        <Description>Returns &lt;b&gt;true&lt;/b&gt; if the game runs in windowed mode.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Hwnd</Name>
        <Description>Returns the window handle (HWND) of the game window (only useful for plugin development).</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>PrevScene</Name>
        <Description>Returns the name of the previous scene.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>PrevSceneFilename</Name>
        <Description>Returns the filename of the previous scene.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>LastResponse</Name>
        <Description>Returns the text of the most recently selected response.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>FPS</Name>
        <Description>Returns the current framerate (in frames per second)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Shadows</Name>
        <Description>Specifies if shadows are enabled for 3D characters</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SimpleShadows</Name>
        <Description>Specifies if simple shadows are to be used for 3D characters. This attribute has no effect if real-time shadows are unsupported</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>SupportsRealTimeShadows</Name>
        <Description>Returns &lt;b&gt;true&lt;/b&gt; if the videocard supports real-time shadows</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Direct3DDevice</Name>
        <Description>Returns the pointer to the underlying IDirect3DDevice8 object (plugins only)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>DirectDrawInterface</Name>
        <Description>Returns the pointer to the underlying IDirectDraw7 object (plugins only)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Frozen</Name>
        <Description>Returns &lt;b&gt;true&lt;/b&gt; if the game is currently in frozen state</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Name</Name>
        <Description>The internal name of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Caption</Name>
        <Description>The caption of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>X</Name>
        <Description>The X position of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Y</Name>
        <Description>The Y position of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Height</Name>
        <Description>Returns the current height of the object. In case of actors and entities the scaling is taken into account.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Filename</Name>
        <Description>Returns the filename.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Ready</Name>
        <Description>Returns whether the object isn't currently performing any action.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Interactive</Name>
        <Description>Specifies whether the object recieves user input.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SoundPanning</Name>
        <Description>Specifies whether the sounds played by this object are automatically panned depending on object's position on screen.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>NonIntMouseEvents</Name>
        <Description>Specifies if the object can receive the &lt;b&gt;MouseEntry&lt;/b&gt; and &lt;b&gt;MouseLeave&lt;/b&gt; events even if the game is in non-interactive mode.</Description>
      </Attribute>
      <Event>
        <Name>LeftClick</Name>
        <Description>The left mouse button has been pressed.</Description>
      </Event>
      <Event>
        <Name>RightClick</Name>
        <Description>The right mouse button has been pressed.</Description>
      </Event>
      <Event>
        <Name>MiddleClick</Name>
        <Description>The middle mouse button has been pressed.</Description>
      </Event>
      <Event>
        <Name>LeftDoubleClick</Name>
        <Description>The left mouse button has been double-clicked.</Description>
      </Event>
      <Event>
        <Name>LeftRelease</Name>
        <Description>The left mouse button has been released.</Description>
      </Event>
      <Event>
        <Name>RightRelease</Name>
        <Description>The right mouse button has been released.</Description>
      </Event>
      <Event>
        <Name>MiddleRelease</Name>
        <Description>The middle mouse button has been released.</Description>
      </Event>
      <Event>
        <Name>MouseWheelUp</Name>
        <Description>The mouse wheel has been rolled up.</Description>
      </Event>
      <Event>
        <Name>MouseWheelDown</Name>
        <Description>The mouse wheel has been rolled down.</Description>
      </Event>
      <Event>
        <Name>Keypress</Name>
        <Description>Some key has been pressed. Use the &lt;b&gt;Keyboard&lt;/b&gt; variable to find out the details.</Description>
      </Event>
      <Event>
        <Name>BeforeSave</Name>
        <Description>The game is about to save its state.</Description>
      </Event>
      <Event>
        <Name>AfterLoad</Name>
        <Description>The game just loaded its state.</Description>
      </Event>
    </ScriptObject>
    <ScriptObject>
      <BaseFilename>scripting_ref_scene</BaseFilename>
      <Name>Scene object</Name>
      <Description>The Scene object represents the currently loaded scene. There is always one and only Scene object available. It's accessible via the Game.Scene attribute. For the convenience the templates automatically store the scene object in a global variable named &lt;b&gt;Scene&lt;/b&gt;.</Description>
      <Method Global="False" Constructor="False">
        <Group>Object manipulation</Group>
        <Description>Loads a new actor from a file.</Description>
        <Remarks>Actors loaded using this method will be automatically unloaded when the game changes to another scene (as opposed to the &lt;b&gt;Game.LoadActor&lt;/b&gt; method).</Remarks>
        <Signature>LoadActor(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the actor file to be loaded.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Object manipulation</Group>
        <Description>Loads a new 3D actor from a file.</Description>
        <Remarks>Actors loaded using this method will be automatically unloaded when the game changes to another scene (as opposed to the &lt;b&gt;Game.LoadActor3D&lt;/b&gt; method).</Remarks>
        <Signature>LoadActor3D(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the 3D actor file to be loaded.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Object manipulation</Group>
        <Description>Loads a new entity from a file.</Description>
        <Remarks>Entities loaded using this method will be automatically unloaded when the game changes to another scene (as opposed to the &lt;b&gt;Game.LoadEntity&lt;/b&gt; method).</Remarks>
        <Signature>LoadEntity(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the entity file to be loaded.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Object manipulation</Group>
        <Description>Removes an object from memory.</Description>
        <Remarks>If you load an object using the Scene.LoadActor or Scene.LoadEntity methods, you should unload those when you no longer need them to free memory. Otherwise those objects will be released automatically when the game changes to another scene.</Remarks>
        <Signature>UnloadObject(Object)</Signature>
        <Parameter Optional="False">
          <Name>Object</Name>
          <Description>The object to be removed from memory.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Scrolling functions</Group>
        <Description>Sets the current scroll position to the given point / object.</Description>
        <Signature>SkipTo(X, Y)</Signature>
        <Signature>SkipTo(Object)</Signature>
        <Parameter Optional="False">
          <Name>X</Name>
          <Description>New X coordinate for scroll position</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Y</Name>
          <Description>New Y coordinate for scroll position</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Object</Name>
          <Description>An object (actor/entity) to be used as a new scroll position</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Scrolling functions</Group>
        <Description>Scrolls the scene to the given point / object.</Description>
        <Remarks>The &lt;b&gt;Scene.AutoScroll&lt;/b&gt; attribute must be set to &lt;b&gt;true&lt;/b&gt; for this method to work.</Remarks>
        <Signature>ScrollTo(X, Y)</Signature>
        <Signature>ScrollTo(Object)</Signature>
        <Parameter Optional="False">
          <Name>X</Name>
          <Description>X coordinate of the target scroll position</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Y</Name>
          <Description>Y coordinate of the target scroll position</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Object</Name>
          <Description>An object (actor/entity) to be used as a new target scroll position</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Node querying functions</Group>
        <Description>Returns the given layer.</Description>
        <Signature>GetLayer(LayerIndex)</Signature>
        <Signature>GetLayer(LayerName)</Signature>
        <Parameter Optional="False">
          <Name>LayerIndex</Name>
          <Description>An index of a layer to be returned</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>LayerName</Name>
          <Description>A name of a layer to be returned</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Node querying functions</Group>
        <Description>Returns the given waypoint group.</Description>
        <Signature>GetWaypointGroup(WptGroupIndex)</Signature>
        <Parameter Optional="False">
          <Name>WptGroupIndex</Name>
          <Description>An index of a waypoint group to be returned</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Node querying functions</Group>
        <Description>Returns the given scene node (entity or region).</Description>
        <Remarks>The scene nodes should have unique names for this method to work correctly.</Remarks>
        <Signature>GetNode(Name)</Signature>
        <Parameter Optional="False">
          <Name>Name</Name>
          <Description>The name of the scene node to be returned</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Node querying functions</Group>
        <Description>Returns a scene region at a given position.</Description>
        <Signature>GetRegionAt(X, Y, IncludeDecorations)</Signature>
        <Parameter Optional="False">
          <Name>X</Name>
          <Description>The X coordinate within the scene to be searched for regions</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Y</Name>
          <Description>The Y coordinate within the scene to be searched for regions</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>IncludeDecorations</Name>
          <Description>Specifies whether the decoration regions should be searched too (optional, default=false)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Scene querying functions</Group>
        <Description>Queries whether the scene is blocked at a given point.</Description>
        <Signature>IsBlockedAt(X, Y)</Signature>
        <Parameter Optional="False">
          <Name>X</Name>
          <Description>The X coordinate of the point within scene to be tested</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Y</Name>
          <Description>The Y coordinate of the point within scene to be tested</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Scene querying functions</Group>
        <Description>Queries whether the scene is walkable at a given point.</Description>
        <Signature>IsWalkableAt(X, Y)</Signature>
        <Parameter Optional="False">
          <Name>X</Name>
          <Description>The X coordinate of the point within scene to be tested</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Y</Name>
          <Description>The Y coordinate of the point within scene to be tested</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Scene querying functions</Group>
        <Description>Queries a scale factor at a given point of the scene.</Description>
        <Signature>GetScaleAt(X, Y)</Signature>
        <Parameter Optional="False">
          <Name>X</Name>
          <Description>The X coordinate of the point within scene to be queried</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Y</Name>
          <Description>The Y coordinate of the point within scene to be queried</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Scene querying functions</Group>
        <Description>Queries a sprite rotation factor at a given point of the scene.</Description>
        <Signature>GetRotationAt(X, Y)</Signature>
        <Parameter Optional="False">
          <Name>X</Name>
          <Description>The X coordinate of the point within scene to be queried</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Y</Name>
          <Description>The Y coordinate of the point within scene to be queried</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Scene querying functions</Group>
        <Description>Queries whether a given point is lying within the current scene viewport.</Description>
        <Signature>IsPointInViewport(X, Y)</Signature>
        <Parameter Optional="False">
          <Name>X</Name>
          <Description>The X coordinate of the point to be tested</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Y</Name>
          <Description>The Y coordinate of the point to be tested</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Fading functions</Group>
        <Description>Fades the scene out to a specified color.</Description>
        <Remarks>The FadeOut method blocks the script execution until the fading is over, while the FadeOutAsync method returns immediately.</Remarks>
        <Signature>FadeOut(Duration, TargetRed, TargetGreen, TargetBlue, TargetAlpha)</Signature>
        <Signature>FadeOutAsync(Duration, TargetRed, TargetGreen, TargetBlue, TargetAlpha)</Signature>
        <Parameter Optional="False">
          <Name>Duration</Name>
          <Description>Specifies how long it will take to fade out, in milliseconds (optional, default=500)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>TargetRed</Name>
          <Description>The Red component of a target fade color (optional, default=0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>TargetGreen</Name>
          <Description>The Green component of a target fade color (optional, default=0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>TargetBlue</Name>
          <Description>The Blue component of a target fade color (optional, default=0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>TargetAlpha</Name>
          <Description>The Alpha component (opacity) of a target fade color (optional, default=255)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Fading functions</Group>
        <Description>Fades the scene in from a specified color.</Description>
        <Remarks>The FadeIn method blocks the script execution until the fading is over, while the FadeInAsync method returns immediately.</Remarks>
        <Signature>FadeIn(Duration, SourceRed, SourceGreen, SourceBlue, SourceAlpha)</Signature>
        <Signature>FadeInAsync(Duration, SourceRed, SourceGreen, SourceBlue, SourceAlpha)</Signature>
        <Parameter Optional="False">
          <Name>Duration</Name>
          <Description>Specifies how long it will take to fade in, in milliseconds (optional, default=500)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>SourceRed</Name>
          <Description>The Red component of the initial fade color (optional, default=0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>SourceGreen</Name>
          <Description>The Green component of the initial fade color (optional, default=0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>SourceBlue</Name>
          <Description>The Blue component of the initial fade color (optional, default=0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>SourceAlpha</Name>
          <Description>The Alpha component (opacity) of the initial fade color (optional, default=255)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Fading functions</Group>
        <Description>Gets the current fading color.</Description>
        <Remarks>You can use the GetRValue(), GetGValue(), GetBValue() and GetAValue() functions to extract individual color components.</Remarks>
        <Signature>GetFadeColor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Dynamic object creation</Group>
        <Description>Creates a new entity object.</Description>
        <Signature>CreateEntity(Name)</Signature>
        <Parameter Optional="False">
          <Name>Name</Name>
          <Description>The name of the entity object (optional)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Dynamic object creation</Group>
        <Description>Destroys a entity object.</Description>
        <Signature>DeleteEntity(Entity)</Signature>
        <Parameter Optional="False">
          <Name>Entity</Name>
          <Description>The entity object to be destroyed</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>3D characters related</Group>
        <Description>Enables a 3D walkplane or blocked object</Description>
        <Remarks>The scene must have a 3D geometry assigned for this method to work.</Remarks>
        <Signature>EnableNode3D(NodeName)</Signature>
        <Parameter Optional="False">
          <Name>NodeName</Name>
          <Description>The name of the node to be enabled.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>3D characters related</Group>
        <Description>Disables a 3D walkplane or blocked object</Description>
        <Remarks>The scene must have a 3D geometry assigned for this method to work.</Remarks>
        <Signature>DisableNode3D(NodeName)</Signature>
        <Parameter Optional="False">
          <Name>NodeName</Name>
          <Description>The name of the node to be disabled.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>3D characters related</Group>
        <Description>Enables a 3D light within the scene</Description>
        <Remarks>The scene must have a 3D geometry assigned for this method to work.</Remarks>
        <Signature>EnableLight(LightName)</Signature>
        <Parameter Optional="False">
          <Name>LightName</Name>
          <Description>The name of the light to be enabled.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>3D characters related</Group>
        <Description>Disables a 3D light within the scene</Description>
        <Remarks>The scene must have a 3D geometry assigned for this method to work.</Remarks>
        <Signature>DisableLight(LightName)</Signature>
        <Parameter Optional="False">
          <Name>LightName</Name>
          <Description>The name of the light to be disabled.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>3D characters related</Group>
        <Description>Changes the color of a 3D light</Description>
        <Remarks>The scene must have a 3D geometry assigned for this method to work.</Remarks>
        <Signature>SetLightColor(LightName, Color)</Signature>
        <Parameter Optional="False">
          <Name>LightName</Name>
          <Description>The name of the light to be changed</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Color</Name>
          <Description>The RGB color to be assigned to the light</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>3D characters related</Group>
        <Description>Switches a camera used to display 3D objects in scene</Description>
        <Remarks>The scene must have a 3D geometry assigned for this method to work.</Remarks>
        <Signature>SetActiveCamera(CameraName)</Signature>
        <Parameter Optional="False">
          <Name>CameraName</Name>
          <Description>The name of the camera to be used.</Description>
        </Parameter>
      </Method>
      <Attribute Global="False" ReadOnly="True">
        <Name>Type</Name>
        <Description>Returns always "scene"</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Name</Name>
        <Description>The internal name of the scene</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Filename</Name>
        <Description>Returns the filename.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Ready</Name>
        <Description>Returns whether the scene is ready (the scrolling is over)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>NumLayers</Name>
        <Description>Returns the number of layers</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>NumWaypointGroups</Name>
        <Description>Return the number of waypoint groups</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>MouseX</Name>
        <Description>Returns the current X position of the mouse cursor within the scene</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>MouseY</Name>
        <Description>Returns the current Y position of the mouse cursor within the scene</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>MainLayer</Name>
        <Description>Returns a reference to the scene's main layer</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>AutoScroll</Name>
        <Description>Specifies whether scene automatically scrolls to the Game.MainObject</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>IsScrolling</Name>
        <Description>Returns &lt;b&gt;true&lt;/b&gt; if the scene is currently scrolling.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>PersistentState</Name>
        <Description>Specifies whether the engine "remembers" the previous state of scene nodes when re-entering the scene</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>ScrollSpeedX</Name>
        <Description>Horizontal scrolling speed (in milliseconds, default=10)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>ScrollSpeedY</Name>
        <Description>Vertical scrolling speed (in milliseconds, default=10)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>ScrollPixelsX</Name>
        <Description>Horizontal scrolling shift (in pixels, default=1)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>ScrollPixelsY</Name>
        <Description>Vertical scrolling shift (in pixels, default=1)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>OffsetX</Name>
        <Description>Current horizontal scrolling offset of the scene</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>OffsetY</Name>
        <Description>Current vertical scrolling offset of the scene</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>GeometryFile</Name>
        <Description>The filename of the geometry file assigned to scene or &lt;b&gt;null&lt;/b&gt; if no geometry is assigned</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>ShowGeometry</Name>
        <Description>Specifies if the hidden scene geometry is displayed (for development purposes only)</Description>
      </Attribute>
    </ScriptObject>
    <ScriptObject>
      <BaseFilename>scripting_ref_actor</BaseFilename>
      <Name>Actor object</Name>
      <Description>The Actor object allows you to access the properties of your actors. Actor objects are created  by loading an actor definition file using the Game.LoadActor or Scene.LoadActor methods.</Description>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Cancels the action the object was currently performing (like talking, walking etc.).</Description>
        <Signature>Reset()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Queries whether the object is currently talking.</Description>
        <Signature>IsTalking()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Cancels object's talking.</Description>
        <Remarks>You can also use StopTalk() abbreviation.</Remarks>
        <Signature>StopTalking()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Makes the object talk.</Description>
        <Remarks>Talk method blocks the script execution until the animation is over, while the TalkAsync method returns immediately. If the duration is set to zero, it's calculated automatically either from the sound file or from the length of the subtitle.</Remarks>
        <Signature>Talk(Text, SoundFilename, Duration, TalkStances, TextAlignment)</Signature>
        <Signature>TalkAsync(Text, SoundFilename, Duration, TalkStances, TextAlignment)</Signature>
        <Parameter Optional="False">
          <Name>Text</Name>
          <Description>A text to be used as a talk subtitle</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>SoundFilename</Name>
          <Description>A filename of a sound file to be used (oprtional, default is no sound)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Duration</Name>
          <Description>A subtitle duration in milliseconds (optional, default is 0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>TalkStances</Name>
          <Description>A comma separated list of talk "stances" to be used for the talking (optional, default is random stances)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>TextAlignment</Name>
          <Description>A text alignment for the subtitle (0-left, 1-right, 2-center) (optional, default=2)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Forces this actor/entity to act like it's inside a given region</Description>
        <Remarks>Use this method to "lock" a z-order value of an actor or an entity.</Remarks>
        <Signature>StickToRegion(Region)</Signature>
        <Signature>StickToRegion(RegionName)</Signature>
        <Parameter Optional="False">
          <Name>Region</Name>
          <Description>Reference to a scene region object</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>RegionName</Name>
          <Description>Name of a scene region</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Sets font of this object.</Description>
        <Signature>SetFont(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The name of the font to be set.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Gets a font assigned to this object.</Description>
        <Signature>GetFont()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Plays an animation.</Description>
        <Remarks>The PlayAnim method blocks the script execution until the animation is over, while the PlayAnimAsync method returns immediately.</Remarks>
        <Signature>PlayAnim(Filename)</Signature>
        <Signature>PlayAnimAsync(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>A filename of a sprite file to be played</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Force a special animation to be used for a subsequent Talk call.</Description>
        <Remarks>This setting has only effect on one subsequent Talk() method call. After the talking is over, the talking animation is reset back to default.</Remarks>
        <Signature>ForceTalkAnim(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>A filename of the sprite file to be used as a talking animation</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Moves an object to a specified location.</Description>
        <Signature>SkipTo(X, Y)</Signature>
        <Parameter Optional="False">
          <Name>X</Name>
          <Description>Destination X coordinate.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Y</Name>
          <Description>Destination Y coordinate.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Makes the actor walk to a given point.</Description>
        <Remarks>The GoTo method blocks the script execution until the walking is over, while the GoToAsync method returns immediately.</Remarks>
        <Signature>GoTo(X, Y)</Signature>
        <Signature>GoToAsync(X, Y)</Signature>
        <Parameter Optional="False">
          <Name>X</Name>
          <Description>The X coordinate of the target walking point</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Y</Name>
          <Description>The Y coordinate of the target walking point</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Makes the actor walk to a specified entity.</Description>
        <Remarks>This method utilizes the WalkToX, WalkToY and WalkToDirection properties of the target entity. They can be set directly in SceneEdit.</Remarks>
        <Signature>GoToObject(Entity)</Signature>
        <Signature>GoToObjectAsync(Entity)</Signature>
        <Parameter Optional="False">
          <Name>Entity</Name>
          <Description>The entity object the actor should walk and turn to</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Makes actor turn to the given direction or to a given object.</Description>
        <Remarks>The TurnTo method blocks the script execution until the turning is over, while the TurnToAsync method returns immediately. The direction can be one of the following constants: DI_UP, DI_UPRIGHT, DI_RIGHT, DI_DOWNRIGHT, DI_DOWN, DI_DOWNLEFT, DI_LEFT or DI_UPLEFT (those equal to numbers 0 to 7).</Remarks>
        <Signature>TurnTo(Direction)</Signature>
        <Signature>TurnTo(Object)</Signature>
        <Signature>TurnToAsync(Direction)</Signature>
        <Signature>TurnToAsync(Object)</Signature>
        <Parameter Optional="False">
          <Name>Direction</Name>
          <Description>The direction to turn to</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Object</Name>
          <Description>The object to turn to</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Queries whether the actor is currently walking.</Description>
        <Signature>IsWalking()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Sets the sprite to be used instead of actor's standing animations.</Description>
        <Remarks>Use &lt;b&gt;null&lt;/b&gt; as a parameter to reset the default behaviour.</Remarks>
        <Signature>SetSprite(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the sprite file to be used.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Queries a sprite set by SetSprite().</Description>
        <Signature>GetSprite()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Queries a sprite set by SetSprite().</Description>
        <Signature>GetSpriteObject()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Item functions</Group>
        <Description>Adds an item into the inventory.</Description>
        <Signature>TakeItem(ItemName, InsertAfter)</Signature>
        <Parameter Optional="False">
          <Name>ItemName</Name>
          <Description>A name of the item to be added to object's inventory.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>InsertAfter</Name>
          <Description>A name of the item which the new item should be inserted after (optional).</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Item functions</Group>
        <Description>Removes an item from the inventory.</Description>
        <Signature>DropItem(ItemName)</Signature>
        <Parameter Optional="False">
          <Name>ItemName</Name>
          <Description>A name of the item to be removed from object's inventory.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Item functions</Group>
        <Description>Queries an inventory item.</Description>
        <Signature>GetItem(ItemIndex)</Signature>
        <Signature>GetItem(ItemName)</Signature>
        <Parameter Optional="False">
          <Name>ItemIndex</Name>
          <Description>An index of a &lt;b&gt;taken item&lt;/b&gt; to be queried.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ItemName</Name>
          <Description>A name of an inventory item to be queried.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Item functions</Group>
        <Description>Queries whether a given item is in inventory of any of this object.</Description>
        <Remarks>Note that this method only searches the current object, use the &lt;b&gt;Game.IsItemTaken()&lt;/b&gt; method if you want to search all game objects.</Remarks>
        <Signature>HasItem(ItemName)</Signature>
        <Signature>HasItem(ItemObject)</Signature>
        <Parameter Optional="False">
          <Name>ItemName</Name>
          <Description>A name of the item to be queried.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ItemObject</Name>
          <Description>Reference to the item object to be queried.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Sets the standard cursor.</Description>
        <Signature>SetCursor(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>Filename of a sprite file to be used as a cursor pointer.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Returns the filename of the cursor sprite (or null if no cursor is set)</Description>
        <Signature>GetCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Returns a reference to the cursor sprite (or null if no cursor is set)</Description>
        <Signature>GetCursorObject()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Removes the standard cursor.</Description>
        <Signature>RemoveCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Queries whether the standard cursor is set.</Description>
        <Signature>HasCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Executes a script file and attaches it to the object.</Description>
        <Remarks>Each WME object can have multiple scripts attached.</Remarks>
        <Signature>AttachScript(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the script file to be executed.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Terminates a specified script file and detaches it from an object.</Description>
        <Signature>DetachScript(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the (running) script to be terminated and detached.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Queries whether a specified script file is running and attached to an object.</Description>
        <Signature>IsScriptRunning(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the script to be queried.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Queries whether the object supports a method of a specified name.</Description>
        <Signature>CanHandleMethod(MethodName)</Signature>
        <Parameter Optional="False">
          <Name>MethodName</Name>
          <Description>The name of the method to be checked.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Plays a sound. If the filename is omitted, the currently assigned sound is played (if any).</Description>
        <Signature>PlaySound(Filename, Looping, LoopStart)</Signature>
        <Signature>PlaySound(Looping, LoopStart)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the sound file to be played</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Looping</Name>
          <Description>Whether the sound should be looped (optional, default = false).</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>LoopStart</Name>
          <Description>The point from which the sound restarts when looping, in milliseconds (optional, default=0).</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Plays a sound and triggers an event when the sound is over. If the filename is omitted, the currently assigned sound is played (if any).</Description>
        <Signature>PlaySoundEvent(Filename, EventName)</Signature>
        <Signature>PlaySoundEvent(EventName)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the sound file to be played</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>EventName</Name>
          <Description>The name of the event to be triggered after the sound finishes.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Stops the currently playing sound (if any).</Description>
        <Signature>StopSound()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Pauses the currently playing sound.</Description>
        <Signature>PauseSound()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Resumes a paused sound playback.</Description>
        <Signature>ResumeSound()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Queries whether a sound playback is in progress.</Description>
        <Signature>IsSoundPlaying()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Sets the sound's current playing position.</Description>
        <Signature>SetSoundPosition(Time)</Signature>
        <Parameter Optional="False">
          <Name>Time</Name>
          <Description>A new playing position (in milliseconds)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Queries the sound's current playing position</Description>
        <Signature>GetSoundPosition()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Sets a volume of the currently playing sound.</Description>
        <Signature>SetSoundVolume(Volume)</Signature>
        <Parameter Optional="False">
          <Name>Volume</Name>
          <Description>A new sound volume (in percent).</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Gets a volume of the currently playing sound.</Description>
        <Signature>GetSoundVolume()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Initializes a sound from file and makes it ready to be played.</Description>
        <Remarks>Use this method to pre-cache a sound file. Initializing the sound takes some time and sometimes it's desirable to move all sound initialization to e.g. scene start so that the subsequent PlaySound calls don't slow the game down. That's what LoadSound is for. To play the pre-cached sound simply call PlaySound without specifying a filename, for example SomeObject.PlaySound(false);</Remarks>
        <Signature>LoadSound(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The sound file to be loaded</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound effects functions</Group>
        <Description>Removes any sound effect currently assigned to this object.</Description>
        <Signature>SoundFXNone()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound effects functions</Group>
        <Description>Assigns an echo effect to the sounds played by this object.</Description>
        <Remarks>Example: &lt;b&gt;actor.SoundFXEcho(50, 50);&lt;/b&gt;</Remarks>
        <Signature>SoundFXEcho(WetDryMix, Feedback, LeftDelay, RightDelay)</Signature>
        <Parameter Optional="False">
          <Name>WetDryMix</Name>
          <Description>Wet/Dry Mix, in percent (0 to 100)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Feedback</Name>
          <Description>Feedback, in percent (0 to 100)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>LeftDelay</Name>
          <Description>Left delay, in milliseconds (1 to 2000)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>RightDelay</Name>
          <Description>Right delay, in milliseconds (1 to 2000)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound effects functions</Group>
        <Description>Assigns a reverb effect to the sounds played by this object.</Description>
        <Remarks>Example: &lt;b&gt;actor.SoundFXReverb(0, 0, 2000);&lt;/b&gt;</Remarks>
        <Signature>SoundFXReverb(InGain, ReverbMix, ReverbTime, HighFreqRTRatio)</Signature>
        <Parameter Optional="False">
          <Name>InGain</Name>
          <Description>In gain, in dB (-96 to 0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ReverbMix</Name>
          <Description>Reverb mix, in dB (-96 to 0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ReverbTime</Name>
          <Description>Reverb time, in milliseconds (0.001 to 3000)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>HighFreqRTRatio</Name>
          <Description>HighFreq RT Ratio (0.001 to 0.999)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Event functions</Group>
        <Description>Applies a named event to the object.</Description>
        <Signature>ApplyEvent(EventName)</Signature>
        <Parameter Optional="False">
          <Name>EventName</Name>
          <Description>A name of the event to be applied to the object.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Event functions</Group>
        <Description>Queries whether the object has an event handler for a specified event.</Description>
        <Signature>CanHandleEvent(EventName)</Signature>
        <Parameter Optional="False">
          <Name>EventName</Name>
          <Description>The name of the event to be checked.</Description>
        </Parameter>
      </Method>
      <Attribute Global="False" ReadOnly="True">
        <Name>Type</Name>
        <Description>Returns always "actor"</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Direction</Name>
        <Description>The direction the actor is currently facing</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Active</Name>
        <Description>Specifies whether the object is visible on screen</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>IgnoreItems</Name>
        <Description>Specifies whether the object appears to be non-interactive when an inventory item is used on it</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SubtitlesPosRelative</Name>
        <Description>Specifies whether the &lt;b&gt;SubtitlesPosX&lt;/b&gt; and &lt;b&gt;SubtitlesPosY&lt;/b&gt; attributes are relative to default position, or absolute screen coordinates</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SubtitlesPosX</Name>
        <Description>The X position of speech subtitles (either relative to speaker's position or absolute screen coordinates)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SubtitlesPosY</Name>
        <Description>The Y position of speech subtitles (either relative to speaker's position or absolute screen coordinates)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SubtitlesWidth</Name>
        <Description>Width of speech subtitles. Set to zero to restore the default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SubtitlesPosXCenter</Name>
        <Description>Specifies if the &lt;b&gt;SubtitlesPosX&lt;/b&gt; attribute affects the center of the subtitle or its left side.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Name</Name>
        <Description>The internal name of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Caption</Name>
        <Description>The caption of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>X</Name>
        <Description>The X position of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Y</Name>
        <Description>The Y position of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Height</Name>
        <Description>Returns the current height of the object. In case of actors and entities the scaling is taken into account.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Filename</Name>
        <Description>Returns the filename.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Ready</Name>
        <Description>Returns whether the object isn't currently performing any action.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Interactive</Name>
        <Description>Specifies whether the object recieves user input.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SoundPanning</Name>
        <Description>Specifies whether the sounds played by this object are automatically panned depending on object's position on screen.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>NonIntMouseEvents</Name>
        <Description>Specifies if the object can receive the &lt;b&gt;MouseEntry&lt;/b&gt; and &lt;b&gt;MouseLeave&lt;/b&gt; events even if the game is in non-interactive mode.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Movable</Name>
        <Description>Specifies whether the object can be moved by its sprites (in case the sprite frames have a "move" property set).</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Scalable</Name>
        <Description>Specifies whether the object is affected by scene's scaling levels.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Rotatable</Name>
        <Description>Specifies whether the object is affected by scene's rotation levels.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Colorable</Name>
        <Description>Specifies whether the object is affected by scene's color regions.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>AlphaColor</Name>
        <Description>Specifies an RGBA color of this object (overrides scene coloring); set to 0 to reset default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Scale</Name>
        <Description>Specifies a scale of this object (overrides scene scaling); set to null to reset default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>ScaleX</Name>
        <Description>Specifies horizontal scale of this object; set to null to reset default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>ScaleY</Name>
        <Description>Specifies vertical scale of this object; set to null to reset default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>RelativeScale</Name>
        <Description>Specifies a scale amount to be added to the default scene scale.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Rotate</Name>
        <Description>Specifies rotation of this object (in degrees); overrides scene rotation; set to null to reset default behavior; not available in compatibility mode</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>RelativeRotate</Name>
        <Description>Specifies a rotation amount to be added to the default scene rotation.</Description>
      </Attribute>
      <Event>
        <Name>MouseEntry</Name>
        <Description>The mouse pointer has been just moved over the object.</Description>
      </Event>
      <Event>
        <Name>MouseLeave</Name>
        <Description>The mouse pointer has been just moved away from the object.</Description>
      </Event>
    </ScriptObject>
    <ScriptObject>
      <BaseFilename>scripting_ref_entity</BaseFilename>
      <Name>Entity object</Name>
      <Description>The Entity object allows you to access the properties of your entities. Entity objects are created  by loading an entity definition file using the &lt;b&gt;Game.LoadEntity&lt;/b&gt; or &lt;b&gt;Scene.LoadEntity&lt;/b&gt; methods. Entities which are part of the scene layout can be queried by using the &lt;b&gt;Scene.GetNode&lt;/b&gt; method.</Description>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Sets entity's default sprite.</Description>
        <Signature>SetSprite(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the sprite file to be used as a default sprite.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Sets entity's talk sprite.</Description>
        <Signature>SetTalkSprite(Filename, Extended)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the sprite file to be used as a talk sprite.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Extended</Name>
          <Description>Should this sprite be used for explicit talk stances only (optional, default=false).</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Adds entity's talk sprite.</Description>
        <Signature>AddTalkSprite(Filename, Extended)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the sprite file to be added to the list of talk sprites.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Extended</Name>
          <Description>Should this sprite be used for explicit talk stances only (optional, default=false).</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Removes a sprite from the list of talk sprites.</Description>
        <Signature>RemoveTalkSprite(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the sprite file to be removed.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Queries a default sprite of this entity.</Description>
        <Signature>GetSprite()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Queries a default sprite of this entity.</Description>
        <Signature>GetSpriteObject()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Video playback</Group>
        <Description>Plays a video in Theora format</Description>
        <Signature>PlayTheora(Filename, Looping, AlphaImage)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The Ogg Theora file to be played</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Looping</Name>
          <Description>Specifies whether the video should loop (optional, default=false)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>AlphaImage</Name>
          <Description>Specifies the image to be used for an alpha channel underlying the video playback (optional)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Video playback</Group>
        <Description>Stops the Theora video playback</Description>
        <Signature>StopTheora()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Video playback</Group>
        <Description>Queries whether the entity is currently playing a Theora video</Description>
        <Signature>IsTheoraPlaying()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Video playback</Group>
        <Description>Pauses the Theora video playback</Description>
        <Signature>PauseTheora()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Video playback</Group>
        <Description>Resumes a paused Theora video playback</Description>
        <Signature>ResumeTheora()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Video playback</Group>
        <Description>Queries whether the entity is currently playing a Theora video and the playback is paused</Description>
        <Signature>IsTheoraPaused()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Item functions</Group>
        <Description>Adds an item into the inventory.</Description>
        <Signature>TakeItem(ItemName, InsertAfter)</Signature>
        <Parameter Optional="False">
          <Name>ItemName</Name>
          <Description>A name of the item to be added to object's inventory.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>InsertAfter</Name>
          <Description>A name of the item which the new item should be inserted after (optional).</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Item functions</Group>
        <Description>Removes an item from the inventory.</Description>
        <Signature>DropItem(ItemName)</Signature>
        <Parameter Optional="False">
          <Name>ItemName</Name>
          <Description>A name of the item to be removed from object's inventory.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Item functions</Group>
        <Description>Queries an inventory item.</Description>
        <Signature>GetItem(ItemIndex)</Signature>
        <Signature>GetItem(ItemName)</Signature>
        <Parameter Optional="False">
          <Name>ItemIndex</Name>
          <Description>An index of a &lt;b&gt;taken item&lt;/b&gt; to be queried.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ItemName</Name>
          <Description>A name of an inventory item to be queried.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Item functions</Group>
        <Description>Queries whether a given item is in inventory of any of this object.</Description>
        <Remarks>Note that this method only searches the current object, use the &lt;b&gt;Game.IsItemTaken()&lt;/b&gt; method if you want to search all game objects.</Remarks>
        <Signature>HasItem(ItemName)</Signature>
        <Signature>HasItem(ItemObject)</Signature>
        <Parameter Optional="False">
          <Name>ItemName</Name>
          <Description>A name of the item to be queried.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ItemObject</Name>
          <Description>Reference to the item object to be queried.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Cancels the action the object was currently performing (like talking, walking etc.).</Description>
        <Signature>Reset()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Queries whether the object is currently talking.</Description>
        <Signature>IsTalking()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Cancels object's talking.</Description>
        <Remarks>You can also use StopTalk() abbreviation.</Remarks>
        <Signature>StopTalking()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Makes the object talk.</Description>
        <Remarks>Talk method blocks the script execution until the animation is over, while the TalkAsync method returns immediately. If the duration is set to zero, it's calculated automatically either from the sound file or from the length of the subtitle.</Remarks>
        <Signature>Talk(Text, SoundFilename, Duration, TalkStances, TextAlignment)</Signature>
        <Signature>TalkAsync(Text, SoundFilename, Duration, TalkStances, TextAlignment)</Signature>
        <Parameter Optional="False">
          <Name>Text</Name>
          <Description>A text to be used as a talk subtitle</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>SoundFilename</Name>
          <Description>A filename of a sound file to be used (oprtional, default is no sound)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Duration</Name>
          <Description>A subtitle duration in milliseconds (optional, default is 0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>TalkStances</Name>
          <Description>A comma separated list of talk "stances" to be used for the talking (optional, default is random stances)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>TextAlignment</Name>
          <Description>A text alignment for the subtitle (0-left, 1-right, 2-center) (optional, default=2)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Forces this actor/entity to act like it's inside a given region</Description>
        <Remarks>Use this method to "lock" a z-order value of an actor or an entity.</Remarks>
        <Signature>StickToRegion(Region)</Signature>
        <Signature>StickToRegion(RegionName)</Signature>
        <Parameter Optional="False">
          <Name>Region</Name>
          <Description>Reference to a scene region object</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>RegionName</Name>
          <Description>Name of a scene region</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Sets font of this object.</Description>
        <Signature>SetFont(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The name of the font to be set.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Gets a font assigned to this object.</Description>
        <Signature>GetFont()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Plays an animation.</Description>
        <Remarks>The PlayAnim method blocks the script execution until the animation is over, while the PlayAnimAsync method returns immediately.</Remarks>
        <Signature>PlayAnim(Filename)</Signature>
        <Signature>PlayAnimAsync(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>A filename of a sprite file to be played</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Force a special animation to be used for a subsequent Talk call.</Description>
        <Remarks>This setting has only effect on one subsequent Talk() method call. After the talking is over, the talking animation is reset back to default.</Remarks>
        <Signature>ForceTalkAnim(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>A filename of the sprite file to be used as a talking animation</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Moves an object to a specified location.</Description>
        <Signature>SkipTo(X, Y)</Signature>
        <Parameter Optional="False">
          <Name>X</Name>
          <Description>Destination X coordinate.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Y</Name>
          <Description>Destination Y coordinate.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Sets the standard cursor.</Description>
        <Signature>SetCursor(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>Filename of a sprite file to be used as a cursor pointer.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Returns the filename of the cursor sprite (or null if no cursor is set)</Description>
        <Signature>GetCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Returns a reference to the cursor sprite (or null if no cursor is set)</Description>
        <Signature>GetCursorObject()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Removes the standard cursor.</Description>
        <Signature>RemoveCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Queries whether the standard cursor is set.</Description>
        <Signature>HasCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Executes a script file and attaches it to the object.</Description>
        <Remarks>Each WME object can have multiple scripts attached.</Remarks>
        <Signature>AttachScript(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the script file to be executed.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Terminates a specified script file and detaches it from an object.</Description>
        <Signature>DetachScript(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the (running) script to be terminated and detached.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Queries whether a specified script file is running and attached to an object.</Description>
        <Signature>IsScriptRunning(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the script to be queried.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Queries whether the object supports a method of a specified name.</Description>
        <Signature>CanHandleMethod(MethodName)</Signature>
        <Parameter Optional="False">
          <Name>MethodName</Name>
          <Description>The name of the method to be checked.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Plays a sound. If the filename is omitted, the currently assigned sound is played (if any).</Description>
        <Signature>PlaySound(Filename, Looping, LoopStart)</Signature>
        <Signature>PlaySound(Looping, LoopStart)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the sound file to be played</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Looping</Name>
          <Description>Whether the sound should be looped (optional, default = false).</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>LoopStart</Name>
          <Description>The point from which the sound restarts when looping, in milliseconds (optional, default=0).</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Plays a sound and triggers an event when the sound is over. If the filename is omitted, the currently assigned sound is played (if any).</Description>
        <Signature>PlaySoundEvent(Filename, EventName)</Signature>
        <Signature>PlaySoundEvent(EventName)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the sound file to be played</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>EventName</Name>
          <Description>The name of the event to be triggered after the sound finishes.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Stops the currently playing sound (if any).</Description>
        <Signature>StopSound()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Pauses the currently playing sound.</Description>
        <Signature>PauseSound()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Resumes a paused sound playback.</Description>
        <Signature>ResumeSound()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Queries whether a sound playback is in progress.</Description>
        <Signature>IsSoundPlaying()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Sets the sound's current playing position.</Description>
        <Signature>SetSoundPosition(Time)</Signature>
        <Parameter Optional="False">
          <Name>Time</Name>
          <Description>A new playing position (in milliseconds)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Queries the sound's current playing position</Description>
        <Signature>GetSoundPosition()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Sets a volume of the currently playing sound.</Description>
        <Signature>SetSoundVolume(Volume)</Signature>
        <Parameter Optional="False">
          <Name>Volume</Name>
          <Description>A new sound volume (in percent).</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Gets a volume of the currently playing sound.</Description>
        <Signature>GetSoundVolume()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Initializes a sound from file and makes it ready to be played.</Description>
        <Remarks>Use this method to pre-cache a sound file. Initializing the sound takes some time and sometimes it's desirable to move all sound initialization to e.g. scene start so that the subsequent PlaySound calls don't slow the game down. That's what LoadSound is for. To play the pre-cached sound simply call PlaySound without specifying a filename, for example SomeObject.PlaySound(false);</Remarks>
        <Signature>LoadSound(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The sound file to be loaded</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound effects functions</Group>
        <Description>Removes any sound effect currently assigned to this object.</Description>
        <Signature>SoundFXNone()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound effects functions</Group>
        <Description>Assigns an echo effect to the sounds played by this object.</Description>
        <Remarks>Example: &lt;b&gt;actor.SoundFXEcho(50, 50);&lt;/b&gt;</Remarks>
        <Signature>SoundFXEcho(WetDryMix, Feedback, LeftDelay, RightDelay)</Signature>
        <Parameter Optional="False">
          <Name>WetDryMix</Name>
          <Description>Wet/Dry Mix, in percent (0 to 100)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Feedback</Name>
          <Description>Feedback, in percent (0 to 100)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>LeftDelay</Name>
          <Description>Left delay, in milliseconds (1 to 2000)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>RightDelay</Name>
          <Description>Right delay, in milliseconds (1 to 2000)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound effects functions</Group>
        <Description>Assigns a reverb effect to the sounds played by this object.</Description>
        <Remarks>Example: &lt;b&gt;actor.SoundFXReverb(0, 0, 2000);&lt;/b&gt;</Remarks>
        <Signature>SoundFXReverb(InGain, ReverbMix, ReverbTime, HighFreqRTRatio)</Signature>
        <Parameter Optional="False">
          <Name>InGain</Name>
          <Description>In gain, in dB (-96 to 0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ReverbMix</Name>
          <Description>Reverb mix, in dB (-96 to 0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ReverbTime</Name>
          <Description>Reverb time, in milliseconds (0.001 to 3000)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>HighFreqRTRatio</Name>
          <Description>HighFreq RT Ratio (0.001 to 0.999)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Event functions</Group>
        <Description>Applies a named event to the object.</Description>
        <Signature>ApplyEvent(EventName)</Signature>
        <Parameter Optional="False">
          <Name>EventName</Name>
          <Description>A name of the event to be applied to the object.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Event functions</Group>
        <Description>Queries whether the object has an event handler for a specified event.</Description>
        <Signature>CanHandleEvent(EventName)</Signature>
        <Parameter Optional="False">
          <Name>EventName</Name>
          <Description>The name of the event to be checked.</Description>
        </Parameter>
      </Method>
      <Attribute Global="False" ReadOnly="True">
        <Name>Type</Name>
        <Description>Returns always "entity"</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Subtype</Name>
        <Description>Returns either "normal" or "sound" depending on entity type</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Item</Name>
        <Description>Specifies a name of an inventory item which controls the activity of this entity</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SaveState</Name>
        <Description>Specifies if the scene entity remembers its state after the player leaves the scene</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>WalkToX</Name>
        <Description>The default postition the actor should walk to using the GoToObject method (X) </Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>WalkToY</Name>
        <Description>The default postition the actor should walk to using the GoToObject method (Y)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>WalkToDirection</Name>
        <Description>The default direction the actor turn to after walking to this entity  using the GoToObject method.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Active</Name>
        <Description>Specifies whether the object is visible on screen</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>IgnoreItems</Name>
        <Description>Specifies whether the object appears to be non-interactive when an inventory item is used on it</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SubtitlesPosRelative</Name>
        <Description>Specifies whether the &lt;b&gt;SubtitlesPosX&lt;/b&gt; and &lt;b&gt;SubtitlesPosY&lt;/b&gt; attributes are relative to default position, or absolute screen coordinates</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SubtitlesPosX</Name>
        <Description>The X position of speech subtitles (either relative to speaker's position or absolute screen coordinates)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SubtitlesPosY</Name>
        <Description>The Y position of speech subtitles (either relative to speaker's position or absolute screen coordinates)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SubtitlesWidth</Name>
        <Description>Width of speech subtitles. Set to zero to restore the default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SubtitlesPosXCenter</Name>
        <Description>Specifies if the &lt;b&gt;SubtitlesPosX&lt;/b&gt; attribute affects the center of the subtitle or its left side.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Name</Name>
        <Description>The internal name of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Caption</Name>
        <Description>The caption of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>X</Name>
        <Description>The X position of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Y</Name>
        <Description>The Y position of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Height</Name>
        <Description>Returns the current height of the object. In case of actors and entities the scaling is taken into account.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Filename</Name>
        <Description>Returns the filename.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Ready</Name>
        <Description>Returns whether the object isn't currently performing any action.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Interactive</Name>
        <Description>Specifies whether the object recieves user input.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SoundPanning</Name>
        <Description>Specifies whether the sounds played by this object are automatically panned depending on object's position on screen.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>NonIntMouseEvents</Name>
        <Description>Specifies if the object can receive the &lt;b&gt;MouseEntry&lt;/b&gt; and &lt;b&gt;MouseLeave&lt;/b&gt; events even if the game is in non-interactive mode.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Movable</Name>
        <Description>Specifies whether the object can be moved by its sprites (in case the sprite frames have a "move" property set).</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Scalable</Name>
        <Description>Specifies whether the object is affected by scene's scaling levels.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Rotatable</Name>
        <Description>Specifies whether the object is affected by scene's rotation levels.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Colorable</Name>
        <Description>Specifies whether the object is affected by scene's color regions.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>AlphaColor</Name>
        <Description>Specifies an RGBA color of this object (overrides scene coloring); set to 0 to reset default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Scale</Name>
        <Description>Specifies a scale of this object (overrides scene scaling); set to null to reset default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>ScaleX</Name>
        <Description>Specifies horizontal scale of this object; set to null to reset default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>ScaleY</Name>
        <Description>Specifies vertical scale of this object; set to null to reset default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>RelativeScale</Name>
        <Description>Specifies a scale amount to be added to the default scene scale.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Rotate</Name>
        <Description>Specifies rotation of this object (in degrees); overrides scene rotation; set to null to reset default behavior; not available in compatibility mode</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>RelativeRotate</Name>
        <Description>Specifies a rotation amount to be added to the default scene rotation.</Description>
      </Attribute>
      <Event>
        <Name>MouseEntry</Name>
        <Description>The mouse pointer has been just moved over the object.</Description>
      </Event>
      <Event>
        <Name>MouseLeave</Name>
        <Description>The mouse pointer has been just moved away from the object.</Description>
      </Event>
    </ScriptObject>
    <ScriptObject>
      <BaseFilename>scripting_ref_layer</BaseFilename>
      <Name>Layer object</Name>
      <Description>The Layer object allows you to access the properties of your scene's layers. Layers can be queried by using the &lt;b&gt;Scene.GetLayer&lt;/b&gt; method.</Description>
      <Method Global="False" Constructor="False">
        <Group>Layer actions</Group>
        <Description>Queries a given node (region/entity) of the layer.</Description>
        <Signature>GetNode(NodeIndex)</Signature>
        <Signature>GetNode(NodeName)</Signature>
        <Parameter Optional="False">
          <Name>NodeIndex</Name>
          <Description>An index of the requested scene node</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>NodeName</Name>
          <Description>A name of the requested scene node</Description>
        </Parameter>
      </Method>
      <Attribute Global="False" ReadOnly="True">
        <Name>Type</Name>
        <Description>Returns always "layer" </Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Name</Name>
        <Description>The internal name of the layer</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Active</Name>
        <Description>Specifies whether the layer is visible on screen</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>NumNodes</Name>
        <Description>Returns the number of nodes of the layer</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Width</Name>
        <Description>Returns the width of the layer</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Height</Name>
        <Description>Returns the height of the layer</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Main</Name>
        <Description>Returns &lt;b&gt;true&lt;/b&gt; if this is the scene's main layer</Description>
      </Attribute>
    </ScriptObject>
    <ScriptObject>
      <BaseFilename>scripting_ref_region</BaseFilename>
      <Name>Region object</Name>
      <Description>The Region object allows you to access the properties of your scene's regions. Regions can be queried by using the &lt;b&gt;Scene.GetNode&lt;/b&gt; method.</Description>
      <Attribute Global="False" ReadOnly="True">
        <Name>Type</Name>
        <Description>Returns always "region"</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Name</Name>
        <Description>The internal name of the region</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Active</Name>
        <Description>Specifies whether the region is active</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Blocked</Name>
        <Description>Specifies whether this region is blocked</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Decoration</Name>
        <Description>Specifies whether this is the "decoration" region</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Scale</Name>
        <Description>The scale factor of this region</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>AlphaColor</Name>
        <Description>The alpha color of this region</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SaveState</Name>
        <Description>Specifies if the region remembers its state after the player leaves the scene</Description>
      </Attribute>
      <Event>
        <Name>ActorEntry</Name>
        <Description>Some of the actors just entered this region.</Description>
      </Event>
      <Event>
        <Name>ActorLeave</Name>
        <Description>Some of the actors just left this region.</Description>
      </Event>
    </ScriptObject>
    <ScriptObject>
      <BaseFilename>scripting_ref_waypoint</BaseFilename>
      <Name>Waypoint group object</Name>
      <Description>The Waypoint group object allows you to access the properties of your scene's waypoint groups. Waypoint groups can be queried by using the &lt;b&gt;Scene.GetNode&lt;/b&gt; or &lt;b&gt;Scene.GetWaypointGroup&lt;/b&gt; methods.</Description>
      <Attribute Global="False" ReadOnly="True">
        <Name>Type</Name>
        <Description>Returns always "waypoint-group" </Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Name</Name>
        <Description>The internal name of the waypoint group</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Active</Name>
        <Description>Specifies whether the waypoint group is active</Description>
      </Attribute>
    </ScriptObject>
    <ScriptObject>
      <BaseFilename>scripting_ref_window</BaseFilename>
      <Name>Window object</Name>
      <Description>The Window object allows you to access the properties of your game's windows. Window objects are created  by loading a window definition file using the Game.LoadWindow metod. A special case is the window used for the inventory. It can be queried using the Game.GetInventoryWindow method.</Description>
      <Method Global="False" Constructor="False">
        <Description>Sets a normal font.</Description>
        <Signature>SetFont(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>A filename of a font file to be used.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Sets a background image (sprite).</Description>
        <Signature>SetImage(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>A filename of a sprite file to be used.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns the filename of the background sprite (or null if no sprite is set)</Description>
        <Signature>GetImage()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns a reference to the background sprite (or null if no sprite is set)</Description>
        <Signature>GetImageObject()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Focuses the control.</Description>
        <Signature>Focus()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Moves the control in z-order after a given control.</Description>
        <Signature>MoveAfter(Control)</Signature>
        <Signature>MoveAfter(ControlName)</Signature>
        <Parameter Optional="False">
          <Name>Control</Name>
          <Description>A control object we will move our control after</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ControlName</Name>
          <Description>A name of a control object we will move our control after</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Moves the control in z-order before a given control.</Description>
        <Signature>MoveBefore(Control)</Signature>
        <Signature>MoveBefore(ControlName)</Signature>
        <Parameter Optional="False">
          <Name>Control</Name>
          <Description>A control object we will move our control before</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ControlName</Name>
          <Description>A name of a control object we will move our control before</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Moves the control to the top of the z-order.</Description>
        <Signature>MoveToTop()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Moves the control to the bottom of the z-order.</Description>
        <Signature>MoveToBottom()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Moves an object to a specified location.</Description>
        <Signature>SkipTo(X, Y)</Signature>
        <Parameter Optional="False">
          <Name>X</Name>
          <Description>Destination X coordinate.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Y</Name>
          <Description>Destination Y coordinate.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Get a reference to a given object contained in this window</Description>
        <Remarks>This method has been previously called "GetWidget" and this name is still valid for backwards compatibility.</Remarks>
        <Signature>GetControl(ControlIndex)</Signature>
        <Signature>GetControl(ControlName)</Signature>
        <Parameter Optional="False">
          <Name>ControlIndex</Name>
          <Description>A nuber specifying an index of a control to be returned</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ControlName</Name>
          <Description>Name of a control to be returned</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Sets a font to be used when the window is inactive.</Description>
        <Signature>SetInactiveFont(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>A filename of a font file to be used.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Sets a background image (sprite) to be used when this window is inactive.</Description>
        <Signature>SetInactiveImage(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>A filename of a sprite file to be used.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Returns the filename of the inactive background sprite (or null if no sprite is set)</Description>
        <Signature>GetInactiveImage()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Returns a reference to the inactive background sprite (or null if no sprite is set)</Description>
        <Signature>GetInactiveImageObject()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Closes the window.</Description>
        <Remarks>Note that this method only removes window from screen but it stays loaded in memory. If you no longer need the window, you should unload it using the Game.UnloadObject method.</Remarks>
        <Signature>Close()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Makes the window an exclusive object on screen.</Description>
        <Remarks>The user cannot interact with any other object while the window is in exclusive state. Use the Window.Close() method to cancel the exclusive state.</Remarks>
        <Signature>GoExclusive()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Pauses the game and makes the window an exclusive object on screen.</Description>
        <Remarks>This method is intended for system windows, such as save/load dialogs, because the entire game is frozen while the window is in system exclusive state. Use the Window.Close() method to cancel the exclusive state.</Remarks>
        <Signature>GoSystemExclusive()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Centers the window on screen.</Description>
        <Signature>Center()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Loads the window definition from a specified file.</Description>
        <Signature>LoadFromFile(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>A filename of a window file to be loaded.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Dynamically creates a new button control</Description>
        <Remarks>Use the &lt;b&gt;DeleteButton&lt;/b&gt; method to remove the button.</Remarks>
        <Signature>CreateButton(Name)</Signature>
        <Parameter Optional="False">
          <Name>Name</Name>
          <Description>The name of the button (optional)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Dynamically creates a new static control</Description>
        <Remarks>Use the &lt;b&gt;DeleteStatic&lt;/b&gt; method to remove the control.</Remarks>
        <Signature>CreateStatic(Name)</Signature>
        <Parameter Optional="False">
          <Name>Name</Name>
          <Description>The name of the control (optional)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Dynamically creates a new editor control</Description>
        <Remarks>Use the &lt;b&gt;DeleteEditor&lt;/b&gt; method to remove the editor.</Remarks>
        <Signature>CreateEditor(Name)</Signature>
        <Parameter Optional="False">
          <Name>Name</Name>
          <Description>The name of the editor (optional)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Dynamically creates a new sub-window control</Description>
        <Remarks>Use the &lt;b&gt;DeleteWindow&lt;/b&gt; method to remove the window.</Remarks>
        <Signature>CreateWindow(Name)</Signature>
        <Parameter Optional="False">
          <Name>Name</Name>
          <Description>The name of the window (optional)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Deletes a button object</Description>
        <Signature>DeleteButton(Button)</Signature>
        <Parameter Optional="False">
          <Name>Button</Name>
          <Description>The button to be deleted</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Deletes a static control object</Description>
        <Signature>DeleteStatic(Static)</Signature>
        <Parameter Optional="False">
          <Name>Static</Name>
          <Description>The static control to be deleted</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Deletes an editor object</Description>
        <Signature>DeleteEditor(Editor)</Signature>
        <Parameter Optional="False">
          <Name>Editor</Name>
          <Description>The editor control to be deleted</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Deletes a window object</Description>
        <Signature>DeleteWindow(Window)</Signature>
        <Parameter Optional="False">
          <Name>Window</Name>
          <Description>The window control to be deleted</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Sets the standard cursor.</Description>
        <Signature>SetCursor(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>Filename of a sprite file to be used as a cursor pointer.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Returns the filename of the cursor sprite (or null if no cursor is set)</Description>
        <Signature>GetCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Returns a reference to the cursor sprite (or null if no cursor is set)</Description>
        <Signature>GetCursorObject()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Removes the standard cursor.</Description>
        <Signature>RemoveCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Queries whether the standard cursor is set.</Description>
        <Signature>HasCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Executes a script file and attaches it to the object.</Description>
        <Remarks>Each WME object can have multiple scripts attached.</Remarks>
        <Signature>AttachScript(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the script file to be executed.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Terminates a specified script file and detaches it from an object.</Description>
        <Signature>DetachScript(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the (running) script to be terminated and detached.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Queries whether a specified script file is running and attached to an object.</Description>
        <Signature>IsScriptRunning(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the script to be queried.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Queries whether the object supports a method of a specified name.</Description>
        <Signature>CanHandleMethod(MethodName)</Signature>
        <Parameter Optional="False">
          <Name>MethodName</Name>
          <Description>The name of the method to be checked.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Plays a sound. If the filename is omitted, the currently assigned sound is played (if any).</Description>
        <Signature>PlaySound(Filename, Looping, LoopStart)</Signature>
        <Signature>PlaySound(Looping, LoopStart)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the sound file to be played</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Looping</Name>
          <Description>Whether the sound should be looped (optional, default = false).</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>LoopStart</Name>
          <Description>The point from which the sound restarts when looping, in milliseconds (optional, default=0).</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Plays a sound and triggers an event when the sound is over. If the filename is omitted, the currently assigned sound is played (if any).</Description>
        <Signature>PlaySoundEvent(Filename, EventName)</Signature>
        <Signature>PlaySoundEvent(EventName)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the sound file to be played</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>EventName</Name>
          <Description>The name of the event to be triggered after the sound finishes.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Stops the currently playing sound (if any).</Description>
        <Signature>StopSound()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Pauses the currently playing sound.</Description>
        <Signature>PauseSound()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Resumes a paused sound playback.</Description>
        <Signature>ResumeSound()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Queries whether a sound playback is in progress.</Description>
        <Signature>IsSoundPlaying()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Sets the sound's current playing position.</Description>
        <Signature>SetSoundPosition(Time)</Signature>
        <Parameter Optional="False">
          <Name>Time</Name>
          <Description>A new playing position (in milliseconds)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Queries the sound's current playing position</Description>
        <Signature>GetSoundPosition()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Sets a volume of the currently playing sound.</Description>
        <Signature>SetSoundVolume(Volume)</Signature>
        <Parameter Optional="False">
          <Name>Volume</Name>
          <Description>A new sound volume (in percent).</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Gets a volume of the currently playing sound.</Description>
        <Signature>GetSoundVolume()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Initializes a sound from file and makes it ready to be played.</Description>
        <Remarks>Use this method to pre-cache a sound file. Initializing the sound takes some time and sometimes it's desirable to move all sound initialization to e.g. scene start so that the subsequent PlaySound calls don't slow the game down. That's what LoadSound is for. To play the pre-cached sound simply call PlaySound without specifying a filename, for example SomeObject.PlaySound(false);</Remarks>
        <Signature>LoadSound(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The sound file to be loaded</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound effects functions</Group>
        <Description>Removes any sound effect currently assigned to this object.</Description>
        <Signature>SoundFXNone()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound effects functions</Group>
        <Description>Assigns an echo effect to the sounds played by this object.</Description>
        <Remarks>Example: &lt;b&gt;actor.SoundFXEcho(50, 50);&lt;/b&gt;</Remarks>
        <Signature>SoundFXEcho(WetDryMix, Feedback, LeftDelay, RightDelay)</Signature>
        <Parameter Optional="False">
          <Name>WetDryMix</Name>
          <Description>Wet/Dry Mix, in percent (0 to 100)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Feedback</Name>
          <Description>Feedback, in percent (0 to 100)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>LeftDelay</Name>
          <Description>Left delay, in milliseconds (1 to 2000)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>RightDelay</Name>
          <Description>Right delay, in milliseconds (1 to 2000)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound effects functions</Group>
        <Description>Assigns a reverb effect to the sounds played by this object.</Description>
        <Remarks>Example: &lt;b&gt;actor.SoundFXReverb(0, 0, 2000);&lt;/b&gt;</Remarks>
        <Signature>SoundFXReverb(InGain, ReverbMix, ReverbTime, HighFreqRTRatio)</Signature>
        <Parameter Optional="False">
          <Name>InGain</Name>
          <Description>In gain, in dB (-96 to 0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ReverbMix</Name>
          <Description>Reverb mix, in dB (-96 to 0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ReverbTime</Name>
          <Description>Reverb time, in milliseconds (0.001 to 3000)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>HighFreqRTRatio</Name>
          <Description>HighFreq RT Ratio (0.001 to 0.999)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Event functions</Group>
        <Description>Applies a named event to the object.</Description>
        <Signature>ApplyEvent(EventName)</Signature>
        <Parameter Optional="False">
          <Name>EventName</Name>
          <Description>A name of the event to be applied to the object.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Event functions</Group>
        <Description>Queries whether the object has an event handler for a specified event.</Description>
        <Signature>CanHandleEvent(EventName)</Signature>
        <Parameter Optional="False">
          <Name>EventName</Name>
          <Description>The name of the event to be checked.</Description>
        </Parameter>
      </Method>
      <Attribute Global="False" ReadOnly="True">
        <Name>Parent</Name>
        <Description>Returns a reference to a parent window of this control (or null)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>ParentNotify</Name>
        <Description>Specifies whether this control should notify its parent about events</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Width</Name>
        <Description>A width of the control</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Height</Name>
        <Description>A height of the control</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Visible</Name>
        <Description>Specifies whether the control is visible</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Disabled</Name>
        <Description>Specifies whether the control is disabled</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Text</Name>
        <Description>A text the control displays</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>NextSibling</Name>
        <Description>Returns a reference to the next control in z-order</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>PrevSibling</Name>
        <Description>Returns a reference to the previous control in z-order</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Type</Name>
        <Description>Returns always "window"</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>NumControls</Name>
        <Description>Returns a number of controls contained in this window.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Exclusive</Name>
        <Description>Specifies if the window is in exclusive mode.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SystemExclusive</Name>
        <Description>Specifies if the window is in system exclusive mode.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Menu</Name>
        <Description>Specifies whether this is a "menu" type window (it's closed when the user clicks anywhere outside the window).</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>InGame</Name>
        <Description>Specifies whether this is an "in-game" type window (it's always displayed before the inventory window).</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>ClipContents</Name>
        <Description>Specifies whether the contained controls are clipped when they lie partially outside the window.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Name</Name>
        <Description>The internal name of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Caption</Name>
        <Description>The caption of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>X</Name>
        <Description>The X position of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Y</Name>
        <Description>The Y position of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Height</Name>
        <Description>Returns the current height of the object. In case of actors and entities the scaling is taken into account.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Filename</Name>
        <Description>Returns the filename.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Ready</Name>
        <Description>Returns whether the object isn't currently performing any action.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Interactive</Name>
        <Description>Specifies whether the object recieves user input.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SoundPanning</Name>
        <Description>Specifies whether the sounds played by this object are automatically panned depending on object's position on screen.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>NonIntMouseEvents</Name>
        <Description>Specifies if the object can receive the &lt;b&gt;MouseEntry&lt;/b&gt; and &lt;b&gt;MouseLeave&lt;/b&gt; events even if the game is in non-interactive mode.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Movable</Name>
        <Description>Specifies whether the object can be moved by its sprites (in case the sprite frames have a "move" property set).</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Scalable</Name>
        <Description>Specifies whether the object is affected by scene's scaling levels.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Rotatable</Name>
        <Description>Specifies whether the object is affected by scene's rotation levels.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Colorable</Name>
        <Description>Specifies whether the object is affected by scene's color regions.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>AlphaColor</Name>
        <Description>Specifies an RGBA color of this object (overrides scene coloring); set to 0 to reset default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Scale</Name>
        <Description>Specifies a scale of this object (overrides scene scaling); set to null to reset default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>ScaleX</Name>
        <Description>Specifies horizontal scale of this object; set to null to reset default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>ScaleY</Name>
        <Description>Specifies vertical scale of this object; set to null to reset default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>RelativeScale</Name>
        <Description>Specifies a scale amount to be added to the default scene scale.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Rotate</Name>
        <Description>Specifies rotation of this object (in degrees); overrides scene rotation; set to null to reset default behavior; not available in compatibility mode</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>RelativeRotate</Name>
        <Description>Specifies a rotation amount to be added to the default scene rotation.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>FadeColor</Name>
        <Description>Specifies an alpha color which the background is faded to when this window is being displayed.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>AlphaColor</Name>
        <Description>Specifies an alpha color which is applied to the entire window.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>PauseMusic</Name>
        <Description>Specifies whether the music is paused when this window is running in system-exclusive mode.</Description>
      </Attribute>
      <Event>
        <Name>LeftClick</Name>
        <Description>The left mouse button has been pressed.</Description>
      </Event>
      <Event>
        <Name>RightClick</Name>
        <Description>The right mouse button has been pressed.</Description>
      </Event>
      <Event>
        <Name>MiddleClick</Name>
        <Description>The middle mouse button has been pressed.</Description>
      </Event>
      <Event>
        <Name>LeftDoubleClick</Name>
        <Description>The left mouse button has been double-clicked.</Description>
      </Event>
      <Event>
        <Name>LeftRelease</Name>
        <Description>The left mouse button has been released.</Description>
      </Event>
      <Event>
        <Name>RightRelease</Name>
        <Description>The right mouse button has been released.</Description>
      </Event>
      <Event>
        <Name>MiddleRelease</Name>
        <Description>The middle mouse button has been released.</Description>
      </Event>
      <Event>
        <Name>MouseWheelUp</Name>
        <Description>The mouse wheel has been rolled up.</Description>
      </Event>
      <Event>
        <Name>MouseWheelDown</Name>
        <Description>The mouse wheel has been rolled down.</Description>
      </Event>
      <Event>
        <Name>Keypress</Name>
        <Description>Some key has been pressed. Use the &lt;b&gt;Keyboard&lt;/b&gt; variable to find out the details.</Description>
      </Event>
    </ScriptObject>
    <ScriptObject>
      <BaseFilename>scripting_ref_button</BaseFilename>
      <Name>Button object</Name>
      <Description>The Button object allows you to access the properties of the button controls contained in the game windows. Button objects can be queried using the Window.GetControl method.</Description>
      <Method Global="False" Constructor="False">
        <Description>Sets a normal font.</Description>
        <Signature>SetFont(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>A filename of a font file to be used.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Sets a background image (sprite).</Description>
        <Signature>SetImage(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>A filename of a sprite file to be used.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns the filename of the background sprite (or null if no sprite is set)</Description>
        <Signature>GetImage()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns a reference to the background sprite (or null if no sprite is set)</Description>
        <Signature>GetImageObject()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Focuses the control.</Description>
        <Signature>Focus()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Moves the control in z-order after a given control.</Description>
        <Signature>MoveAfter(Control)</Signature>
        <Signature>MoveAfter(ControlName)</Signature>
        <Parameter Optional="False">
          <Name>Control</Name>
          <Description>A control object we will move our control after</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ControlName</Name>
          <Description>A name of a control object we will move our control after</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Moves the control in z-order before a given control.</Description>
        <Signature>MoveBefore(Control)</Signature>
        <Signature>MoveBefore(ControlName)</Signature>
        <Parameter Optional="False">
          <Name>Control</Name>
          <Description>A control object we will move our control before</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ControlName</Name>
          <Description>A name of a control object we will move our control before</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Moves the control to the top of the z-order.</Description>
        <Signature>MoveToTop()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Moves the control to the bottom of the z-order.</Description>
        <Signature>MoveToBottom()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Moves an object to a specified location.</Description>
        <Signature>SkipTo(X, Y)</Signature>
        <Parameter Optional="False">
          <Name>X</Name>
          <Description>Destination X coordinate.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Y</Name>
          <Description>Destination Y coordinate.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Sets a font for button's disabled state.</Description>
        <Signature>SetDisabledFont(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>A filename of a font file to be used.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Sets a font for button's hover (mouse-over) state.</Description>
        <Signature>SetHoverFont(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>A filename of a font file to be used.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Sets a font for button's pressed state.</Description>
        <Signature>SetPressedFont(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>A filename of a font file to be used.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Sets a font for button's focused state.</Description>
        <Signature>SetFocusedFont(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>A filename of a font file to be used.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Sets a background image (sprite) for button's disabled state.</Description>
        <Signature>SetDisabledImage(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>A filename of a sprite file to be used.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Returns the filename of the disabled background sprite (or null if no sprite is set)</Description>
        <Signature>GetDisabledImage()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Returns a reference to the disabled background sprite (or null if no sprite is set)</Description>
        <Signature>GetDisabledImageObject()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Sets a background image (sprite) for button's hover (mouse-over) state.</Description>
        <Signature>SetHoverImage(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>A filename of a sprite file to be used.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Returns the filename of the hovered background sprite (or null if no sprite is set)</Description>
        <Signature>GetHoverImage()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Returns a reference to the hovered background sprite (or null if no sprite is set)</Description>
        <Signature>GetHoverImageObject()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Sets a background image (sprite) for button's pressed state.</Description>
        <Signature>SetPressedImage(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>A filename of a sprite file to be used.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Returns the filename of the pressed background sprite (or null if no sprite is set)</Description>
        <Signature>GetPressedImage()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Returns a reference to the pressed background sprite (or null if no sprite is set)</Description>
        <Signature>GetPressedImageObject()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Sets a background image (sprite) for button's focused state.</Description>
        <Signature>SetFocusedImage(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>A filename of a sprite file to be used.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Returns the filename of the focused background sprite (or null if no sprite is set)</Description>
        <Signature>GetFocusedImage()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Returns a reference to the focused background sprite (or null if no sprite is set)</Description>
        <Signature>GetFocusedImageObject()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Presses the button programatically.</Description>
        <Signature>Press()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Sets the standard cursor.</Description>
        <Signature>SetCursor(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>Filename of a sprite file to be used as a cursor pointer.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Returns the filename of the cursor sprite (or null if no cursor is set)</Description>
        <Signature>GetCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Returns a reference to the cursor sprite (or null if no cursor is set)</Description>
        <Signature>GetCursorObject()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Removes the standard cursor.</Description>
        <Signature>RemoveCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Queries whether the standard cursor is set.</Description>
        <Signature>HasCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Executes a script file and attaches it to the object.</Description>
        <Remarks>Each WME object can have multiple scripts attached.</Remarks>
        <Signature>AttachScript(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the script file to be executed.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Terminates a specified script file and detaches it from an object.</Description>
        <Signature>DetachScript(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the (running) script to be terminated and detached.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Queries whether a specified script file is running and attached to an object.</Description>
        <Signature>IsScriptRunning(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the script to be queried.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Queries whether the object supports a method of a specified name.</Description>
        <Signature>CanHandleMethod(MethodName)</Signature>
        <Parameter Optional="False">
          <Name>MethodName</Name>
          <Description>The name of the method to be checked.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Plays a sound. If the filename is omitted, the currently assigned sound is played (if any).</Description>
        <Signature>PlaySound(Filename, Looping, LoopStart)</Signature>
        <Signature>PlaySound(Looping, LoopStart)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the sound file to be played</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Looping</Name>
          <Description>Whether the sound should be looped (optional, default = false).</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>LoopStart</Name>
          <Description>The point from which the sound restarts when looping, in milliseconds (optional, default=0).</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Plays a sound and triggers an event when the sound is over. If the filename is omitted, the currently assigned sound is played (if any).</Description>
        <Signature>PlaySoundEvent(Filename, EventName)</Signature>
        <Signature>PlaySoundEvent(EventName)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the sound file to be played</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>EventName</Name>
          <Description>The name of the event to be triggered after the sound finishes.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Stops the currently playing sound (if any).</Description>
        <Signature>StopSound()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Pauses the currently playing sound.</Description>
        <Signature>PauseSound()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Resumes a paused sound playback.</Description>
        <Signature>ResumeSound()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Queries whether a sound playback is in progress.</Description>
        <Signature>IsSoundPlaying()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Sets the sound's current playing position.</Description>
        <Signature>SetSoundPosition(Time)</Signature>
        <Parameter Optional="False">
          <Name>Time</Name>
          <Description>A new playing position (in milliseconds)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Queries the sound's current playing position</Description>
        <Signature>GetSoundPosition()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Sets a volume of the currently playing sound.</Description>
        <Signature>SetSoundVolume(Volume)</Signature>
        <Parameter Optional="False">
          <Name>Volume</Name>
          <Description>A new sound volume (in percent).</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Gets a volume of the currently playing sound.</Description>
        <Signature>GetSoundVolume()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Initializes a sound from file and makes it ready to be played.</Description>
        <Remarks>Use this method to pre-cache a sound file. Initializing the sound takes some time and sometimes it's desirable to move all sound initialization to e.g. scene start so that the subsequent PlaySound calls don't slow the game down. That's what LoadSound is for. To play the pre-cached sound simply call PlaySound without specifying a filename, for example SomeObject.PlaySound(false);</Remarks>
        <Signature>LoadSound(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The sound file to be loaded</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound effects functions</Group>
        <Description>Removes any sound effect currently assigned to this object.</Description>
        <Signature>SoundFXNone()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound effects functions</Group>
        <Description>Assigns an echo effect to the sounds played by this object.</Description>
        <Remarks>Example: &lt;b&gt;actor.SoundFXEcho(50, 50);&lt;/b&gt;</Remarks>
        <Signature>SoundFXEcho(WetDryMix, Feedback, LeftDelay, RightDelay)</Signature>
        <Parameter Optional="False">
          <Name>WetDryMix</Name>
          <Description>Wet/Dry Mix, in percent (0 to 100)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Feedback</Name>
          <Description>Feedback, in percent (0 to 100)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>LeftDelay</Name>
          <Description>Left delay, in milliseconds (1 to 2000)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>RightDelay</Name>
          <Description>Right delay, in milliseconds (1 to 2000)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound effects functions</Group>
        <Description>Assigns a reverb effect to the sounds played by this object.</Description>
        <Remarks>Example: &lt;b&gt;actor.SoundFXReverb(0, 0, 2000);&lt;/b&gt;</Remarks>
        <Signature>SoundFXReverb(InGain, ReverbMix, ReverbTime, HighFreqRTRatio)</Signature>
        <Parameter Optional="False">
          <Name>InGain</Name>
          <Description>In gain, in dB (-96 to 0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ReverbMix</Name>
          <Description>Reverb mix, in dB (-96 to 0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ReverbTime</Name>
          <Description>Reverb time, in milliseconds (0.001 to 3000)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>HighFreqRTRatio</Name>
          <Description>HighFreq RT Ratio (0.001 to 0.999)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Event functions</Group>
        <Description>Applies a named event to the object.</Description>
        <Signature>ApplyEvent(EventName)</Signature>
        <Parameter Optional="False">
          <Name>EventName</Name>
          <Description>A name of the event to be applied to the object.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Event functions</Group>
        <Description>Queries whether the object has an event handler for a specified event.</Description>
        <Signature>CanHandleEvent(EventName)</Signature>
        <Parameter Optional="False">
          <Name>EventName</Name>
          <Description>The name of the event to be checked.</Description>
        </Parameter>
      </Method>
      <Attribute Global="False" ReadOnly="True">
        <Name>Parent</Name>
        <Description>Returns a reference to a parent window of this control (or null)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>ParentNotify</Name>
        <Description>Specifies whether this control should notify its parent about events</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Width</Name>
        <Description>A width of the control</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Height</Name>
        <Description>A height of the control</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Visible</Name>
        <Description>Specifies whether the control is visible</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Disabled</Name>
        <Description>Specifies whether the control is disabled</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Text</Name>
        <Description>A text the control displays</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>NextSibling</Name>
        <Description>Returns a reference to the next control in z-order</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>PrevSibling</Name>
        <Description>Returns a reference to the previous control in z-order</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Type</Name>
        <Description>Returns always "button"</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Focusable</Name>
        <Description>Specifies whether the button can be focused.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Pressed</Name>
        <Description>Specifies whether the button appears to be pressed all the time (useful for two state buttons, such as check-boxes).</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>PixelPerfect</Name>
        <Description>Specifies whether the button checks mouse-over based on the shape of its background sprite.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Name</Name>
        <Description>The internal name of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Caption</Name>
        <Description>The caption of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>X</Name>
        <Description>The X position of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Y</Name>
        <Description>The Y position of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Height</Name>
        <Description>Returns the current height of the object. In case of actors and entities the scaling is taken into account.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Filename</Name>
        <Description>Returns the filename.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Ready</Name>
        <Description>Returns whether the object isn't currently performing any action.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Interactive</Name>
        <Description>Specifies whether the object recieves user input.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SoundPanning</Name>
        <Description>Specifies whether the sounds played by this object are automatically panned depending on object's position on screen.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>NonIntMouseEvents</Name>
        <Description>Specifies if the object can receive the &lt;b&gt;MouseEntry&lt;/b&gt; and &lt;b&gt;MouseLeave&lt;/b&gt; events even if the game is in non-interactive mode.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Movable</Name>
        <Description>Specifies whether the object can be moved by its sprites (in case the sprite frames have a "move" property set).</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Scalable</Name>
        <Description>Specifies whether the object is affected by scene's scaling levels.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Rotatable</Name>
        <Description>Specifies whether the object is affected by scene's rotation levels.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Colorable</Name>
        <Description>Specifies whether the object is affected by scene's color regions.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>AlphaColor</Name>
        <Description>Specifies an RGBA color of this object (overrides scene coloring); set to 0 to reset default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Scale</Name>
        <Description>Specifies a scale of this object (overrides scene scaling); set to null to reset default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>ScaleX</Name>
        <Description>Specifies horizontal scale of this object; set to null to reset default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>ScaleY</Name>
        <Description>Specifies vertical scale of this object; set to null to reset default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>RelativeScale</Name>
        <Description>Specifies a scale amount to be added to the default scene scale.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Rotate</Name>
        <Description>Specifies rotation of this object (in degrees); overrides scene rotation; set to null to reset default behavior; not available in compatibility mode</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>RelativeRotate</Name>
        <Description>Specifies a rotation amount to be added to the default scene rotation.</Description>
      </Attribute>
    </ScriptObject>
    <ScriptObject>
      <BaseFilename>scripting_ref_static</BaseFilename>
      <Name>Static object</Name>
      <Description>The Static control object allows you to access the properties of the "static" controls contained in the game windows. The static control can be either a simple text or an image (sprite), or both, used for non-interactive window decorations (labels, icons etc.). Static control objects can be queried using the Window.GetControl method.</Description>
      <Method Global="False" Constructor="False">
        <Description>Sets a normal font.</Description>
        <Signature>SetFont(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>A filename of a font file to be used.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Sets a background image (sprite).</Description>
        <Signature>SetImage(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>A filename of a sprite file to be used.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns the filename of the background sprite (or null if no sprite is set)</Description>
        <Signature>GetImage()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns a reference to the background sprite (or null if no sprite is set)</Description>
        <Signature>GetImageObject()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Focuses the control.</Description>
        <Signature>Focus()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Moves the control in z-order after a given control.</Description>
        <Signature>MoveAfter(Control)</Signature>
        <Signature>MoveAfter(ControlName)</Signature>
        <Parameter Optional="False">
          <Name>Control</Name>
          <Description>A control object we will move our control after</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ControlName</Name>
          <Description>A name of a control object we will move our control after</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Moves the control in z-order before a given control.</Description>
        <Signature>MoveBefore(Control)</Signature>
        <Signature>MoveBefore(ControlName)</Signature>
        <Parameter Optional="False">
          <Name>Control</Name>
          <Description>A control object we will move our control before</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ControlName</Name>
          <Description>A name of a control object we will move our control before</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Moves the control to the top of the z-order.</Description>
        <Signature>MoveToTop()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Moves the control to the bottom of the z-order.</Description>
        <Signature>MoveToBottom()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Moves an object to a specified location.</Description>
        <Signature>SkipTo(X, Y)</Signature>
        <Parameter Optional="False">
          <Name>X</Name>
          <Description>Destination X coordinate.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Y</Name>
          <Description>Destination Y coordinate.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Changes the size of the control to fit the contained text or image.</Description>
        <Signature>SizeToFit()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Changes the height of the control to fit the contained text.</Description>
        <Signature>HeightToFit()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Sets the standard cursor.</Description>
        <Signature>SetCursor(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>Filename of a sprite file to be used as a cursor pointer.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Returns the filename of the cursor sprite (or null if no cursor is set)</Description>
        <Signature>GetCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Returns a reference to the cursor sprite (or null if no cursor is set)</Description>
        <Signature>GetCursorObject()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Removes the standard cursor.</Description>
        <Signature>RemoveCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Queries whether the standard cursor is set.</Description>
        <Signature>HasCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Executes a script file and attaches it to the object.</Description>
        <Remarks>Each WME object can have multiple scripts attached.</Remarks>
        <Signature>AttachScript(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the script file to be executed.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Terminates a specified script file and detaches it from an object.</Description>
        <Signature>DetachScript(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the (running) script to be terminated and detached.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Queries whether a specified script file is running and attached to an object.</Description>
        <Signature>IsScriptRunning(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the script to be queried.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Queries whether the object supports a method of a specified name.</Description>
        <Signature>CanHandleMethod(MethodName)</Signature>
        <Parameter Optional="False">
          <Name>MethodName</Name>
          <Description>The name of the method to be checked.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Plays a sound. If the filename is omitted, the currently assigned sound is played (if any).</Description>
        <Signature>PlaySound(Filename, Looping, LoopStart)</Signature>
        <Signature>PlaySound(Looping, LoopStart)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the sound file to be played</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Looping</Name>
          <Description>Whether the sound should be looped (optional, default = false).</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>LoopStart</Name>
          <Description>The point from which the sound restarts when looping, in milliseconds (optional, default=0).</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Plays a sound and triggers an event when the sound is over. If the filename is omitted, the currently assigned sound is played (if any).</Description>
        <Signature>PlaySoundEvent(Filename, EventName)</Signature>
        <Signature>PlaySoundEvent(EventName)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the sound file to be played</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>EventName</Name>
          <Description>The name of the event to be triggered after the sound finishes.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Stops the currently playing sound (if any).</Description>
        <Signature>StopSound()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Pauses the currently playing sound.</Description>
        <Signature>PauseSound()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Resumes a paused sound playback.</Description>
        <Signature>ResumeSound()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Queries whether a sound playback is in progress.</Description>
        <Signature>IsSoundPlaying()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Sets the sound's current playing position.</Description>
        <Signature>SetSoundPosition(Time)</Signature>
        <Parameter Optional="False">
          <Name>Time</Name>
          <Description>A new playing position (in milliseconds)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Queries the sound's current playing position</Description>
        <Signature>GetSoundPosition()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Sets a volume of the currently playing sound.</Description>
        <Signature>SetSoundVolume(Volume)</Signature>
        <Parameter Optional="False">
          <Name>Volume</Name>
          <Description>A new sound volume (in percent).</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Gets a volume of the currently playing sound.</Description>
        <Signature>GetSoundVolume()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Initializes a sound from file and makes it ready to be played.</Description>
        <Remarks>Use this method to pre-cache a sound file. Initializing the sound takes some time and sometimes it's desirable to move all sound initialization to e.g. scene start so that the subsequent PlaySound calls don't slow the game down. That's what LoadSound is for. To play the pre-cached sound simply call PlaySound without specifying a filename, for example SomeObject.PlaySound(false);</Remarks>
        <Signature>LoadSound(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The sound file to be loaded</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound effects functions</Group>
        <Description>Removes any sound effect currently assigned to this object.</Description>
        <Signature>SoundFXNone()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound effects functions</Group>
        <Description>Assigns an echo effect to the sounds played by this object.</Description>
        <Remarks>Example: &lt;b&gt;actor.SoundFXEcho(50, 50);&lt;/b&gt;</Remarks>
        <Signature>SoundFXEcho(WetDryMix, Feedback, LeftDelay, RightDelay)</Signature>
        <Parameter Optional="False">
          <Name>WetDryMix</Name>
          <Description>Wet/Dry Mix, in percent (0 to 100)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Feedback</Name>
          <Description>Feedback, in percent (0 to 100)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>LeftDelay</Name>
          <Description>Left delay, in milliseconds (1 to 2000)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>RightDelay</Name>
          <Description>Right delay, in milliseconds (1 to 2000)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound effects functions</Group>
        <Description>Assigns a reverb effect to the sounds played by this object.</Description>
        <Remarks>Example: &lt;b&gt;actor.SoundFXReverb(0, 0, 2000);&lt;/b&gt;</Remarks>
        <Signature>SoundFXReverb(InGain, ReverbMix, ReverbTime, HighFreqRTRatio)</Signature>
        <Parameter Optional="False">
          <Name>InGain</Name>
          <Description>In gain, in dB (-96 to 0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ReverbMix</Name>
          <Description>Reverb mix, in dB (-96 to 0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ReverbTime</Name>
          <Description>Reverb time, in milliseconds (0.001 to 3000)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>HighFreqRTRatio</Name>
          <Description>HighFreq RT Ratio (0.001 to 0.999)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Event functions</Group>
        <Description>Applies a named event to the object.</Description>
        <Signature>ApplyEvent(EventName)</Signature>
        <Parameter Optional="False">
          <Name>EventName</Name>
          <Description>A name of the event to be applied to the object.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Event functions</Group>
        <Description>Queries whether the object has an event handler for a specified event.</Description>
        <Signature>CanHandleEvent(EventName)</Signature>
        <Parameter Optional="False">
          <Name>EventName</Name>
          <Description>The name of the event to be checked.</Description>
        </Parameter>
      </Method>
      <Attribute Global="False" ReadOnly="True">
        <Name>Parent</Name>
        <Description>Returns a reference to a parent window of this control (or null)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>ParentNotify</Name>
        <Description>Specifies whether this control should notify its parent about events</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Width</Name>
        <Description>A width of the control</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Height</Name>
        <Description>A height of the control</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Visible</Name>
        <Description>Specifies whether the control is visible</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Disabled</Name>
        <Description>Specifies whether the control is disabled</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Text</Name>
        <Description>A text the control displays</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>NextSibling</Name>
        <Description>Returns a reference to the next control in z-order</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>PrevSibling</Name>
        <Description>Returns a reference to the previous control in z-order</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Type</Name>
        <Description>Returns always "static"</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>TextAlign</Name>
        <Description>Specifies the text alignment of the label (TAL_LEFT, TAL_RIGHT or TAL_CENTER).</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>VerticalAlign</Name>
        <Description>Specifies the vertical text alignment of the label (VAL_TOP, VAL_BOTTOM or VAL_CENTER).</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Name</Name>
        <Description>The internal name of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Caption</Name>
        <Description>The caption of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>X</Name>
        <Description>The X position of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Y</Name>
        <Description>The Y position of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Height</Name>
        <Description>Returns the current height of the object. In case of actors and entities the scaling is taken into account.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Filename</Name>
        <Description>Returns the filename.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Ready</Name>
        <Description>Returns whether the object isn't currently performing any action.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Interactive</Name>
        <Description>Specifies whether the object recieves user input.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SoundPanning</Name>
        <Description>Specifies whether the sounds played by this object are automatically panned depending on object's position on screen.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>NonIntMouseEvents</Name>
        <Description>Specifies if the object can receive the &lt;b&gt;MouseEntry&lt;/b&gt; and &lt;b&gt;MouseLeave&lt;/b&gt; events even if the game is in non-interactive mode.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Movable</Name>
        <Description>Specifies whether the object can be moved by its sprites (in case the sprite frames have a "move" property set).</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Scalable</Name>
        <Description>Specifies whether the object is affected by scene's scaling levels.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Rotatable</Name>
        <Description>Specifies whether the object is affected by scene's rotation levels.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Colorable</Name>
        <Description>Specifies whether the object is affected by scene's color regions.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>AlphaColor</Name>
        <Description>Specifies an RGBA color of this object (overrides scene coloring); set to 0 to reset default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Scale</Name>
        <Description>Specifies a scale of this object (overrides scene scaling); set to null to reset default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>ScaleX</Name>
        <Description>Specifies horizontal scale of this object; set to null to reset default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>ScaleY</Name>
        <Description>Specifies vertical scale of this object; set to null to reset default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>RelativeScale</Name>
        <Description>Specifies a scale amount to be added to the default scene scale.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Rotate</Name>
        <Description>Specifies rotation of this object (in degrees); overrides scene rotation; set to null to reset default behavior; not available in compatibility mode</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>RelativeRotate</Name>
        <Description>Specifies a rotation amount to be added to the default scene rotation.</Description>
      </Attribute>
    </ScriptObject>
    <ScriptObject>
      <BaseFilename>scripting_ref_editor</BaseFilename>
      <Name>Editor object</Name>
      <Description>The Editor object allows you to access the properties of the single line editor controls contained in the game windows. Editor objects can be queried using the Window.GetControl method.</Description>
      <Method Global="False" Constructor="False">
        <Description>Sets a normal font.</Description>
        <Signature>SetFont(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>A filename of a font file to be used.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Sets a background image (sprite).</Description>
        <Signature>SetImage(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>A filename of a sprite file to be used.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns the filename of the background sprite (or null if no sprite is set)</Description>
        <Signature>GetImage()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns a reference to the background sprite (or null if no sprite is set)</Description>
        <Signature>GetImageObject()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Focuses the control.</Description>
        <Signature>Focus()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Moves the control in z-order after a given control.</Description>
        <Signature>MoveAfter(Control)</Signature>
        <Signature>MoveAfter(ControlName)</Signature>
        <Parameter Optional="False">
          <Name>Control</Name>
          <Description>A control object we will move our control after</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ControlName</Name>
          <Description>A name of a control object we will move our control after</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Moves the control in z-order before a given control.</Description>
        <Signature>MoveBefore(Control)</Signature>
        <Signature>MoveBefore(ControlName)</Signature>
        <Parameter Optional="False">
          <Name>Control</Name>
          <Description>A control object we will move our control before</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ControlName</Name>
          <Description>A name of a control object we will move our control before</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Moves the control to the top of the z-order.</Description>
        <Signature>MoveToTop()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Moves the control to the bottom of the z-order.</Description>
        <Signature>MoveToBottom()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Moves an object to a specified location.</Description>
        <Signature>SkipTo(X, Y)</Signature>
        <Parameter Optional="False">
          <Name>X</Name>
          <Description>Destination X coordinate.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Y</Name>
          <Description>Destination Y coordinate.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Sets a font for displaying the selected text within the editor control.</Description>
        <Signature>SetSelectedFont(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>A filename of a font file to be used.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Sets the standard cursor.</Description>
        <Signature>SetCursor(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>Filename of a sprite file to be used as a cursor pointer.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Returns the filename of the cursor sprite (or null if no cursor is set)</Description>
        <Signature>GetCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Returns a reference to the cursor sprite (or null if no cursor is set)</Description>
        <Signature>GetCursorObject()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Removes the standard cursor.</Description>
        <Signature>RemoveCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Queries whether the standard cursor is set.</Description>
        <Signature>HasCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Executes a script file and attaches it to the object.</Description>
        <Remarks>Each WME object can have multiple scripts attached.</Remarks>
        <Signature>AttachScript(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the script file to be executed.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Terminates a specified script file and detaches it from an object.</Description>
        <Signature>DetachScript(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the (running) script to be terminated and detached.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Queries whether a specified script file is running and attached to an object.</Description>
        <Signature>IsScriptRunning(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the script to be queried.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Queries whether the object supports a method of a specified name.</Description>
        <Signature>CanHandleMethod(MethodName)</Signature>
        <Parameter Optional="False">
          <Name>MethodName</Name>
          <Description>The name of the method to be checked.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Plays a sound. If the filename is omitted, the currently assigned sound is played (if any).</Description>
        <Signature>PlaySound(Filename, Looping, LoopStart)</Signature>
        <Signature>PlaySound(Looping, LoopStart)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the sound file to be played</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Looping</Name>
          <Description>Whether the sound should be looped (optional, default = false).</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>LoopStart</Name>
          <Description>The point from which the sound restarts when looping, in milliseconds (optional, default=0).</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Plays a sound and triggers an event when the sound is over. If the filename is omitted, the currently assigned sound is played (if any).</Description>
        <Signature>PlaySoundEvent(Filename, EventName)</Signature>
        <Signature>PlaySoundEvent(EventName)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the sound file to be played</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>EventName</Name>
          <Description>The name of the event to be triggered after the sound finishes.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Stops the currently playing sound (if any).</Description>
        <Signature>StopSound()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Pauses the currently playing sound.</Description>
        <Signature>PauseSound()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Resumes a paused sound playback.</Description>
        <Signature>ResumeSound()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Queries whether a sound playback is in progress.</Description>
        <Signature>IsSoundPlaying()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Sets the sound's current playing position.</Description>
        <Signature>SetSoundPosition(Time)</Signature>
        <Parameter Optional="False">
          <Name>Time</Name>
          <Description>A new playing position (in milliseconds)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Queries the sound's current playing position</Description>
        <Signature>GetSoundPosition()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Sets a volume of the currently playing sound.</Description>
        <Signature>SetSoundVolume(Volume)</Signature>
        <Parameter Optional="False">
          <Name>Volume</Name>
          <Description>A new sound volume (in percent).</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Gets a volume of the currently playing sound.</Description>
        <Signature>GetSoundVolume()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Initializes a sound from file and makes it ready to be played.</Description>
        <Remarks>Use this method to pre-cache a sound file. Initializing the sound takes some time and sometimes it's desirable to move all sound initialization to e.g. scene start so that the subsequent PlaySound calls don't slow the game down. That's what LoadSound is for. To play the pre-cached sound simply call PlaySound without specifying a filename, for example SomeObject.PlaySound(false);</Remarks>
        <Signature>LoadSound(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The sound file to be loaded</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound effects functions</Group>
        <Description>Removes any sound effect currently assigned to this object.</Description>
        <Signature>SoundFXNone()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound effects functions</Group>
        <Description>Assigns an echo effect to the sounds played by this object.</Description>
        <Remarks>Example: &lt;b&gt;actor.SoundFXEcho(50, 50);&lt;/b&gt;</Remarks>
        <Signature>SoundFXEcho(WetDryMix, Feedback, LeftDelay, RightDelay)</Signature>
        <Parameter Optional="False">
          <Name>WetDryMix</Name>
          <Description>Wet/Dry Mix, in percent (0 to 100)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Feedback</Name>
          <Description>Feedback, in percent (0 to 100)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>LeftDelay</Name>
          <Description>Left delay, in milliseconds (1 to 2000)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>RightDelay</Name>
          <Description>Right delay, in milliseconds (1 to 2000)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound effects functions</Group>
        <Description>Assigns a reverb effect to the sounds played by this object.</Description>
        <Remarks>Example: &lt;b&gt;actor.SoundFXReverb(0, 0, 2000);&lt;/b&gt;</Remarks>
        <Signature>SoundFXReverb(InGain, ReverbMix, ReverbTime, HighFreqRTRatio)</Signature>
        <Parameter Optional="False">
          <Name>InGain</Name>
          <Description>In gain, in dB (-96 to 0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ReverbMix</Name>
          <Description>Reverb mix, in dB (-96 to 0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ReverbTime</Name>
          <Description>Reverb time, in milliseconds (0.001 to 3000)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>HighFreqRTRatio</Name>
          <Description>HighFreq RT Ratio (0.001 to 0.999)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Event functions</Group>
        <Description>Applies a named event to the object.</Description>
        <Signature>ApplyEvent(EventName)</Signature>
        <Parameter Optional="False">
          <Name>EventName</Name>
          <Description>A name of the event to be applied to the object.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Event functions</Group>
        <Description>Queries whether the object has an event handler for a specified event.</Description>
        <Signature>CanHandleEvent(EventName)</Signature>
        <Parameter Optional="False">
          <Name>EventName</Name>
          <Description>The name of the event to be checked.</Description>
        </Parameter>
      </Method>
      <Attribute Global="False" ReadOnly="True">
        <Name>Parent</Name>
        <Description>Returns a reference to a parent window of this control (or null)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>ParentNotify</Name>
        <Description>Specifies whether this control should notify its parent about events</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Width</Name>
        <Description>A width of the control</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Height</Name>
        <Description>A height of the control</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Visible</Name>
        <Description>Specifies whether the control is visible</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Disabled</Name>
        <Description>Specifies whether the control is disabled</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Text</Name>
        <Description>A text the control displays</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>NextSibling</Name>
        <Description>Returns a reference to the next control in z-order</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>PrevSibling</Name>
        <Description>Returns a reference to the previous control in z-order</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Type</Name>
        <Description>Returns always "editor"</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SelStart</Name>
        <Description>Specifies an index of a first selected character in the editor.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SelEnd</Name>
        <Description>Specifies an index of a last selected character in the editor.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>CursorBlinkRate</Name>
        <Description>Specifies a blinking rate of the editor's cursor (in milliseconds)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>CursorChar</Name>
        <Description>Specifies a character to be used as a blinking cursor.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>FrameWidth</Name>
        <Description>Specifies an offset of the text from the editor's position (in pixels)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>MaxLength</Name>
        <Description>Specifies a maximum allowed lenght of the text contained in the editor (in characters)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Name</Name>
        <Description>The internal name of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Caption</Name>
        <Description>The caption of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>X</Name>
        <Description>The X position of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Y</Name>
        <Description>The Y position of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Height</Name>
        <Description>Returns the current height of the object. In case of actors and entities the scaling is taken into account.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Filename</Name>
        <Description>Returns the filename.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Ready</Name>
        <Description>Returns whether the object isn't currently performing any action.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Interactive</Name>
        <Description>Specifies whether the object recieves user input.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SoundPanning</Name>
        <Description>Specifies whether the sounds played by this object are automatically panned depending on object's position on screen.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>NonIntMouseEvents</Name>
        <Description>Specifies if the object can receive the &lt;b&gt;MouseEntry&lt;/b&gt; and &lt;b&gt;MouseLeave&lt;/b&gt; events even if the game is in non-interactive mode.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Movable</Name>
        <Description>Specifies whether the object can be moved by its sprites (in case the sprite frames have a "move" property set).</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Scalable</Name>
        <Description>Specifies whether the object is affected by scene's scaling levels.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Rotatable</Name>
        <Description>Specifies whether the object is affected by scene's rotation levels.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Colorable</Name>
        <Description>Specifies whether the object is affected by scene's color regions.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>AlphaColor</Name>
        <Description>Specifies an RGBA color of this object (overrides scene coloring); set to 0 to reset default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Scale</Name>
        <Description>Specifies a scale of this object (overrides scene scaling); set to null to reset default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>ScaleX</Name>
        <Description>Specifies horizontal scale of this object; set to null to reset default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>ScaleY</Name>
        <Description>Specifies vertical scale of this object; set to null to reset default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>RelativeScale</Name>
        <Description>Specifies a scale amount to be added to the default scene scale.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Rotate</Name>
        <Description>Specifies rotation of this object (in degrees); overrides scene rotation; set to null to reset default behavior; not available in compatibility mode</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>RelativeRotate</Name>
        <Description>Specifies a rotation amount to be added to the default scene rotation.</Description>
      </Attribute>
    </ScriptObject>
    <ScriptObject>
      <BaseFilename>scripting_ref_string</BaseFilename>
      <Name>String object</Name>
      <Description>The String objects allow you to perform advanced string manipulations. The String object can be created using the one of the following syntaxes:
&lt;br&gt;&lt;br&gt;
&lt;table border="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="100%" cellpadding="0" id="AutoNumber4"&gt;
&lt;tr&gt;
&lt;td class="code"&gt;&lt;pre&gt;
var StrObject = new String("Initial value");
var FixedString = new String(256); // create an empty string, 256 characters long
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;br&gt;
The second variation allows you to allocate a fixed text buffer which can be used to communicate with external DLL libraries.</Description>
      <Method Global="False" Constructor="True">
        <Description>Creates an empty string object.</Description>
        <Signature>String()</Signature>
      </Method>
      <Method Global="False" Constructor="True">
        <Description>Creates a new string object and assigns it a specified value.</Description>
        <Signature>String(StringValue)</Signature>
        <Parameter Optional="False">
          <Name>StringValue</Name>
          <Description>The string value to be assigned to the string object</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="True">
        <Description>Creates a new string buffer of a specified size</Description>
        <Remarks>String objects created this way are intended for passing fixed string buffers to DLL libraries</Remarks>
        <Signature>String(BufferSize)</Signature>
        <Parameter Optional="False">
          <Name>BufferSize</Name>
          <Description>The size of the string buffer to be allocated</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Extracts a substring by specifying the start and end positions within the original string </Description>
        <Signature>Substring(Start, End)</Signature>
        <Parameter Optional="False">
          <Name>Start</Name>
          <Description>A start position of the substring to be extracted</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>End</Name>
          <Description>An end position of the substring to be extracted</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Extracts a substring by specifying the start position and length of the fragment</Description>
        <Signature>Substr(Start, Length)</Signature>
        <Parameter Optional="False">
          <Name>Start</Name>
          <Description>A start position of the substring to be extracted</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Length</Name>
          <Description>A length of the substring to be extracted (optional, defaults to the end of the string)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Converts the string to upper case</Description>
        <Signature>ToUpperCase()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Converts the string to lower case</Description>
        <Signature>ToLowerCase()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Searches the string for a specified substring.</Description>
        <Signature>IndexOf(Substring, Starting)</Signature>
        <Parameter Optional="False">
          <Name>Substring</Name>
          <Description>A substring to search for</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Starting</Name>
          <Description>A position from which to start searching (optional, defaults to the beginning of the string)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Splits string into a list of values.</Description>
        <Signature>Split(Separators)</Signature>
        <Parameter Optional="False">
          <Name>Separators</Name>
          <Description>Characters to be used as item separators (optional, default=",")</Description>
        </Parameter>
      </Method>
      <Attribute Global="False" ReadOnly="True">
        <Name>Type</Name>
        <Description>Returns always "string"</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Length</Name>
        <Description>Returns the length of the string (in characters)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Capacity</Name>
        <Description>Specifies the current size of the underlying character buffer of this string object.</Description>
      </Attribute>
    </ScriptObject>
    <ScriptObject>
      <BaseFilename>scripting_ref_date</BaseFilename>
      <Name>Date object</Name>
      <Description>The Date objects allow you to perform advanced time and date manipulations. The Date object can be created using the following syntax:
&lt;br&gt;&lt;br&gt;
&lt;table border="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="100%" cellpadding="0" id="AutoNumber4"&gt;
&lt;tr&gt;
&lt;td class="code"&gt;&lt;pre&gt;
var CurrentTime = new Date();
var DateObject = new Date(2003, 12, 31, 13, 30, 25); // December 31, 2003, 13:30:25
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</Description>
      <Method Global="False" Constructor="True">
        <Description>Creates a new date object and assigns it current date and time.</Description>
        <Signature>Date()</Signature>
      </Method>
      <Method Global="False" Constructor="True">
        <Description>Creates a new date object and assigns it specified date and time.</Description>
        <Signature>Date(Year, Month, Day, Hours, Minutes, Seconds)</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns a year stored in this Date object</Description>
        <Signature>GetYear()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns a month stored in this Date object</Description>
        <Signature>GetMonth()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns a day of the month stored in this Date object</Description>
        <Signature>GetDate()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns hours stored in this Date object</Description>
        <Signature>GetHours()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns minutes stored in this Date object</Description>
        <Signature>GetMinutes()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns seconds stored in this Date object</Description>
        <Signature>GetSeconds()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns a weekday of the date stored in this Date object</Description>
        <Signature>GetWeekday()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Sets a year of this Date object </Description>
        <Signature>SetYear(Year)</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Sets a month of this Date object </Description>
        <Signature>SetMonth(Month)</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Sets a day of the month of this Date object </Description>
        <Signature>SetDate(Day)</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Sets hours of this Date object </Description>
        <Signature>SetHours(Hours)</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Sets minutes of this Date object </Description>
        <Signature>SetMinutes(Minutes)</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Sets seconds of this Date object </Description>
        <Signature>SetSeconds(Seconds)</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Sets this Date object to the current system date and time </Description>
        <Signature>SetCurrentTime()</Signature>
      </Method>
      <Attribute Global="False" ReadOnly="True">
        <Name>Type</Name>
        <Description>Returns always "date"</Description>
      </Attribute>
    </ScriptObject>
    <ScriptObject>
      <BaseFilename>scripting_ref_array</BaseFilename>
      <Name>Array object</Name>
      <Description>The Array objects allow you to perform advanced array manipulations. The Array object can be created using the one of the following syntaxes:
&lt;br&gt;&lt;br&gt;
&lt;table border="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="100%" cellpadding="0" id="AutoNumber4"&gt;
&lt;tr&gt;
&lt;td class="code"&gt;&lt;pre&gt;
var EmptyArray = new Array();
var TestArray = new Array(10); // create an empty array with 10 items
var DaysArray = new Array("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday");
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</Description>
      <Method Global="False" Constructor="True">
        <Description>Creates an empty array object.</Description>
        <Signature>Array()</Signature>
      </Method>
      <Method Global="False" Constructor="True">
        <Description>Creates an array object with the specified number of items.</Description>
        <Signature>Array(NumItems)</Signature>
        <Parameter Optional="False">
          <Name>NumItems</Name>
          <Description>The initial number of items contained in the array</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="True">
        <Description>Creates an array object and fills it with the specified items.</Description>
        <Signature>Array(Item1, Item2, Item3, ...)</Signature>
        <Parameter Optional="False">
          <Name>ItemX</Name>
          <Description>A value you want to add to the array</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Adds one or more items to the end of the array.</Description>
        <Signature>Push(Item1, Item2, Items3, ...)</Signature>
        <Parameter Optional="False">
          <Name>ItemX</Name>
          <Description>A value you want to add to the array</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Removes a last item from the array and returns it.</Description>
        <Signature>Pop()</Signature>
      </Method>
      <Attribute Global="False" ReadOnly="True">
        <Name>Type</Name>
        <Description>Returns always "array"</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Length</Name>
        <Description>Gets or sets the current length of the array, deleting the extra items if necessary.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>[index]</Name>
        <Description>You can set/get individual items of an array using the usual square bracket notation.</Description>
      </Attribute>
    </ScriptObject>
    <ScriptObject>
      <BaseFilename>scripting_ref_math</BaseFilename>
      <Name>Math object</Name>
      <Description>The Math object allows you to perform advanced mathematical operations. This object is always available in a form of predefined &lt;b&gt;Math&lt;/b&gt; global variable.
&lt;br&gt;&lt;br&gt;
&lt;table border="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="100%" cellpadding="0" id="AutoNumber4"&gt;
&lt;tr&gt;
&lt;td class="code"&gt;&lt;pre&gt;
// calculate sine of 90 degrees
var Sine90 = Math.Sin(90);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</Description>
      <Method Global="False" Constructor="False">
        <Description>Returns the absolute value of a number</Description>
        <Signature>Abs(Number)</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns the arccosine of a number</Description>
        <Signature>Acos(Number)</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns the arcsine of a number</Description>
        <Signature>Asin(Number)</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns the arctangent of a number</Description>
        <Signature>Atan(Number)</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns the angle (in radians) from the X axis to a point (y,x)</Description>
        <Signature>Atan2(Y, X)</Signature>
        <Parameter Optional="False">
          <Name>X</Name>
          <Description>A number representing the cartesian x-coordinate</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Y</Name>
          <Description>A number representing the cartesian y-coordinate</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns the smallest integer greater than or equal to the specified number</Description>
        <Signature>Ceil(Number)</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns the cosine of a number</Description>
        <Signature>Cos(Angle)</Signature>
        <Parameter Optional="False">
          <Name>Angle</Name>
          <Description>Angle in degrees</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns the hyperbolic cosine of a number</Description>
        <Signature>Cosh(Angle)</Signature>
        <Parameter Optional="False">
          <Name>Angle</Name>
          <Description>Angle in degrees</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns e (the base of natural logarithms) raised to a power</Description>
        <Signature>Exp(Number)</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns the greatest integer less than or equal to the specified number</Description>
        <Signature>Floor(Number)</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns the natural logarithm of a number</Description>
        <Signature>Log(Number)</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns the base-10 logarithm of a number</Description>
        <Signature>Log10(Number)</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns the value of a Base value taken to a specified power</Description>
        <Signature>Pow(Base, Exponent)</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns the sine of a number</Description>
        <Signature>Sin(Angle)</Signature>
        <Parameter Optional="False">
          <Name>Angle</Name>
          <Description>Angle in degrees</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns the hyperbolic sine of a number</Description>
        <Signature>Sinh(Angle)</Signature>
        <Parameter Optional="False">
          <Name>Angle</Name>
          <Description>Angle in degrees</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns the tangent of a number</Description>
        <Signature>Tan(Angle)</Signature>
        <Parameter Optional="False">
          <Name>Angle</Name>
          <Description>Angle in degrees</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns the hyperbolic tangent of a number</Description>
        <Signature>Tanh(Angle)</Signature>
        <Parameter Optional="False">
          <Name>Angle</Name>
          <Description>Angle in degrees</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns the square root of a number</Description>
        <Signature>Sqrt(Number)</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Converts an angle from degrees to radians</Description>
        <Signature>DegToRad(Angle)</Signature>
        <Parameter Optional="False">
          <Name>Angle</Name>
          <Description>Angle to convert (in degrees)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Converts an angle from radians to degrees</Description>
        <Signature>RadToDeg(Angle)</Signature>
        <Parameter Optional="False">
          <Name>Angle</Name>
          <Description>Angle to convert (in radians)</Description>
        </Parameter>
      </Method>
      <Attribute Global="False" ReadOnly="True">
        <Name>Type</Name>
        <Description>Returns always "math"</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>PI</Name>
        <Description>Returns the ratio of the circumference of a circle to its diameter, approximately 3.141592653589793</Description>
      </Attribute>
    </ScriptObject>
    <ScriptObject>
      <BaseFilename>scripting_ref_entity_container</BaseFilename>
      <Name>Entity container object</Name>
      <Description>The Entity container object allows you to incorporated an advanced interactive object (an entity) into your GUI windows. Entity containers can be queried using the Window.GetControl method.</Description>
      <Method Global="False" Constructor="False">
        <Description>Sets a normal font.</Description>
        <Signature>SetFont(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>A filename of a font file to be used.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Sets a background image (sprite).</Description>
        <Signature>SetImage(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>A filename of a sprite file to be used.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns the filename of the background sprite (or null if no sprite is set)</Description>
        <Signature>GetImage()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns a reference to the background sprite (or null if no sprite is set)</Description>
        <Signature>GetImageObject()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Focuses the control.</Description>
        <Signature>Focus()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Moves the control in z-order after a given control.</Description>
        <Signature>MoveAfter(Control)</Signature>
        <Signature>MoveAfter(ControlName)</Signature>
        <Parameter Optional="False">
          <Name>Control</Name>
          <Description>A control object we will move our control after</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ControlName</Name>
          <Description>A name of a control object we will move our control after</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Moves the control in z-order before a given control.</Description>
        <Signature>MoveBefore(Control)</Signature>
        <Signature>MoveBefore(ControlName)</Signature>
        <Parameter Optional="False">
          <Name>Control</Name>
          <Description>A control object we will move our control before</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ControlName</Name>
          <Description>A name of a control object we will move our control before</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Moves the control to the top of the z-order.</Description>
        <Signature>MoveToTop()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Moves the control to the bottom of the z-order.</Description>
        <Signature>MoveToBottom()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Returns the entity object assigned to this container.</Description>
        <Signature>GetEntity()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Assigns an entity object to this container.</Description>
        <Signature>SetEntity(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the entity file to be assigned.</Description>
        </Parameter>
      </Method>
      <Attribute Global="False" ReadOnly="True">
        <Name>Parent</Name>
        <Description>Returns a reference to a parent window of this control (or null)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>ParentNotify</Name>
        <Description>Specifies whether this control should notify its parent about events</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Width</Name>
        <Description>A width of the control</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Height</Name>
        <Description>A height of the control</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Visible</Name>
        <Description>Specifies whether the control is visible</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Disabled</Name>
        <Description>Specifies whether the control is disabled</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Text</Name>
        <Description>A text the control displays</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>NextSibling</Name>
        <Description>Returns a reference to the next control in z-order</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>PrevSibling</Name>
        <Description>Returns a reference to the previous control in z-order</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Type</Name>
        <Description>Returns always "entity container"</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Freezable</Name>
        <Description>Specifies if the contained entity should be frozen when a system exclusive window is active</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Name</Name>
        <Description>The internal name of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Caption</Name>
        <Description>The caption of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>X</Name>
        <Description>The X position of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Y</Name>
        <Description>The Y position of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Height</Name>
        <Description>Returns the current height of the object. In case of actors and entities the scaling is taken into account.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Filename</Name>
        <Description>Returns the filename.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Ready</Name>
        <Description>Returns whether the object isn't currently performing any action.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Interactive</Name>
        <Description>Specifies whether the object recieves user input.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SoundPanning</Name>
        <Description>Specifies whether the sounds played by this object are automatically panned depending on object's position on screen.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>NonIntMouseEvents</Name>
        <Description>Specifies if the object can receive the &lt;b&gt;MouseEntry&lt;/b&gt; and &lt;b&gt;MouseLeave&lt;/b&gt; events even if the game is in non-interactive mode.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Movable</Name>
        <Description>Specifies whether the object can be moved by its sprites (in case the sprite frames have a "move" property set).</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Scalable</Name>
        <Description>Specifies whether the object is affected by scene's scaling levels.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Rotatable</Name>
        <Description>Specifies whether the object is affected by scene's rotation levels.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Colorable</Name>
        <Description>Specifies whether the object is affected by scene's color regions.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>AlphaColor</Name>
        <Description>Specifies an RGBA color of this object (overrides scene coloring); set to 0 to reset default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Scale</Name>
        <Description>Specifies a scale of this object (overrides scene scaling); set to null to reset default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>ScaleX</Name>
        <Description>Specifies horizontal scale of this object; set to null to reset default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>ScaleY</Name>
        <Description>Specifies vertical scale of this object; set to null to reset default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>RelativeScale</Name>
        <Description>Specifies a scale amount to be added to the default scene scale.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Rotate</Name>
        <Description>Specifies rotation of this object (in degrees); overrides scene rotation; set to null to reset default behavior; not available in compatibility mode</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>RelativeRotate</Name>
        <Description>Specifies a rotation amount to be added to the default scene rotation.</Description>
      </Attribute>
    </ScriptObject>
    <ScriptObject>
      <BaseFilename>scripting_ref_keyboard</BaseFilename>
      <Name>Keyboard object</Name>
      <Description>The Keyboard object represents the current state of the keyboard. There is always one and only Keyboard object available. It's accessible via the Game.Keyboard attribute. For the convenience the templates automatically store the keyboard object in a global variable named &lt;b&gt;Keboard&lt;/b&gt;.</Description>
      <Method Global="False" Constructor="False">
        <Description>Queries whether a specified key is pressed.</Description>
        <Remarks>The available key names are defined as constants in the "scripts\keys.inc" file</Remarks>
        <Signature>IsKeyDown(Key)</Signature>
        <Parameter Optional="False">
          <Name>Key</Name>
          <Description>The key to be querried (either a string, such as "A", or a numeric constant)</Description>
        </Parameter>
      </Method>
      <Attribute Global="False" ReadOnly="True">
        <Name>Type</Name>
        <Description>Returns always "keyboard"</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Key</Name>
        <Description>Returns a string with the name of the pressed key (if the key is a printable character)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Printable</Name>
        <Description>Returns &lt;b&gt;true&lt;/b&gt; if the pressed key is a printable character</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>KeyCode</Name>
        <Description>Returns a numeric code of a pressed key.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>IsShift</Name>
        <Description>Returns &lt;b&gt;true&lt;/b&gt; if the SHIFT key has been hold down when the key was pressed</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>IsAlt</Name>
        <Description>Returns &lt;b&gt;true&lt;/b&gt; if the ALT key has been hold down when the key was pressed</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>IsControl</Name>
        <Description>Returns &lt;b&gt;true&lt;/b&gt; if the CONTROL key has been hold down when the key was pressed</Description>
      </Attribute>
    </ScriptObject>
    <ScriptObject>
      <BaseFilename>scripting_ref_item</BaseFilename>
      <Name>Item object</Name>
      <Description>The Item object allows you to access the properties of your inventory items. Items objects are created at game startup or using the Game.CreateItem method. Existing items can be queried using the Game.GetItem method.</Description>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Sets the default sprite.</Description>
        <Signature>SetSprite(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the sprite file to be used as a default sprite.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Sets the hover sprite.</Description>
        <Remarks>The hover sprite is displayed if the player moves mouse pointer above the inventory item.</Remarks>
        <Signature>SetHoverSprite(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the sprite file to be used as a hover sprite.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Sets the talk sprite.</Description>
        <Signature>SetTalkSprite(Filename, Extended)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the sprite file to be used as a talk sprite.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Extended</Name>
          <Description>Should this sprite be used for explicit talk stances only (optional, default=false).</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Adds a talk sprite.</Description>
        <Signature>AddTalkSprite(Filename, Extended)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the sprite file to be added to the list of talk sprites.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Extended</Name>
          <Description>Should this sprite be used for explicit talk stances only (optional, default=false).</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Removes a sprite from the list of talk sprites.</Description>
        <Signature>RemoveTalkSprite(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the sprite file to be removed.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Queries a default sprite of this item.</Description>
        <Signature>GetSprite()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Queries a hover sprite of this item.</Description>
        <Signature>GetHoverSprite()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Queries a default sprite of this item.</Description>
        <Signature>GetSpriteObject()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Queries a hover sprite of this item.</Description>
        <Signature>GetHoverSpriteObject()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Cancels the action the object was currently performing (like talking, walking etc.).</Description>
        <Signature>Reset()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Queries whether the object is currently talking.</Description>
        <Signature>IsTalking()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Cancels object's talking.</Description>
        <Remarks>You can also use StopTalk() abbreviation.</Remarks>
        <Signature>StopTalking()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Makes the object talk.</Description>
        <Remarks>Talk method blocks the script execution until the animation is over, while the TalkAsync method returns immediately. If the duration is set to zero, it's calculated automatically either from the sound file or from the length of the subtitle.</Remarks>
        <Signature>Talk(Text, SoundFilename, Duration, TalkStances, TextAlignment)</Signature>
        <Signature>TalkAsync(Text, SoundFilename, Duration, TalkStances, TextAlignment)</Signature>
        <Parameter Optional="False">
          <Name>Text</Name>
          <Description>A text to be used as a talk subtitle</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>SoundFilename</Name>
          <Description>A filename of a sound file to be used (oprtional, default is no sound)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Duration</Name>
          <Description>A subtitle duration in milliseconds (optional, default is 0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>TalkStances</Name>
          <Description>A comma separated list of talk "stances" to be used for the talking (optional, default is random stances)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>TextAlignment</Name>
          <Description>A text alignment for the subtitle (0-left, 1-right, 2-center) (optional, default=2)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Forces this actor/entity to act like it's inside a given region</Description>
        <Remarks>Use this method to "lock" a z-order value of an actor or an entity.</Remarks>
        <Signature>StickToRegion(Region)</Signature>
        <Signature>StickToRegion(RegionName)</Signature>
        <Parameter Optional="False">
          <Name>Region</Name>
          <Description>Reference to a scene region object</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>RegionName</Name>
          <Description>Name of a scene region</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Sets font of this object.</Description>
        <Signature>SetFont(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The name of the font to be set.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Gets a font assigned to this object.</Description>
        <Signature>GetFont()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Plays an animation.</Description>
        <Remarks>The PlayAnim method blocks the script execution until the animation is over, while the PlayAnimAsync method returns immediately.</Remarks>
        <Signature>PlayAnim(Filename)</Signature>
        <Signature>PlayAnimAsync(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>A filename of a sprite file to be played</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Force a special animation to be used for a subsequent Talk call.</Description>
        <Remarks>This setting has only effect on one subsequent Talk() method call. After the talking is over, the talking animation is reset back to default.</Remarks>
        <Signature>ForceTalkAnim(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>A filename of the sprite file to be used as a talking animation</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Sets the standard cursor.</Description>
        <Signature>SetCursor(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>Filename of a sprite file to be used as a cursor pointer.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Returns the filename of the cursor sprite (or null if no cursor is set)</Description>
        <Signature>GetCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Returns a reference to the cursor sprite (or null if no cursor is set)</Description>
        <Signature>GetCursorObject()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Removes the standard cursor.</Description>
        <Signature>RemoveCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Queries whether the standard cursor is set.</Description>
        <Signature>HasCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Sets the normal cursor.</Description>
        <Signature>SetNormalCursor(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>Filename of a sprite file to be used as a cursor pointer.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Returns the filename of the cursor sprite (or null if no cursor is set)</Description>
        <Signature>GetNormalCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Returns a reference to the cursor sprite (or null if no cursor is set)</Description>
        <Signature>GetNormalCursorObject()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Sets the hover cursor.</Description>
        <Signature>SetHoverCursor(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>Filename of a sprite file to be used as a cursor pointer.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Returns the filename of the cursor sprite (or null if no cursor is set)</Description>
        <Signature>GetHoverCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Returns a reference to the cursor sprite (or null if no cursor is set)</Description>
        <Signature>GetHoverCursorObject()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Executes a script file and attaches it to the object.</Description>
        <Remarks>Each WME object can have multiple scripts attached.</Remarks>
        <Signature>AttachScript(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the script file to be executed.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Terminates a specified script file and detaches it from an object.</Description>
        <Signature>DetachScript(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the (running) script to be terminated and detached.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Queries whether a specified script file is running and attached to an object.</Description>
        <Signature>IsScriptRunning(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the script to be queried.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Queries whether the object supports a method of a specified name.</Description>
        <Signature>CanHandleMethod(MethodName)</Signature>
        <Parameter Optional="False">
          <Name>MethodName</Name>
          <Description>The name of the method to be checked.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Plays a sound. If the filename is omitted, the currently assigned sound is played (if any).</Description>
        <Signature>PlaySound(Filename, Looping, LoopStart)</Signature>
        <Signature>PlaySound(Looping, LoopStart)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the sound file to be played</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Looping</Name>
          <Description>Whether the sound should be looped (optional, default = false).</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>LoopStart</Name>
          <Description>The point from which the sound restarts when looping, in milliseconds (optional, default=0).</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Plays a sound and triggers an event when the sound is over. If the filename is omitted, the currently assigned sound is played (if any).</Description>
        <Signature>PlaySoundEvent(Filename, EventName)</Signature>
        <Signature>PlaySoundEvent(EventName)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the sound file to be played</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>EventName</Name>
          <Description>The name of the event to be triggered after the sound finishes.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Stops the currently playing sound (if any).</Description>
        <Signature>StopSound()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Pauses the currently playing sound.</Description>
        <Signature>PauseSound()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Resumes a paused sound playback.</Description>
        <Signature>ResumeSound()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Queries whether a sound playback is in progress.</Description>
        <Signature>IsSoundPlaying()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Sets the sound's current playing position.</Description>
        <Signature>SetSoundPosition(Time)</Signature>
        <Parameter Optional="False">
          <Name>Time</Name>
          <Description>A new playing position (in milliseconds)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Queries the sound's current playing position</Description>
        <Signature>GetSoundPosition()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Sets a volume of the currently playing sound.</Description>
        <Signature>SetSoundVolume(Volume)</Signature>
        <Parameter Optional="False">
          <Name>Volume</Name>
          <Description>A new sound volume (in percent).</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Gets a volume of the currently playing sound.</Description>
        <Signature>GetSoundVolume()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Initializes a sound from file and makes it ready to be played.</Description>
        <Remarks>Use this method to pre-cache a sound file. Initializing the sound takes some time and sometimes it's desirable to move all sound initialization to e.g. scene start so that the subsequent PlaySound calls don't slow the game down. That's what LoadSound is for. To play the pre-cached sound simply call PlaySound without specifying a filename, for example SomeObject.PlaySound(false);</Remarks>
        <Signature>LoadSound(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The sound file to be loaded</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound effects functions</Group>
        <Description>Removes any sound effect currently assigned to this object.</Description>
        <Signature>SoundFXNone()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound effects functions</Group>
        <Description>Assigns an echo effect to the sounds played by this object.</Description>
        <Remarks>Example: &lt;b&gt;actor.SoundFXEcho(50, 50);&lt;/b&gt;</Remarks>
        <Signature>SoundFXEcho(WetDryMix, Feedback, LeftDelay, RightDelay)</Signature>
        <Parameter Optional="False">
          <Name>WetDryMix</Name>
          <Description>Wet/Dry Mix, in percent (0 to 100)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Feedback</Name>
          <Description>Feedback, in percent (0 to 100)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>LeftDelay</Name>
          <Description>Left delay, in milliseconds (1 to 2000)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>RightDelay</Name>
          <Description>Right delay, in milliseconds (1 to 2000)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound effects functions</Group>
        <Description>Assigns a reverb effect to the sounds played by this object.</Description>
        <Remarks>Example: &lt;b&gt;actor.SoundFXReverb(0, 0, 2000);&lt;/b&gt;</Remarks>
        <Signature>SoundFXReverb(InGain, ReverbMix, ReverbTime, HighFreqRTRatio)</Signature>
        <Parameter Optional="False">
          <Name>InGain</Name>
          <Description>In gain, in dB (-96 to 0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ReverbMix</Name>
          <Description>Reverb mix, in dB (-96 to 0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ReverbTime</Name>
          <Description>Reverb time, in milliseconds (0.001 to 3000)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>HighFreqRTRatio</Name>
          <Description>HighFreq RT Ratio (0.001 to 0.999)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Event functions</Group>
        <Description>Applies a named event to the object.</Description>
        <Signature>ApplyEvent(EventName)</Signature>
        <Parameter Optional="False">
          <Name>EventName</Name>
          <Description>A name of the event to be applied to the object.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Event functions</Group>
        <Description>Queries whether the object has an event handler for a specified event.</Description>
        <Signature>CanHandleEvent(EventName)</Signature>
        <Parameter Optional="False">
          <Name>EventName</Name>
          <Description>The name of the event to be checked.</Description>
        </Parameter>
      </Method>
      <Attribute Global="False" ReadOnly="True">
        <Name>Type</Name>
        <Description>Returns always "item"</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>DisplayAmount</Name>
        <Description>Specifies whether the item should display current amount.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Amount</Name>
        <Description>Current amount (integer).</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>AmountOffsetX</Name>
        <Description>The X offset of the amount label, relative to item position on screen.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>AmountOffsetY</Name>
        <Description>The Y offset of the amount label, relative to item position on screen.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>AmountAlign</Name>
        <Description>Specifies the text alignment of the amount label (TAL_LEFT, TAL_RIGHT or TAL_CENTER).</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>CursorCombined</Name>
        <Description>Specifies if the items displays together with default game cursor when selected.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>AmountString</Name>
        <Description>A string label to be displayed beside the item (set to null to reset the default behavior).</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Active</Name>
        <Description>Specifies whether the object is visible on screen</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>IgnoreItems</Name>
        <Description>Specifies whether the object appears to be non-interactive when an inventory item is used on it</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SubtitlesPosRelative</Name>
        <Description>Specifies whether the &lt;b&gt;SubtitlesPosX&lt;/b&gt; and &lt;b&gt;SubtitlesPosY&lt;/b&gt; attributes are relative to default position, or absolute screen coordinates</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SubtitlesPosX</Name>
        <Description>The X position of speech subtitles (either relative to speaker's position or absolute screen coordinates)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SubtitlesPosY</Name>
        <Description>The Y position of speech subtitles (either relative to speaker's position or absolute screen coordinates)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SubtitlesWidth</Name>
        <Description>Width of speech subtitles. Set to zero to restore the default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SubtitlesPosXCenter</Name>
        <Description>Specifies if the &lt;b&gt;SubtitlesPosX&lt;/b&gt; attribute affects the center of the subtitle or its left side.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Name</Name>
        <Description>The internal name of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Caption</Name>
        <Description>The caption of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>X</Name>
        <Description>The X position of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Y</Name>
        <Description>The Y position of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Height</Name>
        <Description>Returns the current height of the object. In case of actors and entities the scaling is taken into account.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Filename</Name>
        <Description>Returns the filename.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Ready</Name>
        <Description>Returns whether the object isn't currently performing any action.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Interactive</Name>
        <Description>Specifies whether the object recieves user input.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SoundPanning</Name>
        <Description>Specifies whether the sounds played by this object are automatically panned depending on object's position on screen.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>NonIntMouseEvents</Name>
        <Description>Specifies if the object can receive the &lt;b&gt;MouseEntry&lt;/b&gt; and &lt;b&gt;MouseLeave&lt;/b&gt; events even if the game is in non-interactive mode.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Movable</Name>
        <Description>Specifies whether the object can be moved by its sprites (in case the sprite frames have a "move" property set).</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Scalable</Name>
        <Description>Specifies whether the object is affected by scene's scaling levels.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Rotatable</Name>
        <Description>Specifies whether the object is affected by scene's rotation levels.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Colorable</Name>
        <Description>Specifies whether the object is affected by scene's color regions.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>AlphaColor</Name>
        <Description>Specifies an RGBA color of this object (overrides scene coloring); set to 0 to reset default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Scale</Name>
        <Description>Specifies a scale of this object (overrides scene scaling); set to null to reset default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>ScaleX</Name>
        <Description>Specifies horizontal scale of this object; set to null to reset default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>ScaleY</Name>
        <Description>Specifies vertical scale of this object; set to null to reset default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>RelativeScale</Name>
        <Description>Specifies a scale amount to be added to the default scene scale.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Rotate</Name>
        <Description>Specifies rotation of this object (in degrees); overrides scene rotation; set to null to reset default behavior; not available in compatibility mode</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>RelativeRotate</Name>
        <Description>Specifies a rotation amount to be added to the default scene rotation.</Description>
      </Attribute>
      <Event>
        <Name>MouseEntry</Name>
        <Description>The mouse pointer has been just moved over the object.</Description>
      </Event>
      <Event>
        <Name>MouseLeave</Name>
        <Description>The mouse pointer has been just moved away from the object.</Description>
      </Event>
    </ScriptObject>
    <ScriptObject>
      <BaseFilename>scripting_ref_sprite</BaseFilename>
      <Name>Sprite object</Name>
      <Description>The Sprite object allows you to access the properties of your animations. Sprite objects can be queried using the &lt;b&gt;GetSpriteObject&lt;/b&gt; methods of various objects and their equivalents.</Description>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Returns one animation frame.</Description>
        <Signature>GetFrame(Index)</Signature>
        <Parameter Optional="False">
          <Name>Index</Name>
          <Description>A zero-based index of the frame to be returned.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Adds a new frame to the animation.</Description>
        <Signature>AddFrame(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>An image file to be used for this frame.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Inserts a new frame to the animation.</Description>
        <Signature>InsertFrame(Index, Filename)</Signature>
        <Parameter Optional="False">
          <Name>Index</Name>
          <Description>The position where the new frame should be inserted.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>An image file to be used for this frame.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Removes specified animation frame.</Description>
        <Signature>DeleteFrame(Index)</Signature>
        <Signature>DeleteFrame(Frame)</Signature>
        <Parameter Optional="False">
          <Name>Index</Name>
          <Description>A zero-based index of a frame to be removed.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Frame</Name>
          <Description>The frame object to be removed.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Resets the animation.</Description>
        <Signature>Reset()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Pauses the animation.</Description>
        <Signature>Pause()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Resumes a paused animation.</Description>
        <Signature>Play()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Executes a script file and attaches it to the object.</Description>
        <Remarks>Each WME object can have multiple scripts attached.</Remarks>
        <Signature>AttachScript(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the script file to be executed.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Terminates a specified script file and detaches it from an object.</Description>
        <Signature>DetachScript(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the (running) script to be terminated and detached.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Queries whether a specified script file is running and attached to an object.</Description>
        <Signature>IsScriptRunning(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the script to be queried.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Queries whether the object supports a method of a specified name.</Description>
        <Signature>CanHandleMethod(MethodName)</Signature>
        <Parameter Optional="False">
          <Name>MethodName</Name>
          <Description>The name of the method to be checked.</Description>
        </Parameter>
      </Method>
      <Attribute Global="False" ReadOnly="True">
        <Name>Type</Name>
        <Description>Returns always "sprite"</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Name</Name>
        <Description>The internal name of the sprite.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Filename</Name>
        <Description>Returns the filename.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>NumFrames</Name>
        <Description>Returns the actual number of animation frames.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>CurrentFrame</Name>
        <Description>Specifies the index of the currently playing animation frame.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>PixelPerfect</Name>
        <Description>Specifies if this sprite uses pixel-perfect mouse-over detection.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Looping</Name>
        <Description>Specifies if this is a looping animation.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Owner</Name>
        <Description>Returns an object which owns this animation.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Finished</Name>
        <Description>Returns &lt;b&gt;true&lt;/b&gt; if the animation already finished playing.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Paused</Name>
        <Description>Returns &lt;b&gt;true&lt;/b&gt; if the animation is paused.</Description>
      </Attribute>
      <Event>
        <Name>FrameChanged</Name>
        <Description>The sprite just switched to the next frame.</Description>
      </Event>
    </ScriptObject>
    <ScriptObject>
      <BaseFilename>scripting_ref_frame</BaseFilename>
      <Name>Frame object</Name>
      <Description>The Frame object allows you to access the properties of your animation frame. Frame objects can be queried using the &lt;b&gt;Sprite.GetFrame&lt;/b&gt; and &lt;b&gt;Sprite.AddFrame&lt;/b&gt; methods.&lt;br&gt;&lt;br&gt;
&lt;b&gt;Note:&lt;/b&gt; If there is only one subframe, all the subframe methods and attributes also apply to a frame object.</Description>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Returns the sound assigned to this frame.</Description>
        <Signature>GetSound()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Assigns a sound to this frame.</Description>
        <Signature>SetSound(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the sound to be assigned.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Returns a subframe of this frame.</Description>
        <Signature>GetSubframe(Index)</Signature>
        <Parameter Optional="False">
          <Name>Index</Name>
          <Description>A zero-based index of the subframe to be returned.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Adds a new subframe to this animation frame.</Description>
        <Signature>AddSubframe(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>An image file to be used for this subframe.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Inserts a new subframe to this animation frame.</Description>
        <Signature>InsertSubframe(Index, Filename)</Signature>
        <Parameter Optional="False">
          <Name>Index</Name>
          <Description>The position where the new subframe should be inserted.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>An image file to be used for this subframe.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Removes specified subframe from this animation frame.</Description>
        <Signature>Deletesubframe(Index)</Signature>
        <Signature>Deletesubframe(Subframe)</Signature>
        <Parameter Optional="False">
          <Name>Index</Name>
          <Description>A zero-based index of a subframe to be removed.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Subframe</Name>
          <Description>The subframe object to be removed.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Returns an event assigned to this frame.</Description>
        <Signature>GetEvent(Index)</Signature>
        <Parameter Optional="False">
          <Name>Index</Name>
          <Description>A zero-based index of an event to be returned.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Adds an event to this frame.</Description>
        <Signature>AddEvent(EventName)</Signature>
        <Parameter Optional="False">
          <Name>EventName</Name>
          <Description>A name of the event to be added.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Removes an event from this frame.</Description>
        <Signature>DeleteEvent(EventName)</Signature>
        <Parameter Optional="False">
          <Name>EventName</Name>
          <Description>A name of the event to be removed.</Description>
        </Parameter>
      </Method>
      <Attribute Global="False" ReadOnly="True">
        <Name>Type</Name>
        <Description>Returns always "frame"</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Delay</Name>
        <Description>The delay of this frame (in milliseconds)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Keyframe</Name>
        <Description>Specifies if this frame is a keyframe (not used).</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>KillSounds</Name>
        <Description>Specifies if this frame should stop all currently playing sounds started by this sprite.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>MoveX</Name>
        <Description>Specifies the X movement applied to the owner object by this frame.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>MoveY</Name>
        <Description>Specifies the Y movement applied to the owner object by this frame.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>NumSubframes</Name>
        <Description>Returns the actual number of subframes if this frame.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>NumEvents</Name>
        <Description>Returns the number of events assigned to this frame.</Description>
      </Attribute>
    </ScriptObject>
    <ScriptObject>
      <BaseFilename>scripting_ref_subframe</BaseFilename>
      <Name>Subframe object</Name>
      <Description>The Subframe object allows you to access the properties of the animation subframes. Subframe objects can be queried using the &lt;b&gt;Frame.GetSubframe&lt;/b&gt; and &lt;b&gt;Frame.Addsubframe&lt;/b&gt; methods. Also if there is only one subframe assigned to an animation frame all these methods and attributes apply directly to the frame.</Description>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Returns the sound assigned to this frame.</Description>
        <Signature>GetSound()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Assigns a sound to this frame.</Description>
        <Signature>SetSound(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the sound to be assigned.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Returns a subframe of this frame.</Description>
        <Signature>GetSubframe(Index)</Signature>
        <Parameter Optional="False">
          <Name>Index</Name>
          <Description>A zero-based index of the subframe to be returned.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Adds a new subframe to this animation frame.</Description>
        <Signature>AddSubframe(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>An image file to be used for this subframe.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Inserts a new subframe to this animation frame.</Description>
        <Signature>InsertSubframe(Index, Filename)</Signature>
        <Parameter Optional="False">
          <Name>Index</Name>
          <Description>The position where the new subframe should be inserted.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>An image file to be used for this subframe.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Removes specified subframe from this animation frame.</Description>
        <Signature>Deletesubframe(Index)</Signature>
        <Signature>Deletesubframe(Subframe)</Signature>
        <Parameter Optional="False">
          <Name>Index</Name>
          <Description>A zero-based index of a subframe to be removed.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Subframe</Name>
          <Description>The subframe object to be removed.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Returns an event assigned to this frame.</Description>
        <Signature>GetEvent(Index)</Signature>
        <Parameter Optional="False">
          <Name>Index</Name>
          <Description>A zero-based index of an event to be returned.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Adds an event to this frame.</Description>
        <Signature>AddEvent(EventName)</Signature>
        <Parameter Optional="False">
          <Name>EventName</Name>
          <Description>A name of the event to be added.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Removes an event from this frame.</Description>
        <Signature>DeleteEvent(EventName)</Signature>
        <Parameter Optional="False">
          <Name>EventName</Name>
          <Description>A name of the event to be removed.</Description>
        </Parameter>
      </Method>
      <Attribute Global="False" ReadOnly="True">
        <Name>Type</Name>
        <Description>Returns always "subframe"</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>AlphaColor</Name>
        <Description>Specifies an RGBA color of this subframe.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>TransparentColor</Name>
        <Description>Returns the transparent color of this subframe.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Is2DOnly</Name>
        <Description>Specifies if this frame is only displayed when the game is running in non-accelerated mode.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Is3DOnly</Name>
        <Description>Specifies if this frame is only displayed when the game is running in accelerated mode.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Decoration</Name>
        <Description>Specifies if this is the decoration subrame (i.e. it's not active under mouse cursor)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>HotspotX</Name>
        <Description>The X coordinate of the hotspot (the point the sprite is painted from)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>HotspotY</Name>
        <Description>The Y coordinate of the hotspot (the point the sprite is painted from)</Description>
      </Attribute>
    </ScriptObject>
    <ScriptObject>
      <BaseFilename>scripting_ref_actor3d</BaseFilename>
      <Name>3D actor object</Name>
      <Description>The 3D actor object allows you to access the properties of your 3D actors. 3D actor objects are created by loading an actor definition file using the Game.LoadActor3D or Scene.LoadActor3D methods.</Description>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Makes the actor walk to a given point.</Description>
        <Remarks>The GoTo method blocks the script execution until the walking is over, while the GoToAsync method returns immediately.</Remarks>
        <Signature>GoTo(X, Y)</Signature>
        <Signature>GoToAsync(X, Y)</Signature>
        <Parameter Optional="False">
          <Name>X</Name>
          <Description>The X coordinate of the target walking point</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Y</Name>
          <Description>The Y coordinate of the target walking point</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Makes the actor walk to a specified entity.</Description>
        <Remarks>This method utilizes the WalkToX, WalkToY and WalkToDirection properties of the target entity. They can be set directly in SceneEdit.</Remarks>
        <Signature>GoToObject(Entity)</Signature>
        <Signature>GoToObjectAsync(Entity)</Signature>
        <Parameter Optional="False">
          <Name>Entity</Name>
          <Description>The entity object the actor should walk and turn to</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Makes actor turn to the given direction or to a given object.</Description>
        <Remarks>The TurnTo method blocks the script execution until the turning is over, while the TurnToAsync method returns immediately. The direction can be one of the following constants: DI_UP, DI_UPRIGHT, DI_RIGHT, DI_DOWNRIGHT, DI_DOWN, DI_DOWNLEFT, DI_LEFT or DI_UPLEFT (those equal to numbers 0 to 7).</Remarks>
        <Signature>TurnTo(Direction)</Signature>
        <Signature>TurnTo(Object)</Signature>
        <Signature>TurnToAsync(Direction)</Signature>
        <Signature>TurnToAsync(Object)</Signature>
        <Parameter Optional="False">
          <Name>Direction</Name>
          <Description>The direction to turn to</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Object</Name>
          <Description>The object to turn to</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Makes actor turn to the given angle.</Description>
        <Remarks>The TurnToAngle method blocks the script execution until the turning is over, while the TurnToAngleAsync method returns immediately.</Remarks>
        <Signature>TurnToAngle(Angle)</Signature>
        <Signature>TurnToAngleAsync(Angle)</Signature>
        <Parameter Optional="False">
          <Name>Angle</Name>
          <Description>The angle to turn to, in degrees</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Queries whether the actor is currently walking.</Description>
        <Signature>IsWalking()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Plays an animation.</Description>
        <Remarks>The PlayAnim method blocks the script execution until the animation is over, while the PlayAnimAsync method returns immediately. &lt;b&gt;PlayAnim&lt;/b&gt; is equivalent to &lt;b&gt;PlayAnimChannel&lt;/b&gt; with channel set to zero.</Remarks>
        <Signature>PlayAnim(AnimName)</Signature>
        <Signature>PlayAnimAsync(AnimName)</Signature>
        <Parameter Optional="False">
          <Name>AnimName</Name>
          <Description>The name of the animation sequence to be played</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Plays an animation in a specified channel.</Description>
        <Remarks>The PlayAnimChannel method blocks the script execution until the animation is over, while the PlayAnimChannelAsync method returns immediately.</Remarks>
        <Signature>PlayAnimChannel(Channel, AnimName)</Signature>
        <Signature>PlayAnimChannelAsync(Channel, AnimName)</Signature>
        <Parameter Optional="False">
          <Name>Channel</Name>
          <Description>The channel to be used by this animation (0 - 9)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>AnimName</Name>
          <Description>The name of the animation sequence to be played</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Stops a currently playing animation.</Description>
        <Signature>StopAnim()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Stops a currently playing animation in the specified channel.</Description>
        <Signature>StopAnimChannel(Channel)</Signature>
        <Parameter Optional="False">
          <Name>Channel</Name>
          <Description>The channel in which the animation should be stopped (0 - 9)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Actions</Group>
        <Description>Moves the actor to a specified point in 3D space</Description>
        <Signature>SkipTo3D(X, Y, Z)</Signature>
        <Parameter Optional="False">
          <Name>X</Name>
          <Description>The X coordinate</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Y</Name>
          <Description>The Y coordinate</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Z</Name>
          <Description>The Z coordinate</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Direct control</Group>
        <Description>Makes the character walk forward.</Description>
        <Signature>DirectWalk(Velocity, Animation)</Signature>
        <Parameter Optional="False">
          <Name>Velocity</Name>
          <Description>The walking velocity to be used (optional, defaults to standard velocity)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Animation</Name>
          <Description>The animation to be used (optional, defaults to standard animation)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Direct control</Group>
        <Description>Makes the character walk backwards.</Description>
        <Signature>DirectWalkBack(Velocity, Animation)</Signature>
        <Parameter Optional="False">
          <Name>Velocity</Name>
          <Description>The walking velocity to be used (optional, defaults to standard velocity)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Animation</Name>
          <Description>The animation to be used (optional, defaults to standard animation)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Direct control</Group>
        <Description>Stops character from walking.</Description>
        <Signature>DirectWalkStop()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Direct control</Group>
        <Description>Makes the character turn counter-clockwise.</Description>
        <Signature>DirectTurnLeft(Velocity, Animation)</Signature>
        <Parameter Optional="False">
          <Name>Velocity</Name>
          <Description>The turning velocity to be used (optional, defaults to standard velocity)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Animation</Name>
          <Description>The animation to be used (optional, defaults to standard animation)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Direct control</Group>
        <Description>Makes the character turn clockwise.</Description>
        <Signature>DirectTurnRight(Velocity, Animation)</Signature>
        <Parameter Optional="False">
          <Name>Velocity</Name>
          <Description>The turning velocity to be used (optional, defaults to standard velocity)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Animation</Name>
          <Description>The animation to be used (optional, defaults to standard animation)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Direct control</Group>
        <Description>Stops character from turning.</Description>
        <Signature>DirectTurnStop()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Shadow related functions</Group>
        <Description>Sets and image to be used as a simple shadow for this actor</Description>
        <Signature>SetShadowImage(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of an image to be used</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Shadow related functions</Group>
        <Description>Gets the currently assigned image to be used as a simple shadow for this actor</Description>
        <Signature>GetShadowImage()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Shadow related functions</Group>
        <Description>Sets the position of a light to project a real-time shadow</Description>
        <Remarks>The light position is relative to actor's position.</Remarks>
        <Signature>SetLightPosition(X, Y, Z)</Signature>
        <Parameter Optional="False">
          <Name>X</Name>
          <Description>The X coordinate of the light</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Y</Name>
          <Description>The Y coordinate of the light</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Z</Name>
          <Description>The Z coordinate of the light</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Mesh related functions</Group>
        <Description>Hides a specified part (mesh) of this actor</Description>
        <Signature>HideMesh(MeshName)</Signature>
        <Parameter Optional="False">
          <Name>MeshName</Name>
          <Description>The mesh to be hidden</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Mesh related functions</Group>
        <Description>Shows a specified part (mesh) of this actor</Description>
        <Signature>ShowMesh(MeshName)</Signature>
        <Parameter Optional="False">
          <Name>MeshName</Name>
          <Description>The mesh to be shown</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Mesh related functions</Group>
        <Description>Load a new model from a file and attaches it to a specified bone of this actor</Description>
        <Signature>AddMesh(Filename, MeshName, ParentBone)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>Filename of the model file to be loaded (MS3D file)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>MeshName</Name>
          <Description>The name of the mesh to be loaded</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ParentBone</Name>
          <Description>The name of the bone (joint) the loaded mesh will be attached to</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Mesh related functions</Group>
        <Description>Permanently removes a specified mesh from this actor</Description>
        <Signature>RemoveMesh(MeshName)</Signature>
        <Parameter Optional="False">
          <Name>MeshName</Name>
          <Description>The mesh to be removed</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Item functions</Group>
        <Description>Adds an item into the inventory.</Description>
        <Signature>TakeItem(ItemName, InsertAfter)</Signature>
        <Parameter Optional="False">
          <Name>ItemName</Name>
          <Description>A name of the item to be added to object's inventory.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>InsertAfter</Name>
          <Description>A name of the item which the new item should be inserted after (optional).</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Item functions</Group>
        <Description>Removes an item from the inventory.</Description>
        <Signature>DropItem(ItemName)</Signature>
        <Parameter Optional="False">
          <Name>ItemName</Name>
          <Description>A name of the item to be removed from object's inventory.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Item functions</Group>
        <Description>Queries an inventory item.</Description>
        <Signature>GetItem(ItemIndex)</Signature>
        <Signature>GetItem(ItemName)</Signature>
        <Parameter Optional="False">
          <Name>ItemIndex</Name>
          <Description>An index of a &lt;b&gt;taken item&lt;/b&gt; to be queried.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ItemName</Name>
          <Description>A name of an inventory item to be queried.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Item functions</Group>
        <Description>Queries whether a given item is in inventory of any of this object.</Description>
        <Remarks>Note that this method only searches the current object, use the &lt;b&gt;Game.IsItemTaken()&lt;/b&gt; method if you want to search all game objects.</Remarks>
        <Signature>HasItem(ItemName)</Signature>
        <Signature>HasItem(ItemObject)</Signature>
        <Parameter Optional="False">
          <Name>ItemName</Name>
          <Description>A name of the item to be queried.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ItemObject</Name>
          <Description>Reference to the item object to be queried.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Sets the standard cursor.</Description>
        <Signature>SetCursor(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>Filename of a sprite file to be used as a cursor pointer.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Returns the filename of the cursor sprite (or null if no cursor is set)</Description>
        <Signature>GetCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Returns a reference to the cursor sprite (or null if no cursor is set)</Description>
        <Signature>GetCursorObject()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Removes the standard cursor.</Description>
        <Signature>RemoveCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Cursor functions</Group>
        <Description>Queries whether the standard cursor is set.</Description>
        <Signature>HasCursor()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Executes a script file and attaches it to the object.</Description>
        <Remarks>Each WME object can have multiple scripts attached.</Remarks>
        <Signature>AttachScript(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the script file to be executed.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Terminates a specified script file and detaches it from an object.</Description>
        <Signature>DetachScript(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the (running) script to be terminated and detached.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Queries whether a specified script file is running and attached to an object.</Description>
        <Signature>IsScriptRunning(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the script to be queried.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Script functions</Group>
        <Description>Queries whether the object supports a method of a specified name.</Description>
        <Signature>CanHandleMethod(MethodName)</Signature>
        <Parameter Optional="False">
          <Name>MethodName</Name>
          <Description>The name of the method to be checked.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Plays a sound. If the filename is omitted, the currently assigned sound is played (if any).</Description>
        <Signature>PlaySound(Filename, Looping, LoopStart)</Signature>
        <Signature>PlaySound(Looping, LoopStart)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the sound file to be played</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Looping</Name>
          <Description>Whether the sound should be looped (optional, default = false).</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>LoopStart</Name>
          <Description>The point from which the sound restarts when looping, in milliseconds (optional, default=0).</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Plays a sound and triggers an event when the sound is over. If the filename is omitted, the currently assigned sound is played (if any).</Description>
        <Signature>PlaySoundEvent(Filename, EventName)</Signature>
        <Signature>PlaySoundEvent(EventName)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The filename of the sound file to be played</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>EventName</Name>
          <Description>The name of the event to be triggered after the sound finishes.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Stops the currently playing sound (if any).</Description>
        <Signature>StopSound()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Pauses the currently playing sound.</Description>
        <Signature>PauseSound()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Resumes a paused sound playback.</Description>
        <Signature>ResumeSound()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Queries whether a sound playback is in progress.</Description>
        <Signature>IsSoundPlaying()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Sets the sound's current playing position.</Description>
        <Signature>SetSoundPosition(Time)</Signature>
        <Parameter Optional="False">
          <Name>Time</Name>
          <Description>A new playing position (in milliseconds)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Queries the sound's current playing position</Description>
        <Signature>GetSoundPosition()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Sets a volume of the currently playing sound.</Description>
        <Signature>SetSoundVolume(Volume)</Signature>
        <Parameter Optional="False">
          <Name>Volume</Name>
          <Description>A new sound volume (in percent).</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Gets a volume of the currently playing sound.</Description>
        <Signature>GetSoundVolume()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound functions</Group>
        <Description>Initializes a sound from file and makes it ready to be played.</Description>
        <Remarks>Use this method to pre-cache a sound file. Initializing the sound takes some time and sometimes it's desirable to move all sound initialization to e.g. scene start so that the subsequent PlaySound calls don't slow the game down. That's what LoadSound is for. To play the pre-cached sound simply call PlaySound without specifying a filename, for example SomeObject.PlaySound(false);</Remarks>
        <Signature>LoadSound(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The sound file to be loaded</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound effects functions</Group>
        <Description>Removes any sound effect currently assigned to this object.</Description>
        <Signature>SoundFXNone()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound effects functions</Group>
        <Description>Assigns an echo effect to the sounds played by this object.</Description>
        <Remarks>Example: &lt;b&gt;actor.SoundFXEcho(50, 50);&lt;/b&gt;</Remarks>
        <Signature>SoundFXEcho(WetDryMix, Feedback, LeftDelay, RightDelay)</Signature>
        <Parameter Optional="False">
          <Name>WetDryMix</Name>
          <Description>Wet/Dry Mix, in percent (0 to 100)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Feedback</Name>
          <Description>Feedback, in percent (0 to 100)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>LeftDelay</Name>
          <Description>Left delay, in milliseconds (1 to 2000)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>RightDelay</Name>
          <Description>Right delay, in milliseconds (1 to 2000)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Sound effects functions</Group>
        <Description>Assigns a reverb effect to the sounds played by this object.</Description>
        <Remarks>Example: &lt;b&gt;actor.SoundFXReverb(0, 0, 2000);&lt;/b&gt;</Remarks>
        <Signature>SoundFXReverb(InGain, ReverbMix, ReverbTime, HighFreqRTRatio)</Signature>
        <Parameter Optional="False">
          <Name>InGain</Name>
          <Description>In gain, in dB (-96 to 0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ReverbMix</Name>
          <Description>Reverb mix, in dB (-96 to 0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>ReverbTime</Name>
          <Description>Reverb time, in milliseconds (0.001 to 3000)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>HighFreqRTRatio</Name>
          <Description>HighFreq RT Ratio (0.001 to 0.999)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Event functions</Group>
        <Description>Applies a named event to the object.</Description>
        <Signature>ApplyEvent(EventName)</Signature>
        <Parameter Optional="False">
          <Name>EventName</Name>
          <Description>A name of the event to be applied to the object.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Event functions</Group>
        <Description>Queries whether the object has an event handler for a specified event.</Description>
        <Signature>CanHandleEvent(EventName)</Signature>
        <Parameter Optional="False">
          <Name>EventName</Name>
          <Description>The name of the event to be checked.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Cancels the action the object was currently performing (like talking, walking etc.).</Description>
        <Signature>Reset()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Queries whether the object is currently talking.</Description>
        <Signature>IsTalking()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Cancels object's talking.</Description>
        <Remarks>You can also use StopTalk() abbreviation.</Remarks>
        <Signature>StopTalking()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Makes the object talk.</Description>
        <Remarks>Talk method blocks the script execution until the animation is over, while the TalkAsync method returns immediately. If the duration is set to zero, it's calculated automatically either from the sound file or from the length of the subtitle.</Remarks>
        <Signature>Talk(Text, SoundFilename, Duration, TalkStances, TextAlignment)</Signature>
        <Signature>TalkAsync(Text, SoundFilename, Duration, TalkStances, TextAlignment)</Signature>
        <Parameter Optional="False">
          <Name>Text</Name>
          <Description>A text to be used as a talk subtitle</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>SoundFilename</Name>
          <Description>A filename of a sound file to be used (oprtional, default is no sound)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Duration</Name>
          <Description>A subtitle duration in milliseconds (optional, default is 0)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>TalkStances</Name>
          <Description>A comma separated list of talk "stances" to be used for the talking (optional, default is random stances)</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>TextAlignment</Name>
          <Description>A text alignment for the subtitle (0-left, 1-right, 2-center) (optional, default=2)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Forces this actor/entity to act like it's inside a given region</Description>
        <Remarks>Use this method to "lock" a z-order value of an actor or an entity.</Remarks>
        <Signature>StickToRegion(Region)</Signature>
        <Signature>StickToRegion(RegionName)</Signature>
        <Parameter Optional="False">
          <Name>Region</Name>
          <Description>Reference to a scene region object</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>RegionName</Name>
          <Description>Name of a scene region</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Sets font of this object.</Description>
        <Signature>SetFont(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The name of the font to be set.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Gets a font assigned to this object.</Description>
        <Signature>GetFont()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Miscelaneous functions</Group>
        <Description>Moves an object to a specified location.</Description>
        <Signature>SkipTo(X, Y)</Signature>
        <Parameter Optional="False">
          <Name>X</Name>
          <Description>Destination X coordinate.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Y</Name>
          <Description>Destination Y coordinate.</Description>
        </Parameter>
      </Method>
      <Attribute Global="False" ReadOnly="True">
        <Name>Type</Name>
        <Description>Returns always "actor3d"</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Direction</Name>
        <Description>The direction the actor is currently facing</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>DirectionAngle</Name>
        <Description>The angle the actor is currently facing, in degrees</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Active</Name>
        <Description>Specifies whether the object is visible on screen</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>IgnoreItems</Name>
        <Description>Specifies whether the object appears to be non-interactive when an inventory item is used on it</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SubtitlesPosRelative</Name>
        <Description>Specifies whether the &lt;b&gt;SubtitlesPosX&lt;/b&gt; and &lt;b&gt;SubtitlesPosY&lt;/b&gt; attributes are relative to default position, or absolute screen coordinates</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SubtitlesPosX</Name>
        <Description>The X position of speech subtitles (either relative to speaker's position or absolute screen coordinates)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SubtitlesPosY</Name>
        <Description>The Y position of speech subtitles (either relative to speaker's position or absolute screen coordinates)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SubtitlesWidth</Name>
        <Description>Width of speech subtitles. Set to zero to restore the default behavior.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SubtitlesPosXCenter</Name>
        <Description>Specifies if the &lt;b&gt;SubtitlesPosX&lt;/b&gt; attribute affects the center of the subtitle or its left side.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Name</Name>
        <Description>The internal name of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Caption</Name>
        <Description>The caption of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>X</Name>
        <Description>The X position of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Y</Name>
        <Description>The Y position of the object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Height</Name>
        <Description>Returns the current height of the object. In case of actors and entities the scaling is taken into account.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Filename</Name>
        <Description>Returns the filename.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Ready</Name>
        <Description>Returns whether the object isn't currently performing any action.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Interactive</Name>
        <Description>Specifies whether the object recieves user input.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SoundPanning</Name>
        <Description>Specifies whether the sounds played by this object are automatically panned depending on object's position on screen.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>NonIntMouseEvents</Name>
        <Description>Specifies if the object can receive the &lt;b&gt;MouseEntry&lt;/b&gt; and &lt;b&gt;MouseLeave&lt;/b&gt; events even if the game is in non-interactive mode.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Scale</Name>
        <Description>The scale of this character in percent. The scale affects both the character model and its shadow.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>PosX</Name>
        <Description>The 3D X coordinate of the actor's current position</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>PosY</Name>
        <Description>The 3D Y coordinate of the actor's current position</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>PosZ</Name>
        <Description>The 3D Z coordinate of the actor's current position</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Velocity</Name>
        <Description>The movement velocity to be used for walking</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>AngularVelocity</Name>
        <Description>The turning velocity to be used for turning</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>Shadow</Name>
        <Description>Specified if this character casts shadow</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>SimpleShadow</Name>
        <Description>Specifies if simple shadow is used instead of real-time one (has no effect if real-time shadows are unsupported)</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>ShadowColor</Name>
        <Description>The RGBA color of the real-time shadow cast by this character</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>TalkAnimName</Name>
        <Description>The name of an animation sequence to be used for talking</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>WalkAnimName</Name>
        <Description>The name of an animation sequence to be used for walking</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>IdleAnimName</Name>
        <Description>The name of an animation sequence to be used for standing still</Description>
      </Attribute>
      <Event>
        <Name>MouseEntry</Name>
        <Description>The mouse pointer has been just moved over the object.</Description>
      </Event>
      <Event>
        <Name>MouseLeave</Name>
        <Description>The mouse pointer has been just moved away from the object.</Description>
      </Event>
    </ScriptObject>
    <ScriptObject>
      <BaseFilename>scripting_ref_directory</BaseFilename>
      <Name>Directory object</Name>
      <Description>The Directory object allows you to access directories on disk. This object is always available in a form of predefined &lt;b&gt;Directory&lt;/b&gt; global variable.
&lt;br&gt;&lt;br&gt;
&lt;table border="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="100%" cellpadding="0" id="AutoNumber4"&gt;
&lt;tr&gt;
&lt;td class="code"&gt;&lt;pre&gt;
// create directory structure
Directory.Create("c:\somedir\otherdir");
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</Description>
      <Method Global="False" Constructor="False">
        <Description>Creates a new directory or directory tree.</Description>
        <Signature>Create(Path)</Signature>
        <Parameter Optional="False">
          <Name>Path</Name>
          <Description>Specifies the path to be created.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Deletes a directory.</Description>
        <Remarks>This method only deletes one directory, not the entire directory tree specified in the Path parameter.</Remarks>
        <Signature>Delete(Path)</Signature>
        <Parameter Optional="False">
          <Name>Path</Name>
          <Description>The directory to be deleted.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns list of files stored in a given directory.</Description>
        <Signature>GetFiles(Path, Mask)</Signature>
        <Parameter Optional="False">
          <Name>Path</Name>
          <Description>The directory to be searched</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Mask</Name>
          <Description>Mask for the filenames to be matched against (optional, default=*.*)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns list of sub-directories stored in a given directory.</Description>
        <Signature>GetDirectories(Path, Mask)</Signature>
        <Parameter Optional="False">
          <Name>Path</Name>
          <Description>The directory to be searched</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Mask</Name>
          <Description>Mask for the sub-directories to be matched against (optional, default=*.*)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Description>Returns list of present disk drives.</Description>
        <Signature>GetDrives()</Signature>
      </Method>
      <Attribute Global="False" ReadOnly="True">
        <Name>Type</Name>
        <Description>Returns always "directory"</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>PathSeparator</Name>
        <Description>Returns the standard path separator character.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="False">
        <Name>CurrentDirectory</Name>
        <Description>Gets or sets the current working directory for an application.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>TempDirectory</Name>
        <Description>Returns Windows temporary directory.</Description>
      </Attribute>
    </ScriptObject>
    <ScriptObject>
      <BaseFilename>scripting_ref_membuffer</BaseFilename>
      <Name>MemBuffer object</Name>
      <Description>The MemBuffer objects allow you to create a reserved memory space which can contain various binary values. MemBuffers are intended to be used in conjunction with external DLL libraries. Using MemBuffers you can define a structure with several values and pass the entire structure to and from a DLL function. The MemBuffer object can be created using the following syntax:
&lt;br&gt;&lt;br&gt;
&lt;table border="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="100%" cellpadding="0" id="AutoNumber4"&gt;
&lt;tr&gt;
&lt;td class="code"&gt;&lt;pre&gt;
var Buffer = new MemBuffer(256); // create a memory buffer 256 bytes large
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</Description>
      <Method Global="False" Constructor="True">
        <Description>Creates a new memory buffer of a specified size.</Description>
        <Signature>MemBuffer(Size)</Signature>
        <Parameter Optional="False">
          <Name>Size</Name>
          <Description>The size of memory to be allocated for this buffer, in bytes</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Operations</Group>
        <Description>Resizes the memory buffer to the desired size.</Description>
        <Remarks>Resizing buffer to zero will free all memory associated with the buffer.</Remarks>
        <Signature>SetSize(Size)</Signature>
        <Parameter Optional="False">
          <Name>Size</Name>
          <Description>Desired buffer size in bytes.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Reading values</Group>
        <Description>Reads a boolean value (1 byte) from memory buffer.</Description>
        <Signature>GetBool(Position)</Signature>
        <Parameter Optional="False">
          <Name>Position</Name>
          <Description>A position within the buffer from which the value is read</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Reading values</Group>
        <Description>Reads an 8-bit integer value from memory buffer.</Description>
        <Signature>GetByte(Position)</Signature>
        <Parameter Optional="False">
          <Name>Position</Name>
          <Description>A position within the buffer from which the value is read</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Reading values</Group>
        <Description>Reads a 16-bit integer value from memory buffer.</Description>
        <Signature>GetShort(Position)</Signature>
        <Parameter Optional="False">
          <Name>Position</Name>
          <Description>A position within the buffer from which the value is read</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Reading values</Group>
        <Description>Reads a 32-bit integer value from memory buffer.</Description>
        <Signature>GetInt(Position)</Signature>
        <Signature>GetLong(Position)</Signature>
        <Parameter Optional="False">
          <Name>Position</Name>
          <Description>A position within the buffer from which the value is read</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Reading values</Group>
        <Description>Reads a 16-bit floating point value from memory buffer.</Description>
        <Signature>GetFloat(Position)</Signature>
        <Parameter Optional="False">
          <Name>Position</Name>
          <Description>A position within the buffer from which the value is read</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Reading values</Group>
        <Description>Reads a 32-bit floating point value from memory buffer.</Description>
        <Signature>GetDouble(Position)</Signature>
        <Parameter Optional="False">
          <Name>Position</Name>
          <Description>A position within the buffer from which the value is read</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Reading values</Group>
        <Description>Reads a string value from memory buffer.</Description>
        <Remarks>If you don't specify the Length parameter the string is read until terminating zero or end of buffer is encountered (whichever comes first).</Remarks>
        <Signature>GetString(Position, Length)</Signature>
        <Parameter Optional="False">
          <Name>Position</Name>
          <Description>A position within the buffer from which the value is read</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Length</Name>
          <Description>Number of characters to read (optional)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Reading values</Group>
        <Description>Reads a 32-bit memory-pointer value from memory buffer.</Description>
        <Remarks>MemBuffer objects created by this method cannot be bound-checked, resized or saved. Be very careful when working with them.</Remarks>
        <Signature>GetPointer(Position)</Signature>
        <Parameter Optional="False">
          <Name>Position</Name>
          <Description>A position within the buffer from which the value is read</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Storing values</Group>
        <Description>Writes a boolean value (1 byte) to a memory buffer.</Description>
        <Signature>SetBool(Position, Value)</Signature>
        <Parameter Optional="False">
          <Name>Position</Name>
          <Description>A position within the buffer to which the value should be written</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Value</Name>
          <Description>The value to be written to the buffer</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Storing values</Group>
        <Description>Writes an 8-bit integer value to a memory buffer.</Description>
        <Signature>SetByte(Position, Value)</Signature>
        <Parameter Optional="False">
          <Name>Position</Name>
          <Description>A position within the buffer to which the value should be written</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Value</Name>
          <Description>The value to be written to the buffer</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Storing values</Group>
        <Description>Writes a 16-bit integer value to a memory buffer.</Description>
        <Signature>SetShort(Position, Value)</Signature>
        <Parameter Optional="False">
          <Name>Position</Name>
          <Description>A position within the buffer to which the value should be written</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Value</Name>
          <Description>The value to be written to the buffer</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Storing values</Group>
        <Description>Writes a 32-bit integer value to a memory buffer.</Description>
        <Signature>SetInt(Position, Value)</Signature>
        <Signature>SetLong(Position, Value)</Signature>
        <Parameter Optional="False">
          <Name>Position</Name>
          <Description>A position within the buffer to which the value should be written</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Value</Name>
          <Description>The value to be written to the buffer</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Storing values</Group>
        <Description>Writes a 16-bit floating point value to a memory buffer.</Description>
        <Signature>SetFloat(Position, Value)</Signature>
        <Parameter Optional="False">
          <Name>Position</Name>
          <Description>A position within the buffer to which the value should be written</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Value</Name>
          <Description>The value to be written to the buffer</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Storing values</Group>
        <Description>Writes a 32-bit floating point value to a memory buffer.</Description>
        <Signature>SetDouble(Position, Value)</Signature>
        <Parameter Optional="False">
          <Name>Position</Name>
          <Description>A position within the buffer to which the value should be written</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Value</Name>
          <Description>The value to be written to the buffer</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Storing values</Group>
        <Description>Writes a string value to a memory buffer.</Description>
        <Remarks>The string is copied to the buffer including its zero terminating character.</Remarks>
        <Signature>SetString(Position, Value)</Signature>
        <Parameter Optional="False">
          <Name>Position</Name>
          <Description>A position within the buffer to which the value should be written</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Value</Name>
          <Description>The value to be written to the buffer</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Storing values</Group>
        <Description>Writes a 32-bit memory pointer to a memory buffer.</Description>
        <Signature>SetPointer(Position, Value)</Signature>
        <Parameter Optional="False">
          <Name>Position</Name>
          <Description>A position within the buffer to which the value should be written</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Value</Name>
          <Description>A MemBuffer object whose address should be written to the buffer</Description>
        </Parameter>
      </Method>
      <Attribute Global="False" ReadOnly="True">
        <Name>Type</Name>
        <Description>Returns always "membuffer"</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Length</Name>
        <Description>Returns the current length of the associated memory space.</Description>
      </Attribute>
    </ScriptObject>
    <ScriptObject>
      <BaseFilename>scripting_ref_file</BaseFilename>
      <Name>File object</Name>
      <Description>The File objects allow you to work with files. You can read from and write to both text and binary files. Reading is also supported from files stored in your game packages (DCP files). The File object can be created using the following syntax:
&lt;br&gt;&lt;br&gt;
&lt;table border="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="100%" cellpadding="0" id="AutoNumber4"&gt;
&lt;tr&gt;
&lt;td class="code"&gt;&lt;pre&gt;
var SomeFile = new File("c:\path\filename.txt");
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</Description>
      <Method Global="False" Constructor="True">
        <Description>Creates a new file object for a specified filename.</Description>
        <Signature>File(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The file this File object should operate on</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Operations</Group>
        <Description>Sets the filename the File object operates on.</Description>
        <Signature>SetFilename(Filename)</Signature>
        <Parameter Optional="False">
          <Name>Filename</Name>
          <Description>The file to be used by this File object</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Operations</Group>
        <Description>Opens file for text reading or writing.</Description>
        <Signature>OpenAsText(AccessMode)</Signature>
        <Parameter Optional="False">
          <Name>AccessMode</Name>
          <Description>Specifies the desired file access, 1 - reading, 2 - writing, 3 - appending</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Operations</Group>
        <Description>Opens file for binary reading or writing.</Description>
        <Signature>OpenAsBinary(AccessMode)</Signature>
        <Parameter Optional="False">
          <Name>AccessMode</Name>
          <Description>Specifies the desired file access, 1 - reading, 2 - writing, 3 - appending</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Operations</Group>
        <Description>Closes the file.</Description>
        <Remarks>Files are closed automatically when their File objects are destroyed but it's a good idea to close the file explicitly immediately after you're done with working with it.</Remarks>
        <Signature>Close()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Operations</Group>
        <Description>Sets a new reading/writing point for a currently open file.</Description>
        <Signature>SetPosition(Position)</Signature>
        <Parameter Optional="False">
          <Name>Position</Name>
          <Description>The desired reading/writing position</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Operations</Group>
        <Description>Deletes the file accosiated with this File object.</Description>
        <Signature>Delete()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Operations</Group>
        <Description>Copies the file to a new location.</Description>
        <Signature>Copy(DestinationFilename, Overwrite)</Signature>
        <Parameter Optional="False">
          <Name>DestinationFilename</Name>
          <Description>The new location to copy the file to.</Description>
        </Parameter>
        <Parameter Optional="False">
          <Name>Overwrite</Name>
          <Description>Specifies if the file should overwrite any existing file with the same name (optional, default=true)</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Text file access</Group>
        <Description>Reads a line from a text file open for reading.</Description>
        <Signature>ReadLine()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Text file access</Group>
        <Description>Reads text from a text file open for reading.</Description>
        <Signature>ReadText(Length)</Signature>
        <Parameter Optional="False">
          <Name>Length</Name>
          <Description>Number of characters to be read from the file.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Text file access</Group>
        <Description>Writes a line to a text file open for writing/appending.</Description>
        <Signature>WriteLine(Line)</Signature>
        <Parameter Optional="False">
          <Name>Line</Name>
          <Description>The text line to be written to the file</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Text file access</Group>
        <Description>Writes text to a text file open for writing/appending.</Description>
        <Signature>WriteText(Text)</Signature>
        <Parameter Optional="False">
          <Name>Text</Name>
          <Description>The text to be written to the file</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Binary file access</Group>
        <Description>Reads a boolean value (1 byte) from a binary file open for reading.</Description>
        <Signature>ReadBool()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Binary file access</Group>
        <Description>Reads an 8-bit integer value from a binary file open for reading.</Description>
        <Signature>ReadByte()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Binary file access</Group>
        <Description>Reads a 16-bit integer value from a binary file open for reading.</Description>
        <Signature>ReadShort()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Binary file access</Group>
        <Description>Reads a 32-bit integer value from a binary file open for reading.</Description>
        <Signature>ReadInt()</Signature>
        <Signature>ReadLong()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Binary file access</Group>
        <Description>Reads a 16-bit floating point value from a binary file open for reading.</Description>
        <Signature>ReadFloat()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Binary file access</Group>
        <Description>Reads a 32-bit floating point value from a binary file open for reading.</Description>
        <Signature>ReadDouble()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Binary file access</Group>
        <Description>Reads a zero-terminated string value from a binary file open for reading.</Description>
        <Signature>ReadString()</Signature>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Binary file access</Group>
        <Description>Writes a boolean value (1 byte) to a binary file open for writing/appending.</Description>
        <Signature>WriteBool(Value)</Signature>
        <Parameter Optional="False">
          <Name>Value</Name>
          <Description>The value to be written to the file.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Binary file access</Group>
        <Description>Writes an 8-bit integer value to a binary file open for writing/appending.</Description>
        <Signature>WriteByte(Value)</Signature>
        <Parameter Optional="False">
          <Name>Value</Name>
          <Description>The value to be written to the file.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Binary file access</Group>
        <Description>Writes a 16-bit integer value to a binary file open for writing/appending.</Description>
        <Signature>WriteShort(Value)</Signature>
        <Parameter Optional="False">
          <Name>Value</Name>
          <Description>The value to be written to the file.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Binary file access</Group>
        <Description>Writes a 32-bit integer value to a binary file open for writing/appending.</Description>
        <Signature>WriteInt(Value)</Signature>
        <Signature>WriteLong(Value)</Signature>
        <Parameter Optional="False">
          <Name>Value</Name>
          <Description>The value to be written to the file.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Binary file access</Group>
        <Description>Writes a 16-bit floating point value to a binary file open for writing/appending.</Description>
        <Signature>WriteFloat(Value)</Signature>
        <Parameter Optional="False">
          <Name>Value</Name>
          <Description>The value to be written to the file.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Binary file access</Group>
        <Description>Writes a 32-bit floating point value to a binary file open for writing/appending.</Description>
        <Signature>WriteDouble(Value)</Signature>
        <Parameter Optional="False">
          <Name>Value</Name>
          <Description>The value to be written to the file.</Description>
        </Parameter>
      </Method>
      <Method Global="False" Constructor="False">
        <Group>Binary file access</Group>
        <Description>Writes a zero-terminated string value to a binary file open for writing/appending.</Description>
        <Signature>WriteString(Value)</Signature>
        <Parameter Optional="False">
          <Name>Value</Name>
          <Description>The value to be written to the file.</Description>
        </Parameter>
      </Method>
      <Attribute Global="False" ReadOnly="True">
        <Name>Type</Name>
        <Description>Returns always "file"</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Filename</Name>
        <Description>Returns the filename currently assigned to this object.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Position</Name>
        <Description>Returns current reading/writing position within the file.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>Length</Name>
        <Description>Returns length of file.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>TextMode</Name>
        <Description>Returns &lt;b&gt;true&lt;/b&gt; if the file is open in text mode.</Description>
      </Attribute>
      <Attribute Global="False" ReadOnly="True">
        <Name>AccessMode</Name>
        <Description>Returns the access mode the file is open in (0 - not open, 1 - reading, 2 - writing, 3 - appending)</Description>
      </Attribute>
    </ScriptObject>
  </ScriptObjects>
</WmeDocs>