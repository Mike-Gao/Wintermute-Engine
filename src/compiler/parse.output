

Terminals which are not used:

   tVOID
   tERROR


Conflict in state 118 between rule 88 and token tAND resolved as reduce.
Conflict in state 118 between rule 88 and token tEQUALS resolved as shift.
Conflict in state 118 between rule 88 and token tGEQUALS resolved as shift.
Conflict in state 118 between rule 88 and token tLEQUALS resolved as shift.
Conflict in state 118 between rule 88 and token tNEQUALS resolved as shift.
Conflict in state 118 between rule 88 and token tOR resolved as reduce.
Conflict in state 118 between rule 88 and token tSTRICTEQUALS resolved as shift.
Conflict in state 118 between rule 88 and token tSTRICTNEQUALS resolved as shift.
Conflict in state 118 between rule 88 and token '<' resolved as shift.
Conflict in state 118 between rule 88 and token '>' resolved as shift.
Conflict in state 118 between rule 88 and token '+' resolved as shift.
Conflict in state 118 between rule 88 and token '-' resolved as shift.
Conflict in state 118 between rule 88 and token '*' resolved as shift.
Conflict in state 118 between rule 88 and token '/' resolved as shift.
Conflict in state 118 between rule 88 and token '%' resolved as shift.
Conflict in state 119 between rule 75 and token tAND resolved as reduce.
Conflict in state 119 between rule 75 and token tEQUALS resolved as reduce.
Conflict in state 119 between rule 75 and token tGEQUALS resolved as reduce.
Conflict in state 119 between rule 75 and token tLEQUALS resolved as reduce.
Conflict in state 119 between rule 75 and token tNEQUALS resolved as reduce.
Conflict in state 119 between rule 75 and token tOR resolved as reduce.
Conflict in state 119 between rule 75 and token tSTRICTEQUALS resolved as reduce.
Conflict in state 119 between rule 75 and token tSTRICTNEQUALS resolved as reduce.
Conflict in state 119 between rule 75 and token '<' resolved as reduce.
Conflict in state 119 between rule 75 and token '>' resolved as reduce.
Conflict in state 119 between rule 75 and token '+' resolved as shift.
Conflict in state 119 between rule 75 and token '-' resolved as shift.
Conflict in state 119 between rule 75 and token '*' resolved as shift.
Conflict in state 119 between rule 75 and token '/' resolved as shift.
Conflict in state 119 between rule 75 and token '%' resolved as shift.
Conflict in state 120 between rule 82 and token tAND resolved as reduce.
Conflict in state 120 between rule 82 and token tEQUALS resolved as reduce.
Conflict in state 120 between rule 82 and token tGEQUALS resolved as reduce.
Conflict in state 120 between rule 82 and token tLEQUALS resolved as reduce.
Conflict in state 120 between rule 82 and token tNEQUALS resolved as reduce.
Conflict in state 120 between rule 82 and token tOR resolved as reduce.
Conflict in state 120 between rule 82 and token tSTRICTEQUALS resolved as reduce.
Conflict in state 120 between rule 82 and token tSTRICTNEQUALS resolved as reduce.
Conflict in state 120 between rule 82 and token '<' resolved as reduce.
Conflict in state 120 between rule 82 and token '>' resolved as reduce.
Conflict in state 120 between rule 82 and token '+' resolved as shift.
Conflict in state 120 between rule 82 and token '-' resolved as shift.
Conflict in state 120 between rule 82 and token '*' resolved as shift.
Conflict in state 120 between rule 82 and token '/' resolved as shift.
Conflict in state 120 between rule 82 and token '%' resolved as shift.
Conflict in state 121 between rule 81 and token tAND resolved as reduce.
Conflict in state 121 between rule 81 and token tEQUALS resolved as reduce.
Conflict in state 121 between rule 81 and token tGEQUALS resolved as reduce.
Conflict in state 121 between rule 81 and token tLEQUALS resolved as reduce.
Conflict in state 121 between rule 81 and token tNEQUALS resolved as reduce.
Conflict in state 121 between rule 81 and token tOR resolved as reduce.
Conflict in state 121 between rule 81 and token tSTRICTEQUALS resolved as reduce.
Conflict in state 121 between rule 81 and token tSTRICTNEQUALS resolved as reduce.
Conflict in state 121 between rule 81 and token '<' resolved as reduce.
Conflict in state 121 between rule 81 and token '>' resolved as reduce.
Conflict in state 121 between rule 81 and token '+' resolved as shift.
Conflict in state 121 between rule 81 and token '-' resolved as shift.
Conflict in state 121 between rule 81 and token '*' resolved as shift.
Conflict in state 121 between rule 81 and token '/' resolved as shift.
Conflict in state 121 between rule 81 and token '%' resolved as shift.
Conflict in state 122 between rule 76 and token tAND resolved as reduce.
Conflict in state 122 between rule 76 and token tEQUALS resolved as reduce.
Conflict in state 122 between rule 76 and token tGEQUALS resolved as reduce.
Conflict in state 122 between rule 76 and token tLEQUALS resolved as reduce.
Conflict in state 122 between rule 76 and token tNEQUALS resolved as reduce.
Conflict in state 122 between rule 76 and token tOR resolved as reduce.
Conflict in state 122 between rule 76 and token tSTRICTEQUALS resolved as reduce.
Conflict in state 122 between rule 76 and token tSTRICTNEQUALS resolved as reduce.
Conflict in state 122 between rule 76 and token '<' resolved as reduce.
Conflict in state 122 between rule 76 and token '>' resolved as reduce.
Conflict in state 122 between rule 76 and token '+' resolved as shift.
Conflict in state 122 between rule 76 and token '-' resolved as shift.
Conflict in state 122 between rule 76 and token '*' resolved as shift.
Conflict in state 122 between rule 76 and token '/' resolved as shift.
Conflict in state 122 between rule 76 and token '%' resolved as shift.
Conflict in state 123 between rule 89 and token tAND resolved as reduce.
Conflict in state 123 between rule 89 and token tEQUALS resolved as shift.
Conflict in state 123 between rule 89 and token tGEQUALS resolved as shift.
Conflict in state 123 between rule 89 and token tLEQUALS resolved as shift.
Conflict in state 123 between rule 89 and token tNEQUALS resolved as shift.
Conflict in state 123 between rule 89 and token tOR resolved as reduce.
Conflict in state 123 between rule 89 and token tSTRICTEQUALS resolved as shift.
Conflict in state 123 between rule 89 and token tSTRICTNEQUALS resolved as shift.
Conflict in state 123 between rule 89 and token '<' resolved as shift.
Conflict in state 123 between rule 89 and token '>' resolved as shift.
Conflict in state 123 between rule 89 and token '+' resolved as shift.
Conflict in state 123 between rule 89 and token '-' resolved as shift.
Conflict in state 123 between rule 89 and token '*' resolved as shift.
Conflict in state 123 between rule 89 and token '/' resolved as shift.
Conflict in state 123 between rule 89 and token '%' resolved as shift.
Conflict in state 124 between rule 77 and token tAND resolved as reduce.
Conflict in state 124 between rule 77 and token tEQUALS resolved as reduce.
Conflict in state 124 between rule 77 and token tGEQUALS resolved as reduce.
Conflict in state 124 between rule 77 and token tLEQUALS resolved as reduce.
Conflict in state 124 between rule 77 and token tNEQUALS resolved as reduce.
Conflict in state 124 between rule 77 and token tOR resolved as reduce.
Conflict in state 124 between rule 77 and token tSTRICTEQUALS resolved as reduce.
Conflict in state 124 between rule 77 and token tSTRICTNEQUALS resolved as reduce.
Conflict in state 124 between rule 77 and token '<' resolved as reduce.
Conflict in state 124 between rule 77 and token '>' resolved as reduce.
Conflict in state 124 between rule 77 and token '+' resolved as shift.
Conflict in state 124 between rule 77 and token '-' resolved as shift.
Conflict in state 124 between rule 77 and token '*' resolved as shift.
Conflict in state 124 between rule 77 and token '/' resolved as shift.
Conflict in state 124 between rule 77 and token '%' resolved as shift.
Conflict in state 125 between rule 78 and token tAND resolved as reduce.
Conflict in state 125 between rule 78 and token tEQUALS resolved as reduce.
Conflict in state 125 between rule 78 and token tGEQUALS resolved as reduce.
Conflict in state 125 between rule 78 and token tLEQUALS resolved as reduce.
Conflict in state 125 between rule 78 and token tNEQUALS resolved as reduce.
Conflict in state 125 between rule 78 and token tOR resolved as reduce.
Conflict in state 125 between rule 78 and token tSTRICTEQUALS resolved as reduce.
Conflict in state 125 between rule 78 and token tSTRICTNEQUALS resolved as reduce.
Conflict in state 125 between rule 78 and token '<' resolved as reduce.
Conflict in state 125 between rule 78 and token '>' resolved as reduce.
Conflict in state 125 between rule 78 and token '+' resolved as shift.
Conflict in state 125 between rule 78 and token '-' resolved as shift.
Conflict in state 125 between rule 78 and token '*' resolved as shift.
Conflict in state 125 between rule 78 and token '/' resolved as shift.
Conflict in state 125 between rule 78 and token '%' resolved as shift.
Conflict in state 126 between rule 79 and token tAND resolved as reduce.
Conflict in state 126 between rule 79 and token tEQUALS resolved as reduce.
Conflict in state 126 between rule 79 and token tGEQUALS resolved as reduce.
Conflict in state 126 between rule 79 and token tLEQUALS resolved as reduce.
Conflict in state 126 between rule 79 and token tNEQUALS resolved as reduce.
Conflict in state 126 between rule 79 and token tOR resolved as reduce.
Conflict in state 126 between rule 79 and token tSTRICTEQUALS resolved as reduce.
Conflict in state 126 between rule 79 and token tSTRICTNEQUALS resolved as reduce.
Conflict in state 126 between rule 79 and token '<' resolved as reduce.
Conflict in state 126 between rule 79 and token '>' resolved as reduce.
Conflict in state 126 between rule 79 and token '+' resolved as shift.
Conflict in state 126 between rule 79 and token '-' resolved as shift.
Conflict in state 126 between rule 79 and token '*' resolved as shift.
Conflict in state 126 between rule 79 and token '/' resolved as shift.
Conflict in state 126 between rule 79 and token '%' resolved as shift.
Conflict in state 127 between rule 80 and token tAND resolved as reduce.
Conflict in state 127 between rule 80 and token tEQUALS resolved as reduce.
Conflict in state 127 between rule 80 and token tGEQUALS resolved as reduce.
Conflict in state 127 between rule 80 and token tLEQUALS resolved as reduce.
Conflict in state 127 between rule 80 and token tNEQUALS resolved as reduce.
Conflict in state 127 between rule 80 and token tOR resolved as reduce.
Conflict in state 127 between rule 80 and token tSTRICTEQUALS resolved as reduce.
Conflict in state 127 between rule 80 and token tSTRICTNEQUALS resolved as reduce.
Conflict in state 127 between rule 80 and token '<' resolved as reduce.
Conflict in state 127 between rule 80 and token '>' resolved as reduce.
Conflict in state 127 between rule 80 and token '+' resolved as shift.
Conflict in state 127 between rule 80 and token '-' resolved as shift.
Conflict in state 127 between rule 80 and token '*' resolved as shift.
Conflict in state 127 between rule 80 and token '/' resolved as shift.
Conflict in state 127 between rule 80 and token '%' resolved as shift.
Conflict in state 128 between rule 83 and token tAND resolved as reduce.
Conflict in state 128 between rule 83 and token tEQUALS resolved as reduce.
Conflict in state 128 between rule 83 and token tGEQUALS resolved as reduce.
Conflict in state 128 between rule 83 and token tLEQUALS resolved as reduce.
Conflict in state 128 between rule 83 and token tNEQUALS resolved as reduce.
Conflict in state 128 between rule 83 and token tOR resolved as reduce.
Conflict in state 128 between rule 83 and token tSTRICTEQUALS resolved as reduce.
Conflict in state 128 between rule 83 and token tSTRICTNEQUALS resolved as reduce.
Conflict in state 128 between rule 83 and token '<' resolved as reduce.
Conflict in state 128 between rule 83 and token '>' resolved as reduce.
Conflict in state 128 between rule 83 and token '+' resolved as reduce.
Conflict in state 128 between rule 83 and token '-' resolved as reduce.
Conflict in state 128 between rule 83 and token '*' resolved as shift.
Conflict in state 128 between rule 83 and token '/' resolved as shift.
Conflict in state 128 between rule 83 and token '%' resolved as shift.
Conflict in state 129 between rule 84 and token tAND resolved as reduce.
Conflict in state 129 between rule 84 and token tEQUALS resolved as reduce.
Conflict in state 129 between rule 84 and token tGEQUALS resolved as reduce.
Conflict in state 129 between rule 84 and token tLEQUALS resolved as reduce.
Conflict in state 129 between rule 84 and token tNEQUALS resolved as reduce.
Conflict in state 129 between rule 84 and token tOR resolved as reduce.
Conflict in state 129 between rule 84 and token tSTRICTEQUALS resolved as reduce.
Conflict in state 129 between rule 84 and token tSTRICTNEQUALS resolved as reduce.
Conflict in state 129 between rule 84 and token '<' resolved as reduce.
Conflict in state 129 between rule 84 and token '>' resolved as reduce.
Conflict in state 129 between rule 84 and token '+' resolved as reduce.
Conflict in state 129 between rule 84 and token '-' resolved as reduce.
Conflict in state 129 between rule 84 and token '*' resolved as shift.
Conflict in state 129 between rule 84 and token '/' resolved as shift.
Conflict in state 129 between rule 84 and token '%' resolved as shift.
Conflict in state 130 between rule 85 and token tAND resolved as reduce.
Conflict in state 130 between rule 85 and token tEQUALS resolved as reduce.
Conflict in state 130 between rule 85 and token tGEQUALS resolved as reduce.
Conflict in state 130 between rule 85 and token tLEQUALS resolved as reduce.
Conflict in state 130 between rule 85 and token tNEQUALS resolved as reduce.
Conflict in state 130 between rule 85 and token tOR resolved as reduce.
Conflict in state 130 between rule 85 and token tSTRICTEQUALS resolved as reduce.
Conflict in state 130 between rule 85 and token tSTRICTNEQUALS resolved as reduce.
Conflict in state 130 between rule 85 and token '<' resolved as reduce.
Conflict in state 130 between rule 85 and token '>' resolved as reduce.
Conflict in state 130 between rule 85 and token '+' resolved as reduce.
Conflict in state 130 between rule 85 and token '-' resolved as reduce.
Conflict in state 130 between rule 85 and token '*' resolved as reduce.
Conflict in state 130 between rule 85 and token '/' resolved as reduce.
Conflict in state 130 between rule 85 and token '%' resolved as shift.
Conflict in state 131 between rule 86 and token tAND resolved as reduce.
Conflict in state 131 between rule 86 and token tEQUALS resolved as reduce.
Conflict in state 131 between rule 86 and token tGEQUALS resolved as reduce.
Conflict in state 131 between rule 86 and token tLEQUALS resolved as reduce.
Conflict in state 131 between rule 86 and token tNEQUALS resolved as reduce.
Conflict in state 131 between rule 86 and token tOR resolved as reduce.
Conflict in state 131 between rule 86 and token tSTRICTEQUALS resolved as reduce.
Conflict in state 131 between rule 86 and token tSTRICTNEQUALS resolved as reduce.
Conflict in state 131 between rule 86 and token '<' resolved as reduce.
Conflict in state 131 between rule 86 and token '>' resolved as reduce.
Conflict in state 131 between rule 86 and token '+' resolved as reduce.
Conflict in state 131 between rule 86 and token '-' resolved as reduce.
Conflict in state 131 between rule 86 and token '*' resolved as reduce.
Conflict in state 131 between rule 86 and token '/' resolved as reduce.
Conflict in state 131 between rule 86 and token '%' resolved as shift.
Conflict in state 132 between rule 87 and token tAND resolved as reduce.
Conflict in state 132 between rule 87 and token tEQUALS resolved as reduce.
Conflict in state 132 between rule 87 and token tGEQUALS resolved as reduce.
Conflict in state 132 between rule 87 and token tLEQUALS resolved as reduce.
Conflict in state 132 between rule 87 and token tNEQUALS resolved as reduce.
Conflict in state 132 between rule 87 and token tOR resolved as reduce.
Conflict in state 132 between rule 87 and token tSTRICTEQUALS resolved as reduce.
Conflict in state 132 between rule 87 and token tSTRICTNEQUALS resolved as reduce.
Conflict in state 132 between rule 87 and token '<' resolved as reduce.
Conflict in state 132 between rule 87 and token '>' resolved as reduce.
Conflict in state 132 between rule 87 and token '+' resolved as reduce.
Conflict in state 132 between rule 87 and token '-' resolved as reduce.
Conflict in state 132 between rule 87 and token '*' resolved as reduce.
Conflict in state 132 between rule 87 and token '/' resolved as reduce.
Conflict in state 132 between rule 87 and token '%' resolved as reduce.
Conflict in state 133 between rule 74 and token tAND resolved as shift.
Conflict in state 133 between rule 74 and token tEQUALS resolved as shift.
Conflict in state 133 between rule 74 and token tGEQUALS resolved as shift.
Conflict in state 133 between rule 74 and token tLEQUALS resolved as shift.
Conflict in state 133 between rule 74 and token tNEQUALS resolved as shift.
Conflict in state 133 between rule 74 and token tOR resolved as shift.
Conflict in state 133 between rule 74 and token tSTRICTEQUALS resolved as shift.
Conflict in state 133 between rule 74 and token tSTRICTNEQUALS resolved as shift.
Conflict in state 133 between rule 74 and token '<' resolved as shift.
Conflict in state 133 between rule 74 and token '>' resolved as shift.
Conflict in state 133 between rule 74 and token '+' resolved as shift.
Conflict in state 133 between rule 74 and token '-' resolved as shift.
Conflict in state 133 between rule 74 and token '*' resolved as shift.
Conflict in state 133 between rule 74 and token '/' resolved as shift.
Conflict in state 133 between rule 74 and token '%' resolved as shift.
Conflict in state 167 between rule 58 and token tELSE resolved as shift.
State 37 contains 23 shift/reduce conflicts.
State 178 contains 1 shift/reduce conflict and 1 reduce/reduce conflict.
State 191 contains 1 reduce/reduce conflict.
State 192 contains 2 reduce/reduce conflicts.

Grammar
rule 1    scriptcollection -> toplevels
rule 2    toplevels ->		/* empty */
rule 3    toplevels -> netoplevels
rule 4    netoplevels -> toplevel
rule 5    netoplevels -> toplevel netoplevels
rule 6    toplevel -> function
rule 7    toplevel -> nestms
rule 8    toplevel -> event
rule 9    toplevel -> external
rule 10   decl -> type identifiers initialization ';'
rule 11   simpledecl -> tVAR tIDENTIFIER initialization
rule 12   identifiers -> tIDENTIFIER
rule 13   identifiers -> tIDENTIFIER ',' identifiers
rule 14   initialization ->		/* empty */
rule 15   initialization -> '=' exp
rule 16   type -> tVAR
rule 17   type -> tGLOBAL
rule 18   type -> tCONST
rule 19   ext_type -> tBOOL
rule 20   ext_type -> tLONG
rule 21   ext_type -> tSHORT
rule 22   ext_type -> tINT
rule 23   ext_type -> tBYTE
rule 24   ext_type -> tSTRING
rule 25   ext_type -> tFLOAT
rule 26   ext_type -> tDOUBLE
rule 27   ext_type -> tMEMBUFFER
rule 28   ext_formals ->		/* empty */
rule 29   ext_formals -> neext_formals
rule 30   neext_formals -> ext_formal
rule 31   neext_formals -> ext_formal ',' neext_formals
rule 32   ext_formal -> ext_type
rule 33   ext_formal -> ext_type tIDENTIFIER
rule 34   call_type ->		/* empty */
rule 35   call_type -> tSTDCALL
rule 36   call_type -> tCDECL
rule 37   call_type -> tTHISCALL
rule 38   ext_returns ->		/* empty */
rule 39   ext_returns -> ext_type
rule 40   optvar ->		/* empty */
rule 41   optvar -> tVAR
rule 42   external -> tEXTERNAL tSTRINGCONST call_type ext_returns tIDENTIFIER '(' ext_formals ')' ';'
rule 43   function -> tFUNCTION tIDENTIFIER '(' formals ')' compoundstm
rule 44   function -> tMETHOD tIDENTIFIER '(' formals ')' compoundstm
rule 45   event -> tON tSTRINGCONST stm
rule 46   formals ->		/* empty */
rule 47   formals -> neformals
rule 48   neformals -> formal
rule 49   neformals -> formal ',' neformals
rule 50   formal -> optvar tIDENTIFIER
rule 51   compoundstm -> '{' '}'
rule 52   compoundstm -> '{' nestms '}'
rule 53   nestms -> stm
rule 54   nestms -> nestms stm
rule 55   stm -> ';'
rule 56   stm -> tRETURN ';'
rule 57   stm -> tRETURN exp ';'
rule 58   stm -> tIF '(' exp ')' stm
rule 59   stm -> tIF '(' exp ')' stm tELSE stm
rule 60   stm -> tWHILE '(' exp ')' stm
rule 61   stm -> tFOR '(' forinits ';' exp ';' exps ')' stm
rule 62   stm -> compoundstm
rule 63   stm -> decl
rule 64   stm -> exp ';'
rule 65   stm -> tBREAK
rule 66   stm -> tCONTINUE
rule 67   stm -> tSWITCH '(' exp ')' '{' dcases '}'
rule 68   forinits ->		/* empty */
rule 69   forinits -> neforinits
rule 70   neforinits -> forinit
rule 71   neforinits -> forinit ',' neforinits
rule 72   forinit -> simpledecl
rule 73   forinit -> exp
rule 74   exp -> lvalue '=' exp
rule 75   exp -> exp tEQUALS exp
rule 76   exp -> exp tNEQUALS exp
rule 77   exp -> exp tSTRICTEQUALS exp
rule 78   exp -> exp tSTRICTNEQUALS exp
rule 79   exp -> exp '<' exp
rule 80   exp -> exp '>' exp
rule 81   exp -> exp tLEQUALS exp
rule 82   exp -> exp tGEQUALS exp
rule 83   exp -> exp '+' exp
rule 84   exp -> exp '-' exp
rule 85   exp -> exp '*' exp
rule 86   exp -> exp '/' exp
rule 87   exp -> exp '%' exp
rule 88   exp -> exp tAND exp
rule 89   exp -> exp tOR exp
rule 90   exp -> tNULL
rule 91   exp -> unaryexp
rule 92   unaryexp -> '-' unaryexp
rule 93   unaryexp -> '!' unaryexp
rule 94   unaryexp -> tIDENTIFIER tINCREMENT
rule 95   unaryexp -> tIDENTIFIER tDECREMENT
rule 96   unaryexp -> '(' type ')' unaryexp
rule 97   unaryexp -> unarypostfixexp
rule 98   unarypostfixexp -> tINTCONST
rule 99   unarypostfixexp -> tBOOLCONST
rule 100  unarypostfixexp -> tFLOATCONST
rule 101  unarypostfixexp -> tSTRINGCONST
rule 102  unarypostfixexp -> lvalue
rule 103  unarypostfixexp -> '(' exp ')'
rule 104  unarypostfixexp -> tIDENTIFIER '(' exps ')'
rule 105  unarypostfixexp -> tIDENTIFIER '.' tIDENTIFIER '(' exps ')'
rule 106  unarypostfixexp -> tIDENTIFIER '[' exp ']' '(' exps ')'
rule 107  unarypostfixexp -> tNEW tIDENTIFIER
rule 108  unarypostfixexp -> tNEW tIDENTIFIER '(' exps ')'
rule 109  exps ->		/* empty */
rule 110  exps -> neexps
rule 111  dcases -> default_branch
rule 112  dcases -> case_branches
rule 113  dcases -> case_branches default_branch
rule 114  case_branches ->		/* empty */
rule 115  case_branches -> case_branch
rule 116  case_branches -> case_branch case_branches
rule 117  case_branch -> tCASE unarypostfixexp ':' nestms
rule 118  case_branch -> tCASE unarypostfixexp ':'
rule 119  default_branch ->		/* empty */
rule 120  default_branch -> tDEFAULT ':' nestms
rule 121  neexps -> exp
rule 122  neexps -> exp ',' neexps
rule 123  lvalue -> tIDENTIFIER
rule 124  lvalue -> tIDENTIFIER '.' tIDENTIFIER
rule 125  lvalue -> tIDENTIFIER '[' exp ']'
rule 126  lvalue -> tTHIS '[' exp ']'

Terminals, with rules where they appear

$ (-1)
'!' (33) 93
'%' (37) 87
'(' (40) 42 43 44 58 59 60 61 67 96 103 104 105 106 108
')' (41) 42 43 44 58 59 60 61 67 96 103 104 105 106 108
'*' (42) 85
'+' (43) 83
',' (44) 13 31 49 71 122
'-' (45) 84 92
'.' (46) 105 124
'/' (47) 86
':' (58) 117 118 120
';' (59) 10 42 55 56 57 61 64
'<' (60) 79
'=' (61) 15 74
'>' (62) 80
'[' (91) 106 125 126
']' (93) 106 125 126
'{' (123) 51 52 67
'}' (125) 51 52 67
error (256)
tAND (258) 88
tELSE (259) 59
tEQUALS (260) 75
tGEQUALS (261) 82
tIF (262) 58 59
tINT (263) 22
tLEQUALS (264) 81
tNEQUALS (265) 76
tOR (266) 89
tRETURN (267) 56 57
tSTRICTEQUALS (268) 77
tSTRICTNEQUALS (269) 78
tBOOL (270) 19
tLONG (271) 20
tBYTE (272) 23
tSTRING (273) 24
tVOID (274)
tFLOAT (275) 25
tDOUBLE (276) 26
tSHORT (277) 21
tMEMBUFFER (278) 27
tSTDCALL (279) 35
tCDECL (280) 36
tTHISCALL (281) 37
tINCREMENT (282) 94
tDECREMENT (283) 95
tWHILE (284) 60
tERROR (285)
tFOR (286) 61
tFUNCTION (287) 43
tMETHOD (288) 44
tVAR (289) 11 16 41
tGLOBAL (290) 17
tCONST (291) 18
tNULL (292) 90
tBREAK (293) 65
tCONTINUE (294) 66
tNEW (295) 107 108
tTHIS (296) 126
tON (297) 45
tEXTERNAL (298) 42
tSWITCH (299) 67
tCASE (300) 117 118
tDEFAULT (301) 120
tIDENTIFIER (302) 11 12 13 33 42 43 44 50 94 95 104 105 106 107 108
    123 124 125
tINTCONST (303) 98
tBOOLCONST (304) 99
tFLOATCONST (305) 100
tSTRINGCONST (306) 42 45 101

Nonterminals, with rules where they appear

scriptcollection (71)
    on left: 1
toplevels (72)
    on left: 2 3, on right: 1
netoplevels (73)
    on left: 4 5, on right: 3 5
toplevel (74)
    on left: 6 7 8 9, on right: 4 5
decl (75)
    on left: 10, on right: 63
simpledecl (76)
    on left: 11, on right: 72
identifiers (77)
    on left: 12 13, on right: 10 13
initialization (78)
    on left: 14 15, on right: 10 11
type (79)
    on left: 16 17 18, on right: 10 96
ext_type (80)
    on left: 19 20 21 22 23 24 25 26 27, on right: 32 33 39
ext_formals (81)
    on left: 28 29, on right: 42
neext_formals (82)
    on left: 30 31, on right: 29 31
ext_formal (83)
    on left: 32 33, on right: 30 31
call_type (84)
    on left: 34 35 36 37, on right: 42
ext_returns (85)
    on left: 38 39, on right: 42
optvar (86)
    on left: 40 41, on right: 50
external (87)
    on left: 42, on right: 9
function (88)
    on left: 43 44, on right: 6
event (89)
    on left: 45, on right: 8
formals (90)
    on left: 46 47, on right: 43 44
neformals (91)
    on left: 48 49, on right: 47 49
formal (92)
    on left: 50, on right: 48 49
compoundstm (93)
    on left: 51 52, on right: 43 44 62
nestms (94)
    on left: 53 54, on right: 7 52 54 117 120
stm (95)
    on left: 55 56 57 58 59 60 61 62 63 64 65 66 67,
    on right: 45 53 54 58 59 60 61
forinits (96)
    on left: 68 69, on right: 61
neforinits (97)
    on left: 70 71, on right: 69 71
forinit (98)
    on left: 72 73, on right: 70 71
exp (99)
    on left: 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91
   , on right: 15 57 58 59 60 61 64 67 73 74 75 76 77 78 79 80 81 82
    83 84 85 86 87 88 89 103 106 121 122 125 126
unaryexp (100)
    on left: 92 93 94 95 96 97, on right: 91 92 93 96
unarypostfixexp (101)
    on left: 98 99 100 101 102 103 104 105 106 107 108,
    on right: 97 117 118
exps (102)
    on left: 109 110, on right: 61 104 105 106 108
dcases (103)
    on left: 111 112 113, on right: 67
case_branches (104)
    on left: 114 115 116, on right: 112 113 116
case_branch (105)
    on left: 117 118, on right: 115 116
default_branch (106)
    on left: 119 120, on right: 111 113
neexps (107)
    on left: 121 122, on right: 110 122
lvalue (108)
    on left: 123 124 125 126, on right: 74 102


state 0

    tIF 	shift, and go to state 1
    tRETURN	shift, and go to state 2
    tWHILE	shift, and go to state 3
    tFOR	shift, and go to state 4
    tFUNCTION	shift, and go to state 5
    tMETHOD	shift, and go to state 6
    tVAR	shift, and go to state 7
    tGLOBAL	shift, and go to state 8
    tCONST	shift, and go to state 9
    tNULL	shift, and go to state 10
    tBREAK	shift, and go to state 11
    tCONTINUE	shift, and go to state 12
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tON 	shift, and go to state 15
    tEXTERNAL	shift, and go to state 16
    tSWITCH	shift, and go to state 17
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    ';' 	shift, and go to state 24
    '(' 	shift, and go to state 25
    '{' 	shift, and go to state 26
    '!' 	shift, and go to state 27

    $default	reduce using rule 2 (toplevels)

    scriptcollection	go to state 220
    toplevels	go to state 28
    netoplevels	go to state 29
    toplevel	go to state 30
    decl	go to state 31
    type	go to state 32
    external	go to state 33
    function	go to state 34
    event	go to state 35
    compoundstm	go to state 36
    nestms	go to state 37
    stm 	go to state 38
    exp 	go to state 39
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 1

    stm  ->  tIF . '(' exp ')' stm   (rule 58)
    stm  ->  tIF . '(' exp ')' stm tELSE stm   (rule 59)

    '(' 	shift, and go to state 43



state 2

    stm  ->  tRETURN . ';'   (rule 56)
    stm  ->  tRETURN . exp ';'   (rule 57)

    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    ';' 	shift, and go to state 44
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    exp 	go to state 45
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 3

    stm  ->  tWHILE . '(' exp ')' stm   (rule 60)

    '(' 	shift, and go to state 46



state 4

    stm  ->  tFOR . '(' forinits ';' exp ';' exps ')' stm   (rule 61)

    '(' 	shift, and go to state 47



state 5

    function  ->  tFUNCTION . tIDENTIFIER '(' formals ')' compoundstm   (rule 43)

    tIDENTIFIER	shift, and go to state 48



state 6

    function  ->  tMETHOD . tIDENTIFIER '(' formals ')' compoundstm   (rule 44)

    tIDENTIFIER	shift, and go to state 49



state 7

    type  ->  tVAR .   (rule 16)

    $default	reduce using rule 16 (type)



state 8

    type  ->  tGLOBAL .   (rule 17)

    $default	reduce using rule 17 (type)



state 9

    type  ->  tCONST .   (rule 18)

    $default	reduce using rule 18 (type)



state 10

    exp  ->  tNULL .   (rule 90)

    $default	reduce using rule 90 (exp)



state 11

    stm  ->  tBREAK .   (rule 65)

    $default	reduce using rule 65 (stm)



state 12

    stm  ->  tCONTINUE .   (rule 66)

    $default	reduce using rule 66 (stm)



state 13

    unarypostfixexp  ->  tNEW . tIDENTIFIER   (rule 107)
    unarypostfixexp  ->  tNEW . tIDENTIFIER '(' exps ')'   (rule 108)

    tIDENTIFIER	shift, and go to state 50



state 14

    lvalue  ->  tTHIS . '[' exp ']'   (rule 126)

    '[' 	shift, and go to state 51



state 15

    event  ->  tON . tSTRINGCONST stm   (rule 45)

    tSTRINGCONST	shift, and go to state 52



state 16

    external  ->  tEXTERNAL . tSTRINGCONST call_type ext_returns tIDENTIFIER '(' ext_formals ')' ';'   (rule 42)

    tSTRINGCONST	shift, and go to state 53



state 17

    stm  ->  tSWITCH . '(' exp ')' '{' dcases '}'   (rule 67)

    '(' 	shift, and go to state 54



state 18

    unaryexp  ->  tIDENTIFIER . tINCREMENT   (rule 94)
    unaryexp  ->  tIDENTIFIER . tDECREMENT   (rule 95)
    unarypostfixexp  ->  tIDENTIFIER . '(' exps ')'   (rule 104)
    unarypostfixexp  ->  tIDENTIFIER . '.' tIDENTIFIER '(' exps ')'   (rule 105)
    unarypostfixexp  ->  tIDENTIFIER . '[' exp ']' '(' exps ')'   (rule 106)
    lvalue  ->  tIDENTIFIER .   (rule 123)
    lvalue  ->  tIDENTIFIER . '.' tIDENTIFIER   (rule 124)
    lvalue  ->  tIDENTIFIER . '[' exp ']'   (rule 125)

    tINCREMENT	shift, and go to state 55
    tDECREMENT	shift, and go to state 56
    '(' 	shift, and go to state 57
    '.' 	shift, and go to state 58
    '[' 	shift, and go to state 59

    $default	reduce using rule 123 (lvalue)



state 19

    unarypostfixexp  ->  tINTCONST .   (rule 98)

    $default	reduce using rule 98 (unarypostfixexp)



state 20

    unarypostfixexp  ->  tBOOLCONST .   (rule 99)

    $default	reduce using rule 99 (unarypostfixexp)



state 21

    unarypostfixexp  ->  tFLOATCONST .   (rule 100)

    $default	reduce using rule 100 (unarypostfixexp)



state 22

    unarypostfixexp  ->  tSTRINGCONST .   (rule 101)

    $default	reduce using rule 101 (unarypostfixexp)



state 23

    unaryexp  ->  '-' . unaryexp   (rule 92)

    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    unaryexp	go to state 60
    unarypostfixexp	go to state 41
    lvalue	go to state 61



state 24

    stm  ->  ';' .   (rule 55)

    $default	reduce using rule 55 (stm)



state 25

    unaryexp  ->  '(' . type ')' unaryexp   (rule 96)
    unarypostfixexp  ->  '(' . exp ')'   (rule 103)

    tVAR	shift, and go to state 7
    tGLOBAL	shift, and go to state 8
    tCONST	shift, and go to state 9
    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    type	go to state 62
    exp 	go to state 63
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 26

    compoundstm  ->  '{' . '}'   (rule 51)
    compoundstm  ->  '{' . nestms '}'   (rule 52)

    tIF 	shift, and go to state 1
    tRETURN	shift, and go to state 2
    tWHILE	shift, and go to state 3
    tFOR	shift, and go to state 4
    tVAR	shift, and go to state 7
    tGLOBAL	shift, and go to state 8
    tCONST	shift, and go to state 9
    tNULL	shift, and go to state 10
    tBREAK	shift, and go to state 11
    tCONTINUE	shift, and go to state 12
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tSWITCH	shift, and go to state 17
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    ';' 	shift, and go to state 24
    '(' 	shift, and go to state 25
    '{' 	shift, and go to state 26
    '}' 	shift, and go to state 64
    '!' 	shift, and go to state 27

    decl	go to state 31
    type	go to state 32
    compoundstm	go to state 36
    nestms	go to state 65
    stm 	go to state 38
    exp 	go to state 39
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 27

    unaryexp  ->  '!' . unaryexp   (rule 93)

    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    unaryexp	go to state 66
    unarypostfixexp	go to state 41
    lvalue	go to state 61



state 28

    scriptcollection  ->  toplevels .   (rule 1)

    $default	reduce using rule 1 (scriptcollection)



state 29

    toplevels  ->  netoplevels .   (rule 3)

    $default	reduce using rule 3 (toplevels)



state 30

    netoplevels  ->  toplevel .   (rule 4)
    netoplevels  ->  toplevel . netoplevels   (rule 5)

    tIF 	shift, and go to state 1
    tRETURN	shift, and go to state 2
    tWHILE	shift, and go to state 3
    tFOR	shift, and go to state 4
    tFUNCTION	shift, and go to state 5
    tMETHOD	shift, and go to state 6
    tVAR	shift, and go to state 7
    tGLOBAL	shift, and go to state 8
    tCONST	shift, and go to state 9
    tNULL	shift, and go to state 10
    tBREAK	shift, and go to state 11
    tCONTINUE	shift, and go to state 12
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tON 	shift, and go to state 15
    tEXTERNAL	shift, and go to state 16
    tSWITCH	shift, and go to state 17
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    ';' 	shift, and go to state 24
    '(' 	shift, and go to state 25
    '{' 	shift, and go to state 26
    '!' 	shift, and go to state 27

    $default	reduce using rule 4 (netoplevels)

    netoplevels	go to state 67
    toplevel	go to state 30
    decl	go to state 31
    type	go to state 32
    external	go to state 33
    function	go to state 34
    event	go to state 35
    compoundstm	go to state 36
    nestms	go to state 37
    stm 	go to state 38
    exp 	go to state 39
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 31

    stm  ->  decl .   (rule 63)

    $default	reduce using rule 63 (stm)



state 32

    decl  ->  type . identifiers initialization ';'   (rule 10)

    tIDENTIFIER	shift, and go to state 68

    identifiers	go to state 69



state 33

    toplevel  ->  external .   (rule 9)

    $default	reduce using rule 9 (toplevel)



state 34

    toplevel  ->  function .   (rule 6)

    $default	reduce using rule 6 (toplevel)



state 35

    toplevel  ->  event .   (rule 8)

    $default	reduce using rule 8 (toplevel)



state 36

    stm  ->  compoundstm .   (rule 62)

    $default	reduce using rule 62 (stm)



state 37

    toplevel  ->  nestms .   (rule 7)
    nestms  ->  nestms . stm   (rule 54)

    tIF 	shift, and go to state 1
    tRETURN	shift, and go to state 2
    tWHILE	shift, and go to state 3
    tFOR	shift, and go to state 4
    tVAR	shift, and go to state 7
    tGLOBAL	shift, and go to state 8
    tCONST	shift, and go to state 9
    tNULL	shift, and go to state 10
    tBREAK	shift, and go to state 11
    tCONTINUE	shift, and go to state 12
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tSWITCH	shift, and go to state 17
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    ';' 	shift, and go to state 24
    '(' 	shift, and go to state 25
    '{' 	shift, and go to state 26
    '!' 	shift, and go to state 27

    tIF 	[reduce using rule 7 (toplevel)]
    tRETURN	[reduce using rule 7 (toplevel)]
    tWHILE	[reduce using rule 7 (toplevel)]
    tFOR	[reduce using rule 7 (toplevel)]
    tVAR	[reduce using rule 7 (toplevel)]
    tGLOBAL	[reduce using rule 7 (toplevel)]
    tCONST	[reduce using rule 7 (toplevel)]
    tNULL	[reduce using rule 7 (toplevel)]
    tBREAK	[reduce using rule 7 (toplevel)]
    tCONTINUE	[reduce using rule 7 (toplevel)]
    tNEW	[reduce using rule 7 (toplevel)]
    tTHIS	[reduce using rule 7 (toplevel)]
    tSWITCH	[reduce using rule 7 (toplevel)]
    tIDENTIFIER	[reduce using rule 7 (toplevel)]
    tINTCONST	[reduce using rule 7 (toplevel)]
    tBOOLCONST	[reduce using rule 7 (toplevel)]
    tFLOATCONST	[reduce using rule 7 (toplevel)]
    tSTRINGCONST	[reduce using rule 7 (toplevel)]
    '-' 	[reduce using rule 7 (toplevel)]
    ';' 	[reduce using rule 7 (toplevel)]
    '(' 	[reduce using rule 7 (toplevel)]
    '{' 	[reduce using rule 7 (toplevel)]
    '!' 	[reduce using rule 7 (toplevel)]
    $default	reduce using rule 7 (toplevel)

    decl	go to state 31
    type	go to state 32
    compoundstm	go to state 36
    stm 	go to state 70
    exp 	go to state 39
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 38

    nestms  ->  stm .   (rule 53)

    $default	reduce using rule 53 (nestms)



state 39

    stm  ->  exp . ';'   (rule 64)
    exp  ->  exp . tEQUALS exp   (rule 75)
    exp  ->  exp . tNEQUALS exp   (rule 76)
    exp  ->  exp . tSTRICTEQUALS exp   (rule 77)
    exp  ->  exp . tSTRICTNEQUALS exp   (rule 78)
    exp  ->  exp . '<' exp   (rule 79)
    exp  ->  exp . '>' exp   (rule 80)
    exp  ->  exp . tLEQUALS exp   (rule 81)
    exp  ->  exp . tGEQUALS exp   (rule 82)
    exp  ->  exp . '+' exp   (rule 83)
    exp  ->  exp . '-' exp   (rule 84)
    exp  ->  exp . '*' exp   (rule 85)
    exp  ->  exp . '/' exp   (rule 86)
    exp  ->  exp . '%' exp   (rule 87)
    exp  ->  exp . tAND exp   (rule 88)
    exp  ->  exp . tOR exp   (rule 89)

    tAND	shift, and go to state 71
    tEQUALS	shift, and go to state 72
    tGEQUALS	shift, and go to state 73
    tLEQUALS	shift, and go to state 74
    tNEQUALS	shift, and go to state 75
    tOR 	shift, and go to state 76
    tSTRICTEQUALS	shift, and go to state 77
    tSTRICTNEQUALS	shift, and go to state 78
    '<' 	shift, and go to state 79
    '>' 	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85
    ';' 	shift, and go to state 86



state 40

    exp  ->  unaryexp .   (rule 91)

    $default	reduce using rule 91 (exp)



state 41

    unaryexp  ->  unarypostfixexp .   (rule 97)

    $default	reduce using rule 97 (unaryexp)



state 42

    exp  ->  lvalue . '=' exp   (rule 74)
    unarypostfixexp  ->  lvalue .   (rule 102)

    '=' 	shift, and go to state 87

    $default	reduce using rule 102 (unarypostfixexp)



state 43

    stm  ->  tIF '(' . exp ')' stm   (rule 58)
    stm  ->  tIF '(' . exp ')' stm tELSE stm   (rule 59)

    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    exp 	go to state 88
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 44

    stm  ->  tRETURN ';' .   (rule 56)

    $default	reduce using rule 56 (stm)



state 45

    stm  ->  tRETURN exp . ';'   (rule 57)
    exp  ->  exp . tEQUALS exp   (rule 75)
    exp  ->  exp . tNEQUALS exp   (rule 76)
    exp  ->  exp . tSTRICTEQUALS exp   (rule 77)
    exp  ->  exp . tSTRICTNEQUALS exp   (rule 78)
    exp  ->  exp . '<' exp   (rule 79)
    exp  ->  exp . '>' exp   (rule 80)
    exp  ->  exp . tLEQUALS exp   (rule 81)
    exp  ->  exp . tGEQUALS exp   (rule 82)
    exp  ->  exp . '+' exp   (rule 83)
    exp  ->  exp . '-' exp   (rule 84)
    exp  ->  exp . '*' exp   (rule 85)
    exp  ->  exp . '/' exp   (rule 86)
    exp  ->  exp . '%' exp   (rule 87)
    exp  ->  exp . tAND exp   (rule 88)
    exp  ->  exp . tOR exp   (rule 89)

    tAND	shift, and go to state 71
    tEQUALS	shift, and go to state 72
    tGEQUALS	shift, and go to state 73
    tLEQUALS	shift, and go to state 74
    tNEQUALS	shift, and go to state 75
    tOR 	shift, and go to state 76
    tSTRICTEQUALS	shift, and go to state 77
    tSTRICTNEQUALS	shift, and go to state 78
    '<' 	shift, and go to state 79
    '>' 	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85
    ';' 	shift, and go to state 89



state 46

    stm  ->  tWHILE '(' . exp ')' stm   (rule 60)

    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    exp 	go to state 90
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 47

    stm  ->  tFOR '(' . forinits ';' exp ';' exps ')' stm   (rule 61)

    tVAR	shift, and go to state 91
    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    $default	reduce using rule 68 (forinits)

    simpledecl	go to state 92
    forinits	go to state 93
    neforinits	go to state 94
    forinit	go to state 95
    exp 	go to state 96
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 48

    function  ->  tFUNCTION tIDENTIFIER . '(' formals ')' compoundstm   (rule 43)

    '(' 	shift, and go to state 97



state 49

    function  ->  tMETHOD tIDENTIFIER . '(' formals ')' compoundstm   (rule 44)

    '(' 	shift, and go to state 98



state 50

    unarypostfixexp  ->  tNEW tIDENTIFIER .   (rule 107)
    unarypostfixexp  ->  tNEW tIDENTIFIER . '(' exps ')'   (rule 108)

    '(' 	shift, and go to state 99

    $default	reduce using rule 107 (unarypostfixexp)



state 51

    lvalue  ->  tTHIS '[' . exp ']'   (rule 126)

    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    exp 	go to state 100
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 52

    event  ->  tON tSTRINGCONST . stm   (rule 45)

    tIF 	shift, and go to state 1
    tRETURN	shift, and go to state 2
    tWHILE	shift, and go to state 3
    tFOR	shift, and go to state 4
    tVAR	shift, and go to state 7
    tGLOBAL	shift, and go to state 8
    tCONST	shift, and go to state 9
    tNULL	shift, and go to state 10
    tBREAK	shift, and go to state 11
    tCONTINUE	shift, and go to state 12
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tSWITCH	shift, and go to state 17
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    ';' 	shift, and go to state 24
    '(' 	shift, and go to state 25
    '{' 	shift, and go to state 26
    '!' 	shift, and go to state 27

    decl	go to state 31
    type	go to state 32
    compoundstm	go to state 36
    stm 	go to state 101
    exp 	go to state 39
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 53

    external  ->  tEXTERNAL tSTRINGCONST . call_type ext_returns tIDENTIFIER '(' ext_formals ')' ';'   (rule 42)

    tSTDCALL	shift, and go to state 102
    tCDECL	shift, and go to state 103
    tTHISCALL	shift, and go to state 104

    $default	reduce using rule 34 (call_type)

    call_type	go to state 105



state 54

    stm  ->  tSWITCH '(' . exp ')' '{' dcases '}'   (rule 67)

    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    exp 	go to state 106
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 55

    unaryexp  ->  tIDENTIFIER tINCREMENT .   (rule 94)

    $default	reduce using rule 94 (unaryexp)



state 56

    unaryexp  ->  tIDENTIFIER tDECREMENT .   (rule 95)

    $default	reduce using rule 95 (unaryexp)



state 57

    unarypostfixexp  ->  tIDENTIFIER '(' . exps ')'   (rule 104)

    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    $default	reduce using rule 109 (exps)

    exp 	go to state 107
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    exps	go to state 108
    neexps	go to state 109
    lvalue	go to state 42



state 58

    unarypostfixexp  ->  tIDENTIFIER '.' . tIDENTIFIER '(' exps ')'   (rule 105)
    lvalue  ->  tIDENTIFIER '.' . tIDENTIFIER   (rule 124)

    tIDENTIFIER	shift, and go to state 110



state 59

    unarypostfixexp  ->  tIDENTIFIER '[' . exp ']' '(' exps ')'   (rule 106)
    lvalue  ->  tIDENTIFIER '[' . exp ']'   (rule 125)

    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    exp 	go to state 111
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 60

    unaryexp  ->  '-' unaryexp .   (rule 92)

    $default	reduce using rule 92 (unaryexp)



state 61

    unarypostfixexp  ->  lvalue .   (rule 102)

    $default	reduce using rule 102 (unarypostfixexp)



state 62

    unaryexp  ->  '(' type . ')' unaryexp   (rule 96)

    ')' 	shift, and go to state 112



state 63

    exp  ->  exp . tEQUALS exp   (rule 75)
    exp  ->  exp . tNEQUALS exp   (rule 76)
    exp  ->  exp . tSTRICTEQUALS exp   (rule 77)
    exp  ->  exp . tSTRICTNEQUALS exp   (rule 78)
    exp  ->  exp . '<' exp   (rule 79)
    exp  ->  exp . '>' exp   (rule 80)
    exp  ->  exp . tLEQUALS exp   (rule 81)
    exp  ->  exp . tGEQUALS exp   (rule 82)
    exp  ->  exp . '+' exp   (rule 83)
    exp  ->  exp . '-' exp   (rule 84)
    exp  ->  exp . '*' exp   (rule 85)
    exp  ->  exp . '/' exp   (rule 86)
    exp  ->  exp . '%' exp   (rule 87)
    exp  ->  exp . tAND exp   (rule 88)
    exp  ->  exp . tOR exp   (rule 89)
    unarypostfixexp  ->  '(' exp . ')'   (rule 103)

    tAND	shift, and go to state 71
    tEQUALS	shift, and go to state 72
    tGEQUALS	shift, and go to state 73
    tLEQUALS	shift, and go to state 74
    tNEQUALS	shift, and go to state 75
    tOR 	shift, and go to state 76
    tSTRICTEQUALS	shift, and go to state 77
    tSTRICTNEQUALS	shift, and go to state 78
    ')' 	shift, and go to state 113
    '<' 	shift, and go to state 79
    '>' 	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85



state 64

    compoundstm  ->  '{' '}' .   (rule 51)

    $default	reduce using rule 51 (compoundstm)



state 65

    compoundstm  ->  '{' nestms . '}'   (rule 52)
    nestms  ->  nestms . stm   (rule 54)

    tIF 	shift, and go to state 1
    tRETURN	shift, and go to state 2
    tWHILE	shift, and go to state 3
    tFOR	shift, and go to state 4
    tVAR	shift, and go to state 7
    tGLOBAL	shift, and go to state 8
    tCONST	shift, and go to state 9
    tNULL	shift, and go to state 10
    tBREAK	shift, and go to state 11
    tCONTINUE	shift, and go to state 12
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tSWITCH	shift, and go to state 17
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    ';' 	shift, and go to state 24
    '(' 	shift, and go to state 25
    '{' 	shift, and go to state 26
    '}' 	shift, and go to state 114
    '!' 	shift, and go to state 27

    decl	go to state 31
    type	go to state 32
    compoundstm	go to state 36
    stm 	go to state 70
    exp 	go to state 39
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 66

    unaryexp  ->  '!' unaryexp .   (rule 93)

    $default	reduce using rule 93 (unaryexp)



state 67

    netoplevels  ->  toplevel netoplevels .   (rule 5)

    $default	reduce using rule 5 (netoplevels)



state 68

    identifiers  ->  tIDENTIFIER .   (rule 12)
    identifiers  ->  tIDENTIFIER . ',' identifiers   (rule 13)

    ',' 	shift, and go to state 115

    $default	reduce using rule 12 (identifiers)



state 69

    decl  ->  type identifiers . initialization ';'   (rule 10)

    '=' 	shift, and go to state 116

    $default	reduce using rule 14 (initialization)

    initialization	go to state 117



state 70

    nestms  ->  nestms stm .   (rule 54)

    $default	reduce using rule 54 (nestms)



state 71

    exp  ->  exp tAND . exp   (rule 88)

    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    exp 	go to state 118
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 72

    exp  ->  exp tEQUALS . exp   (rule 75)

    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    exp 	go to state 119
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 73

    exp  ->  exp tGEQUALS . exp   (rule 82)

    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    exp 	go to state 120
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 74

    exp  ->  exp tLEQUALS . exp   (rule 81)

    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    exp 	go to state 121
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 75

    exp  ->  exp tNEQUALS . exp   (rule 76)

    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    exp 	go to state 122
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 76

    exp  ->  exp tOR . exp   (rule 89)

    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    exp 	go to state 123
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 77

    exp  ->  exp tSTRICTEQUALS . exp   (rule 77)

    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    exp 	go to state 124
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 78

    exp  ->  exp tSTRICTNEQUALS . exp   (rule 78)

    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    exp 	go to state 125
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 79

    exp  ->  exp '<' . exp   (rule 79)

    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    exp 	go to state 126
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 80

    exp  ->  exp '>' . exp   (rule 80)

    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    exp 	go to state 127
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 81

    exp  ->  exp '+' . exp   (rule 83)

    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    exp 	go to state 128
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 82

    exp  ->  exp '-' . exp   (rule 84)

    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    exp 	go to state 129
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 83

    exp  ->  exp '*' . exp   (rule 85)

    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    exp 	go to state 130
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 84

    exp  ->  exp '/' . exp   (rule 86)

    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    exp 	go to state 131
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 85

    exp  ->  exp '%' . exp   (rule 87)

    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    exp 	go to state 132
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 86

    stm  ->  exp ';' .   (rule 64)

    $default	reduce using rule 64 (stm)



state 87

    exp  ->  lvalue '=' . exp   (rule 74)

    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    exp 	go to state 133
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 88

    stm  ->  tIF '(' exp . ')' stm   (rule 58)
    stm  ->  tIF '(' exp . ')' stm tELSE stm   (rule 59)
    exp  ->  exp . tEQUALS exp   (rule 75)
    exp  ->  exp . tNEQUALS exp   (rule 76)
    exp  ->  exp . tSTRICTEQUALS exp   (rule 77)
    exp  ->  exp . tSTRICTNEQUALS exp   (rule 78)
    exp  ->  exp . '<' exp   (rule 79)
    exp  ->  exp . '>' exp   (rule 80)
    exp  ->  exp . tLEQUALS exp   (rule 81)
    exp  ->  exp . tGEQUALS exp   (rule 82)
    exp  ->  exp . '+' exp   (rule 83)
    exp  ->  exp . '-' exp   (rule 84)
    exp  ->  exp . '*' exp   (rule 85)
    exp  ->  exp . '/' exp   (rule 86)
    exp  ->  exp . '%' exp   (rule 87)
    exp  ->  exp . tAND exp   (rule 88)
    exp  ->  exp . tOR exp   (rule 89)

    tAND	shift, and go to state 71
    tEQUALS	shift, and go to state 72
    tGEQUALS	shift, and go to state 73
    tLEQUALS	shift, and go to state 74
    tNEQUALS	shift, and go to state 75
    tOR 	shift, and go to state 76
    tSTRICTEQUALS	shift, and go to state 77
    tSTRICTNEQUALS	shift, and go to state 78
    ')' 	shift, and go to state 134
    '<' 	shift, and go to state 79
    '>' 	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85



state 89

    stm  ->  tRETURN exp ';' .   (rule 57)

    $default	reduce using rule 57 (stm)



state 90

    stm  ->  tWHILE '(' exp . ')' stm   (rule 60)
    exp  ->  exp . tEQUALS exp   (rule 75)
    exp  ->  exp . tNEQUALS exp   (rule 76)
    exp  ->  exp . tSTRICTEQUALS exp   (rule 77)
    exp  ->  exp . tSTRICTNEQUALS exp   (rule 78)
    exp  ->  exp . '<' exp   (rule 79)
    exp  ->  exp . '>' exp   (rule 80)
    exp  ->  exp . tLEQUALS exp   (rule 81)
    exp  ->  exp . tGEQUALS exp   (rule 82)
    exp  ->  exp . '+' exp   (rule 83)
    exp  ->  exp . '-' exp   (rule 84)
    exp  ->  exp . '*' exp   (rule 85)
    exp  ->  exp . '/' exp   (rule 86)
    exp  ->  exp . '%' exp   (rule 87)
    exp  ->  exp . tAND exp   (rule 88)
    exp  ->  exp . tOR exp   (rule 89)

    tAND	shift, and go to state 71
    tEQUALS	shift, and go to state 72
    tGEQUALS	shift, and go to state 73
    tLEQUALS	shift, and go to state 74
    tNEQUALS	shift, and go to state 75
    tOR 	shift, and go to state 76
    tSTRICTEQUALS	shift, and go to state 77
    tSTRICTNEQUALS	shift, and go to state 78
    ')' 	shift, and go to state 135
    '<' 	shift, and go to state 79
    '>' 	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85



state 91

    simpledecl  ->  tVAR . tIDENTIFIER initialization   (rule 11)

    tIDENTIFIER	shift, and go to state 136



state 92

    forinit  ->  simpledecl .   (rule 72)

    $default	reduce using rule 72 (forinit)



state 93

    stm  ->  tFOR '(' forinits . ';' exp ';' exps ')' stm   (rule 61)

    ';' 	shift, and go to state 137



state 94

    forinits  ->  neforinits .   (rule 69)

    $default	reduce using rule 69 (forinits)



state 95

    neforinits  ->  forinit .   (rule 70)
    neforinits  ->  forinit . ',' neforinits   (rule 71)

    ',' 	shift, and go to state 138

    $default	reduce using rule 70 (neforinits)



state 96

    forinit  ->  exp .   (rule 73)
    exp  ->  exp . tEQUALS exp   (rule 75)
    exp  ->  exp . tNEQUALS exp   (rule 76)
    exp  ->  exp . tSTRICTEQUALS exp   (rule 77)
    exp  ->  exp . tSTRICTNEQUALS exp   (rule 78)
    exp  ->  exp . '<' exp   (rule 79)
    exp  ->  exp . '>' exp   (rule 80)
    exp  ->  exp . tLEQUALS exp   (rule 81)
    exp  ->  exp . tGEQUALS exp   (rule 82)
    exp  ->  exp . '+' exp   (rule 83)
    exp  ->  exp . '-' exp   (rule 84)
    exp  ->  exp . '*' exp   (rule 85)
    exp  ->  exp . '/' exp   (rule 86)
    exp  ->  exp . '%' exp   (rule 87)
    exp  ->  exp . tAND exp   (rule 88)
    exp  ->  exp . tOR exp   (rule 89)

    tAND	shift, and go to state 71
    tEQUALS	shift, and go to state 72
    tGEQUALS	shift, and go to state 73
    tLEQUALS	shift, and go to state 74
    tNEQUALS	shift, and go to state 75
    tOR 	shift, and go to state 76
    tSTRICTEQUALS	shift, and go to state 77
    tSTRICTNEQUALS	shift, and go to state 78
    '<' 	shift, and go to state 79
    '>' 	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85

    $default	reduce using rule 73 (forinit)



state 97

    function  ->  tFUNCTION tIDENTIFIER '(' . formals ')' compoundstm   (rule 43)

    tVAR	shift, and go to state 139

    ')' 	reduce using rule 46 (formals)
    $default	reduce using rule 40 (optvar)

    optvar	go to state 140
    formals	go to state 141
    neformals	go to state 142
    formal	go to state 143



state 98

    function  ->  tMETHOD tIDENTIFIER '(' . formals ')' compoundstm   (rule 44)

    tVAR	shift, and go to state 139

    ')' 	reduce using rule 46 (formals)
    $default	reduce using rule 40 (optvar)

    optvar	go to state 140
    formals	go to state 144
    neformals	go to state 142
    formal	go to state 143



state 99

    unarypostfixexp  ->  tNEW tIDENTIFIER '(' . exps ')'   (rule 108)

    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    $default	reduce using rule 109 (exps)

    exp 	go to state 107
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    exps	go to state 145
    neexps	go to state 109
    lvalue	go to state 42



state 100

    exp  ->  exp . tEQUALS exp   (rule 75)
    exp  ->  exp . tNEQUALS exp   (rule 76)
    exp  ->  exp . tSTRICTEQUALS exp   (rule 77)
    exp  ->  exp . tSTRICTNEQUALS exp   (rule 78)
    exp  ->  exp . '<' exp   (rule 79)
    exp  ->  exp . '>' exp   (rule 80)
    exp  ->  exp . tLEQUALS exp   (rule 81)
    exp  ->  exp . tGEQUALS exp   (rule 82)
    exp  ->  exp . '+' exp   (rule 83)
    exp  ->  exp . '-' exp   (rule 84)
    exp  ->  exp . '*' exp   (rule 85)
    exp  ->  exp . '/' exp   (rule 86)
    exp  ->  exp . '%' exp   (rule 87)
    exp  ->  exp . tAND exp   (rule 88)
    exp  ->  exp . tOR exp   (rule 89)
    lvalue  ->  tTHIS '[' exp . ']'   (rule 126)

    tAND	shift, and go to state 71
    tEQUALS	shift, and go to state 72
    tGEQUALS	shift, and go to state 73
    tLEQUALS	shift, and go to state 74
    tNEQUALS	shift, and go to state 75
    tOR 	shift, and go to state 76
    tSTRICTEQUALS	shift, and go to state 77
    tSTRICTNEQUALS	shift, and go to state 78
    '<' 	shift, and go to state 79
    '>' 	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85
    ']' 	shift, and go to state 146



state 101

    event  ->  tON tSTRINGCONST stm .   (rule 45)

    $default	reduce using rule 45 (event)



state 102

    call_type  ->  tSTDCALL .   (rule 35)

    $default	reduce using rule 35 (call_type)



state 103

    call_type  ->  tCDECL .   (rule 36)

    $default	reduce using rule 36 (call_type)



state 104

    call_type  ->  tTHISCALL .   (rule 37)

    $default	reduce using rule 37 (call_type)



state 105

    external  ->  tEXTERNAL tSTRINGCONST call_type . ext_returns tIDENTIFIER '(' ext_formals ')' ';'   (rule 42)

    tINT	shift, and go to state 147
    tBOOL	shift, and go to state 148
    tLONG	shift, and go to state 149
    tBYTE	shift, and go to state 150
    tSTRING	shift, and go to state 151
    tFLOAT	shift, and go to state 152
    tDOUBLE	shift, and go to state 153
    tSHORT	shift, and go to state 154
    tMEMBUFFER	shift, and go to state 155

    $default	reduce using rule 38 (ext_returns)

    ext_type	go to state 156
    ext_returns	go to state 157



state 106

    stm  ->  tSWITCH '(' exp . ')' '{' dcases '}'   (rule 67)
    exp  ->  exp . tEQUALS exp   (rule 75)
    exp  ->  exp . tNEQUALS exp   (rule 76)
    exp  ->  exp . tSTRICTEQUALS exp   (rule 77)
    exp  ->  exp . tSTRICTNEQUALS exp   (rule 78)
    exp  ->  exp . '<' exp   (rule 79)
    exp  ->  exp . '>' exp   (rule 80)
    exp  ->  exp . tLEQUALS exp   (rule 81)
    exp  ->  exp . tGEQUALS exp   (rule 82)
    exp  ->  exp . '+' exp   (rule 83)
    exp  ->  exp . '-' exp   (rule 84)
    exp  ->  exp . '*' exp   (rule 85)
    exp  ->  exp . '/' exp   (rule 86)
    exp  ->  exp . '%' exp   (rule 87)
    exp  ->  exp . tAND exp   (rule 88)
    exp  ->  exp . tOR exp   (rule 89)

    tAND	shift, and go to state 71
    tEQUALS	shift, and go to state 72
    tGEQUALS	shift, and go to state 73
    tLEQUALS	shift, and go to state 74
    tNEQUALS	shift, and go to state 75
    tOR 	shift, and go to state 76
    tSTRICTEQUALS	shift, and go to state 77
    tSTRICTNEQUALS	shift, and go to state 78
    ')' 	shift, and go to state 158
    '<' 	shift, and go to state 79
    '>' 	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85



state 107

    exp  ->  exp . tEQUALS exp   (rule 75)
    exp  ->  exp . tNEQUALS exp   (rule 76)
    exp  ->  exp . tSTRICTEQUALS exp   (rule 77)
    exp  ->  exp . tSTRICTNEQUALS exp   (rule 78)
    exp  ->  exp . '<' exp   (rule 79)
    exp  ->  exp . '>' exp   (rule 80)
    exp  ->  exp . tLEQUALS exp   (rule 81)
    exp  ->  exp . tGEQUALS exp   (rule 82)
    exp  ->  exp . '+' exp   (rule 83)
    exp  ->  exp . '-' exp   (rule 84)
    exp  ->  exp . '*' exp   (rule 85)
    exp  ->  exp . '/' exp   (rule 86)
    exp  ->  exp . '%' exp   (rule 87)
    exp  ->  exp . tAND exp   (rule 88)
    exp  ->  exp . tOR exp   (rule 89)
    neexps  ->  exp .   (rule 121)
    neexps  ->  exp . ',' neexps   (rule 122)

    tAND	shift, and go to state 71
    tEQUALS	shift, and go to state 72
    tGEQUALS	shift, and go to state 73
    tLEQUALS	shift, and go to state 74
    tNEQUALS	shift, and go to state 75
    tOR 	shift, and go to state 76
    tSTRICTEQUALS	shift, and go to state 77
    tSTRICTNEQUALS	shift, and go to state 78
    '<' 	shift, and go to state 79
    '>' 	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85
    ',' 	shift, and go to state 159

    $default	reduce using rule 121 (neexps)



state 108

    unarypostfixexp  ->  tIDENTIFIER '(' exps . ')'   (rule 104)

    ')' 	shift, and go to state 160



state 109

    exps  ->  neexps .   (rule 110)

    $default	reduce using rule 110 (exps)



state 110

    unarypostfixexp  ->  tIDENTIFIER '.' tIDENTIFIER . '(' exps ')'   (rule 105)
    lvalue  ->  tIDENTIFIER '.' tIDENTIFIER .   (rule 124)

    '(' 	shift, and go to state 161

    $default	reduce using rule 124 (lvalue)



state 111

    exp  ->  exp . tEQUALS exp   (rule 75)
    exp  ->  exp . tNEQUALS exp   (rule 76)
    exp  ->  exp . tSTRICTEQUALS exp   (rule 77)
    exp  ->  exp . tSTRICTNEQUALS exp   (rule 78)
    exp  ->  exp . '<' exp   (rule 79)
    exp  ->  exp . '>' exp   (rule 80)
    exp  ->  exp . tLEQUALS exp   (rule 81)
    exp  ->  exp . tGEQUALS exp   (rule 82)
    exp  ->  exp . '+' exp   (rule 83)
    exp  ->  exp . '-' exp   (rule 84)
    exp  ->  exp . '*' exp   (rule 85)
    exp  ->  exp . '/' exp   (rule 86)
    exp  ->  exp . '%' exp   (rule 87)
    exp  ->  exp . tAND exp   (rule 88)
    exp  ->  exp . tOR exp   (rule 89)
    unarypostfixexp  ->  tIDENTIFIER '[' exp . ']' '(' exps ')'   (rule 106)
    lvalue  ->  tIDENTIFIER '[' exp . ']'   (rule 125)

    tAND	shift, and go to state 71
    tEQUALS	shift, and go to state 72
    tGEQUALS	shift, and go to state 73
    tLEQUALS	shift, and go to state 74
    tNEQUALS	shift, and go to state 75
    tOR 	shift, and go to state 76
    tSTRICTEQUALS	shift, and go to state 77
    tSTRICTNEQUALS	shift, and go to state 78
    '<' 	shift, and go to state 79
    '>' 	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85
    ']' 	shift, and go to state 162



state 112

    unaryexp  ->  '(' type ')' . unaryexp   (rule 96)

    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    unaryexp	go to state 163
    unarypostfixexp	go to state 41
    lvalue	go to state 61



state 113

    unarypostfixexp  ->  '(' exp ')' .   (rule 103)

    $default	reduce using rule 103 (unarypostfixexp)



state 114

    compoundstm  ->  '{' nestms '}' .   (rule 52)

    $default	reduce using rule 52 (compoundstm)



state 115

    identifiers  ->  tIDENTIFIER ',' . identifiers   (rule 13)

    tIDENTIFIER	shift, and go to state 68

    identifiers	go to state 164



state 116

    initialization  ->  '=' . exp   (rule 15)

    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    exp 	go to state 165
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 117

    decl  ->  type identifiers initialization . ';'   (rule 10)

    ';' 	shift, and go to state 166



state 118

    exp  ->  exp . tEQUALS exp   (rule 75)
    exp  ->  exp . tNEQUALS exp   (rule 76)
    exp  ->  exp . tSTRICTEQUALS exp   (rule 77)
    exp  ->  exp . tSTRICTNEQUALS exp   (rule 78)
    exp  ->  exp . '<' exp   (rule 79)
    exp  ->  exp . '>' exp   (rule 80)
    exp  ->  exp . tLEQUALS exp   (rule 81)
    exp  ->  exp . tGEQUALS exp   (rule 82)
    exp  ->  exp . '+' exp   (rule 83)
    exp  ->  exp . '-' exp   (rule 84)
    exp  ->  exp . '*' exp   (rule 85)
    exp  ->  exp . '/' exp   (rule 86)
    exp  ->  exp . '%' exp   (rule 87)
    exp  ->  exp . tAND exp   (rule 88)
    exp  ->  exp tAND exp .   (rule 88)
    exp  ->  exp . tOR exp   (rule 89)

    tEQUALS	shift, and go to state 72
    tGEQUALS	shift, and go to state 73
    tLEQUALS	shift, and go to state 74
    tNEQUALS	shift, and go to state 75
    tSTRICTEQUALS	shift, and go to state 77
    tSTRICTNEQUALS	shift, and go to state 78
    '<' 	shift, and go to state 79
    '>' 	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85

    $default	reduce using rule 88 (exp)



state 119

    exp  ->  exp . tEQUALS exp   (rule 75)
    exp  ->  exp tEQUALS exp .   (rule 75)
    exp  ->  exp . tNEQUALS exp   (rule 76)
    exp  ->  exp . tSTRICTEQUALS exp   (rule 77)
    exp  ->  exp . tSTRICTNEQUALS exp   (rule 78)
    exp  ->  exp . '<' exp   (rule 79)
    exp  ->  exp . '>' exp   (rule 80)
    exp  ->  exp . tLEQUALS exp   (rule 81)
    exp  ->  exp . tGEQUALS exp   (rule 82)
    exp  ->  exp . '+' exp   (rule 83)
    exp  ->  exp . '-' exp   (rule 84)
    exp  ->  exp . '*' exp   (rule 85)
    exp  ->  exp . '/' exp   (rule 86)
    exp  ->  exp . '%' exp   (rule 87)
    exp  ->  exp . tAND exp   (rule 88)
    exp  ->  exp . tOR exp   (rule 89)

    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85

    $default	reduce using rule 75 (exp)



state 120

    exp  ->  exp . tEQUALS exp   (rule 75)
    exp  ->  exp . tNEQUALS exp   (rule 76)
    exp  ->  exp . tSTRICTEQUALS exp   (rule 77)
    exp  ->  exp . tSTRICTNEQUALS exp   (rule 78)
    exp  ->  exp . '<' exp   (rule 79)
    exp  ->  exp . '>' exp   (rule 80)
    exp  ->  exp . tLEQUALS exp   (rule 81)
    exp  ->  exp . tGEQUALS exp   (rule 82)
    exp  ->  exp tGEQUALS exp .   (rule 82)
    exp  ->  exp . '+' exp   (rule 83)
    exp  ->  exp . '-' exp   (rule 84)
    exp  ->  exp . '*' exp   (rule 85)
    exp  ->  exp . '/' exp   (rule 86)
    exp  ->  exp . '%' exp   (rule 87)
    exp  ->  exp . tAND exp   (rule 88)
    exp  ->  exp . tOR exp   (rule 89)

    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85

    $default	reduce using rule 82 (exp)



state 121

    exp  ->  exp . tEQUALS exp   (rule 75)
    exp  ->  exp . tNEQUALS exp   (rule 76)
    exp  ->  exp . tSTRICTEQUALS exp   (rule 77)
    exp  ->  exp . tSTRICTNEQUALS exp   (rule 78)
    exp  ->  exp . '<' exp   (rule 79)
    exp  ->  exp . '>' exp   (rule 80)
    exp  ->  exp . tLEQUALS exp   (rule 81)
    exp  ->  exp tLEQUALS exp .   (rule 81)
    exp  ->  exp . tGEQUALS exp   (rule 82)
    exp  ->  exp . '+' exp   (rule 83)
    exp  ->  exp . '-' exp   (rule 84)
    exp  ->  exp . '*' exp   (rule 85)
    exp  ->  exp . '/' exp   (rule 86)
    exp  ->  exp . '%' exp   (rule 87)
    exp  ->  exp . tAND exp   (rule 88)
    exp  ->  exp . tOR exp   (rule 89)

    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85

    $default	reduce using rule 81 (exp)



state 122

    exp  ->  exp . tEQUALS exp   (rule 75)
    exp  ->  exp . tNEQUALS exp   (rule 76)
    exp  ->  exp tNEQUALS exp .   (rule 76)
    exp  ->  exp . tSTRICTEQUALS exp   (rule 77)
    exp  ->  exp . tSTRICTNEQUALS exp   (rule 78)
    exp  ->  exp . '<' exp   (rule 79)
    exp  ->  exp . '>' exp   (rule 80)
    exp  ->  exp . tLEQUALS exp   (rule 81)
    exp  ->  exp . tGEQUALS exp   (rule 82)
    exp  ->  exp . '+' exp   (rule 83)
    exp  ->  exp . '-' exp   (rule 84)
    exp  ->  exp . '*' exp   (rule 85)
    exp  ->  exp . '/' exp   (rule 86)
    exp  ->  exp . '%' exp   (rule 87)
    exp  ->  exp . tAND exp   (rule 88)
    exp  ->  exp . tOR exp   (rule 89)

    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85

    $default	reduce using rule 76 (exp)



state 123

    exp  ->  exp . tEQUALS exp   (rule 75)
    exp  ->  exp . tNEQUALS exp   (rule 76)
    exp  ->  exp . tSTRICTEQUALS exp   (rule 77)
    exp  ->  exp . tSTRICTNEQUALS exp   (rule 78)
    exp  ->  exp . '<' exp   (rule 79)
    exp  ->  exp . '>' exp   (rule 80)
    exp  ->  exp . tLEQUALS exp   (rule 81)
    exp  ->  exp . tGEQUALS exp   (rule 82)
    exp  ->  exp . '+' exp   (rule 83)
    exp  ->  exp . '-' exp   (rule 84)
    exp  ->  exp . '*' exp   (rule 85)
    exp  ->  exp . '/' exp   (rule 86)
    exp  ->  exp . '%' exp   (rule 87)
    exp  ->  exp . tAND exp   (rule 88)
    exp  ->  exp . tOR exp   (rule 89)
    exp  ->  exp tOR exp .   (rule 89)

    tEQUALS	shift, and go to state 72
    tGEQUALS	shift, and go to state 73
    tLEQUALS	shift, and go to state 74
    tNEQUALS	shift, and go to state 75
    tSTRICTEQUALS	shift, and go to state 77
    tSTRICTNEQUALS	shift, and go to state 78
    '<' 	shift, and go to state 79
    '>' 	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85

    $default	reduce using rule 89 (exp)



state 124

    exp  ->  exp . tEQUALS exp   (rule 75)
    exp  ->  exp . tNEQUALS exp   (rule 76)
    exp  ->  exp . tSTRICTEQUALS exp   (rule 77)
    exp  ->  exp tSTRICTEQUALS exp .   (rule 77)
    exp  ->  exp . tSTRICTNEQUALS exp   (rule 78)
    exp  ->  exp . '<' exp   (rule 79)
    exp  ->  exp . '>' exp   (rule 80)
    exp  ->  exp . tLEQUALS exp   (rule 81)
    exp  ->  exp . tGEQUALS exp   (rule 82)
    exp  ->  exp . '+' exp   (rule 83)
    exp  ->  exp . '-' exp   (rule 84)
    exp  ->  exp . '*' exp   (rule 85)
    exp  ->  exp . '/' exp   (rule 86)
    exp  ->  exp . '%' exp   (rule 87)
    exp  ->  exp . tAND exp   (rule 88)
    exp  ->  exp . tOR exp   (rule 89)

    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85

    $default	reduce using rule 77 (exp)



state 125

    exp  ->  exp . tEQUALS exp   (rule 75)
    exp  ->  exp . tNEQUALS exp   (rule 76)
    exp  ->  exp . tSTRICTEQUALS exp   (rule 77)
    exp  ->  exp . tSTRICTNEQUALS exp   (rule 78)
    exp  ->  exp tSTRICTNEQUALS exp .   (rule 78)
    exp  ->  exp . '<' exp   (rule 79)
    exp  ->  exp . '>' exp   (rule 80)
    exp  ->  exp . tLEQUALS exp   (rule 81)
    exp  ->  exp . tGEQUALS exp   (rule 82)
    exp  ->  exp . '+' exp   (rule 83)
    exp  ->  exp . '-' exp   (rule 84)
    exp  ->  exp . '*' exp   (rule 85)
    exp  ->  exp . '/' exp   (rule 86)
    exp  ->  exp . '%' exp   (rule 87)
    exp  ->  exp . tAND exp   (rule 88)
    exp  ->  exp . tOR exp   (rule 89)

    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85

    $default	reduce using rule 78 (exp)



state 126

    exp  ->  exp . tEQUALS exp   (rule 75)
    exp  ->  exp . tNEQUALS exp   (rule 76)
    exp  ->  exp . tSTRICTEQUALS exp   (rule 77)
    exp  ->  exp . tSTRICTNEQUALS exp   (rule 78)
    exp  ->  exp . '<' exp   (rule 79)
    exp  ->  exp '<' exp .   (rule 79)
    exp  ->  exp . '>' exp   (rule 80)
    exp  ->  exp . tLEQUALS exp   (rule 81)
    exp  ->  exp . tGEQUALS exp   (rule 82)
    exp  ->  exp . '+' exp   (rule 83)
    exp  ->  exp . '-' exp   (rule 84)
    exp  ->  exp . '*' exp   (rule 85)
    exp  ->  exp . '/' exp   (rule 86)
    exp  ->  exp . '%' exp   (rule 87)
    exp  ->  exp . tAND exp   (rule 88)
    exp  ->  exp . tOR exp   (rule 89)

    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85

    $default	reduce using rule 79 (exp)



state 127

    exp  ->  exp . tEQUALS exp   (rule 75)
    exp  ->  exp . tNEQUALS exp   (rule 76)
    exp  ->  exp . tSTRICTEQUALS exp   (rule 77)
    exp  ->  exp . tSTRICTNEQUALS exp   (rule 78)
    exp  ->  exp . '<' exp   (rule 79)
    exp  ->  exp . '>' exp   (rule 80)
    exp  ->  exp '>' exp .   (rule 80)
    exp  ->  exp . tLEQUALS exp   (rule 81)
    exp  ->  exp . tGEQUALS exp   (rule 82)
    exp  ->  exp . '+' exp   (rule 83)
    exp  ->  exp . '-' exp   (rule 84)
    exp  ->  exp . '*' exp   (rule 85)
    exp  ->  exp . '/' exp   (rule 86)
    exp  ->  exp . '%' exp   (rule 87)
    exp  ->  exp . tAND exp   (rule 88)
    exp  ->  exp . tOR exp   (rule 89)

    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85

    $default	reduce using rule 80 (exp)



state 128

    exp  ->  exp . tEQUALS exp   (rule 75)
    exp  ->  exp . tNEQUALS exp   (rule 76)
    exp  ->  exp . tSTRICTEQUALS exp   (rule 77)
    exp  ->  exp . tSTRICTNEQUALS exp   (rule 78)
    exp  ->  exp . '<' exp   (rule 79)
    exp  ->  exp . '>' exp   (rule 80)
    exp  ->  exp . tLEQUALS exp   (rule 81)
    exp  ->  exp . tGEQUALS exp   (rule 82)
    exp  ->  exp . '+' exp   (rule 83)
    exp  ->  exp '+' exp .   (rule 83)
    exp  ->  exp . '-' exp   (rule 84)
    exp  ->  exp . '*' exp   (rule 85)
    exp  ->  exp . '/' exp   (rule 86)
    exp  ->  exp . '%' exp   (rule 87)
    exp  ->  exp . tAND exp   (rule 88)
    exp  ->  exp . tOR exp   (rule 89)

    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85

    $default	reduce using rule 83 (exp)



state 129

    exp  ->  exp . tEQUALS exp   (rule 75)
    exp  ->  exp . tNEQUALS exp   (rule 76)
    exp  ->  exp . tSTRICTEQUALS exp   (rule 77)
    exp  ->  exp . tSTRICTNEQUALS exp   (rule 78)
    exp  ->  exp . '<' exp   (rule 79)
    exp  ->  exp . '>' exp   (rule 80)
    exp  ->  exp . tLEQUALS exp   (rule 81)
    exp  ->  exp . tGEQUALS exp   (rule 82)
    exp  ->  exp . '+' exp   (rule 83)
    exp  ->  exp . '-' exp   (rule 84)
    exp  ->  exp '-' exp .   (rule 84)
    exp  ->  exp . '*' exp   (rule 85)
    exp  ->  exp . '/' exp   (rule 86)
    exp  ->  exp . '%' exp   (rule 87)
    exp  ->  exp . tAND exp   (rule 88)
    exp  ->  exp . tOR exp   (rule 89)

    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85

    $default	reduce using rule 84 (exp)



state 130

    exp  ->  exp . tEQUALS exp   (rule 75)
    exp  ->  exp . tNEQUALS exp   (rule 76)
    exp  ->  exp . tSTRICTEQUALS exp   (rule 77)
    exp  ->  exp . tSTRICTNEQUALS exp   (rule 78)
    exp  ->  exp . '<' exp   (rule 79)
    exp  ->  exp . '>' exp   (rule 80)
    exp  ->  exp . tLEQUALS exp   (rule 81)
    exp  ->  exp . tGEQUALS exp   (rule 82)
    exp  ->  exp . '+' exp   (rule 83)
    exp  ->  exp . '-' exp   (rule 84)
    exp  ->  exp . '*' exp   (rule 85)
    exp  ->  exp '*' exp .   (rule 85)
    exp  ->  exp . '/' exp   (rule 86)
    exp  ->  exp . '%' exp   (rule 87)
    exp  ->  exp . tAND exp   (rule 88)
    exp  ->  exp . tOR exp   (rule 89)

    '%' 	shift, and go to state 85

    $default	reduce using rule 85 (exp)



state 131

    exp  ->  exp . tEQUALS exp   (rule 75)
    exp  ->  exp . tNEQUALS exp   (rule 76)
    exp  ->  exp . tSTRICTEQUALS exp   (rule 77)
    exp  ->  exp . tSTRICTNEQUALS exp   (rule 78)
    exp  ->  exp . '<' exp   (rule 79)
    exp  ->  exp . '>' exp   (rule 80)
    exp  ->  exp . tLEQUALS exp   (rule 81)
    exp  ->  exp . tGEQUALS exp   (rule 82)
    exp  ->  exp . '+' exp   (rule 83)
    exp  ->  exp . '-' exp   (rule 84)
    exp  ->  exp . '*' exp   (rule 85)
    exp  ->  exp . '/' exp   (rule 86)
    exp  ->  exp '/' exp .   (rule 86)
    exp  ->  exp . '%' exp   (rule 87)
    exp  ->  exp . tAND exp   (rule 88)
    exp  ->  exp . tOR exp   (rule 89)

    '%' 	shift, and go to state 85

    $default	reduce using rule 86 (exp)



state 132

    exp  ->  exp . tEQUALS exp   (rule 75)
    exp  ->  exp . tNEQUALS exp   (rule 76)
    exp  ->  exp . tSTRICTEQUALS exp   (rule 77)
    exp  ->  exp . tSTRICTNEQUALS exp   (rule 78)
    exp  ->  exp . '<' exp   (rule 79)
    exp  ->  exp . '>' exp   (rule 80)
    exp  ->  exp . tLEQUALS exp   (rule 81)
    exp  ->  exp . tGEQUALS exp   (rule 82)
    exp  ->  exp . '+' exp   (rule 83)
    exp  ->  exp . '-' exp   (rule 84)
    exp  ->  exp . '*' exp   (rule 85)
    exp  ->  exp . '/' exp   (rule 86)
    exp  ->  exp . '%' exp   (rule 87)
    exp  ->  exp '%' exp .   (rule 87)
    exp  ->  exp . tAND exp   (rule 88)
    exp  ->  exp . tOR exp   (rule 89)


    $default	reduce using rule 87 (exp)



state 133

    exp  ->  lvalue '=' exp .   (rule 74)
    exp  ->  exp . tEQUALS exp   (rule 75)
    exp  ->  exp . tNEQUALS exp   (rule 76)
    exp  ->  exp . tSTRICTEQUALS exp   (rule 77)
    exp  ->  exp . tSTRICTNEQUALS exp   (rule 78)
    exp  ->  exp . '<' exp   (rule 79)
    exp  ->  exp . '>' exp   (rule 80)
    exp  ->  exp . tLEQUALS exp   (rule 81)
    exp  ->  exp . tGEQUALS exp   (rule 82)
    exp  ->  exp . '+' exp   (rule 83)
    exp  ->  exp . '-' exp   (rule 84)
    exp  ->  exp . '*' exp   (rule 85)
    exp  ->  exp . '/' exp   (rule 86)
    exp  ->  exp . '%' exp   (rule 87)
    exp  ->  exp . tAND exp   (rule 88)
    exp  ->  exp . tOR exp   (rule 89)

    tAND	shift, and go to state 71
    tEQUALS	shift, and go to state 72
    tGEQUALS	shift, and go to state 73
    tLEQUALS	shift, and go to state 74
    tNEQUALS	shift, and go to state 75
    tOR 	shift, and go to state 76
    tSTRICTEQUALS	shift, and go to state 77
    tSTRICTNEQUALS	shift, and go to state 78
    '<' 	shift, and go to state 79
    '>' 	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85

    $default	reduce using rule 74 (exp)



state 134

    stm  ->  tIF '(' exp ')' . stm   (rule 58)
    stm  ->  tIF '(' exp ')' . stm tELSE stm   (rule 59)

    tIF 	shift, and go to state 1
    tRETURN	shift, and go to state 2
    tWHILE	shift, and go to state 3
    tFOR	shift, and go to state 4
    tVAR	shift, and go to state 7
    tGLOBAL	shift, and go to state 8
    tCONST	shift, and go to state 9
    tNULL	shift, and go to state 10
    tBREAK	shift, and go to state 11
    tCONTINUE	shift, and go to state 12
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tSWITCH	shift, and go to state 17
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    ';' 	shift, and go to state 24
    '(' 	shift, and go to state 25
    '{' 	shift, and go to state 26
    '!' 	shift, and go to state 27

    decl	go to state 31
    type	go to state 32
    compoundstm	go to state 36
    stm 	go to state 167
    exp 	go to state 39
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 135

    stm  ->  tWHILE '(' exp ')' . stm   (rule 60)

    tIF 	shift, and go to state 1
    tRETURN	shift, and go to state 2
    tWHILE	shift, and go to state 3
    tFOR	shift, and go to state 4
    tVAR	shift, and go to state 7
    tGLOBAL	shift, and go to state 8
    tCONST	shift, and go to state 9
    tNULL	shift, and go to state 10
    tBREAK	shift, and go to state 11
    tCONTINUE	shift, and go to state 12
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tSWITCH	shift, and go to state 17
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    ';' 	shift, and go to state 24
    '(' 	shift, and go to state 25
    '{' 	shift, and go to state 26
    '!' 	shift, and go to state 27

    decl	go to state 31
    type	go to state 32
    compoundstm	go to state 36
    stm 	go to state 168
    exp 	go to state 39
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 136

    simpledecl  ->  tVAR tIDENTIFIER . initialization   (rule 11)

    '=' 	shift, and go to state 116

    $default	reduce using rule 14 (initialization)

    initialization	go to state 169



state 137

    stm  ->  tFOR '(' forinits ';' . exp ';' exps ')' stm   (rule 61)

    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    exp 	go to state 170
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 138

    neforinits  ->  forinit ',' . neforinits   (rule 71)

    tVAR	shift, and go to state 91
    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    simpledecl	go to state 92
    neforinits	go to state 171
    forinit	go to state 95
    exp 	go to state 96
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 139

    optvar  ->  tVAR .   (rule 41)

    $default	reduce using rule 41 (optvar)



state 140

    formal  ->  optvar . tIDENTIFIER   (rule 50)

    tIDENTIFIER	shift, and go to state 172



state 141

    function  ->  tFUNCTION tIDENTIFIER '(' formals . ')' compoundstm   (rule 43)

    ')' 	shift, and go to state 173



state 142

    formals  ->  neformals .   (rule 47)

    $default	reduce using rule 47 (formals)



state 143

    neformals  ->  formal .   (rule 48)
    neformals  ->  formal . ',' neformals   (rule 49)

    ',' 	shift, and go to state 174

    $default	reduce using rule 48 (neformals)



state 144

    function  ->  tMETHOD tIDENTIFIER '(' formals . ')' compoundstm   (rule 44)

    ')' 	shift, and go to state 175



state 145

    unarypostfixexp  ->  tNEW tIDENTIFIER '(' exps . ')'   (rule 108)

    ')' 	shift, and go to state 176



state 146

    lvalue  ->  tTHIS '[' exp ']' .   (rule 126)

    $default	reduce using rule 126 (lvalue)



state 147

    ext_type  ->  tINT .   (rule 22)

    $default	reduce using rule 22 (ext_type)



state 148

    ext_type  ->  tBOOL .   (rule 19)

    $default	reduce using rule 19 (ext_type)



state 149

    ext_type  ->  tLONG .   (rule 20)

    $default	reduce using rule 20 (ext_type)



state 150

    ext_type  ->  tBYTE .   (rule 23)

    $default	reduce using rule 23 (ext_type)



state 151

    ext_type  ->  tSTRING .   (rule 24)

    $default	reduce using rule 24 (ext_type)



state 152

    ext_type  ->  tFLOAT .   (rule 25)

    $default	reduce using rule 25 (ext_type)



state 153

    ext_type  ->  tDOUBLE .   (rule 26)

    $default	reduce using rule 26 (ext_type)



state 154

    ext_type  ->  tSHORT .   (rule 21)

    $default	reduce using rule 21 (ext_type)



state 155

    ext_type  ->  tMEMBUFFER .   (rule 27)

    $default	reduce using rule 27 (ext_type)



state 156

    ext_returns  ->  ext_type .   (rule 39)

    $default	reduce using rule 39 (ext_returns)



state 157

    external  ->  tEXTERNAL tSTRINGCONST call_type ext_returns . tIDENTIFIER '(' ext_formals ')' ';'   (rule 42)

    tIDENTIFIER	shift, and go to state 177



state 158

    stm  ->  tSWITCH '(' exp ')' . '{' dcases '}'   (rule 67)

    '{' 	shift, and go to state 178



state 159

    neexps  ->  exp ',' . neexps   (rule 122)

    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    exp 	go to state 107
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    neexps	go to state 179
    lvalue	go to state 42



state 160

    unarypostfixexp  ->  tIDENTIFIER '(' exps ')' .   (rule 104)

    $default	reduce using rule 104 (unarypostfixexp)



state 161

    unarypostfixexp  ->  tIDENTIFIER '.' tIDENTIFIER '(' . exps ')'   (rule 105)

    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    $default	reduce using rule 109 (exps)

    exp 	go to state 107
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    exps	go to state 180
    neexps	go to state 109
    lvalue	go to state 42



state 162

    unarypostfixexp  ->  tIDENTIFIER '[' exp ']' . '(' exps ')'   (rule 106)
    lvalue  ->  tIDENTIFIER '[' exp ']' .   (rule 125)

    '(' 	shift, and go to state 181

    $default	reduce using rule 125 (lvalue)



state 163

    unaryexp  ->  '(' type ')' unaryexp .   (rule 96)

    $default	reduce using rule 96 (unaryexp)



state 164

    identifiers  ->  tIDENTIFIER ',' identifiers .   (rule 13)

    $default	reduce using rule 13 (identifiers)



state 165

    initialization  ->  '=' exp .   (rule 15)
    exp  ->  exp . tEQUALS exp   (rule 75)
    exp  ->  exp . tNEQUALS exp   (rule 76)
    exp  ->  exp . tSTRICTEQUALS exp   (rule 77)
    exp  ->  exp . tSTRICTNEQUALS exp   (rule 78)
    exp  ->  exp . '<' exp   (rule 79)
    exp  ->  exp . '>' exp   (rule 80)
    exp  ->  exp . tLEQUALS exp   (rule 81)
    exp  ->  exp . tGEQUALS exp   (rule 82)
    exp  ->  exp . '+' exp   (rule 83)
    exp  ->  exp . '-' exp   (rule 84)
    exp  ->  exp . '*' exp   (rule 85)
    exp  ->  exp . '/' exp   (rule 86)
    exp  ->  exp . '%' exp   (rule 87)
    exp  ->  exp . tAND exp   (rule 88)
    exp  ->  exp . tOR exp   (rule 89)

    tAND	shift, and go to state 71
    tEQUALS	shift, and go to state 72
    tGEQUALS	shift, and go to state 73
    tLEQUALS	shift, and go to state 74
    tNEQUALS	shift, and go to state 75
    tOR 	shift, and go to state 76
    tSTRICTEQUALS	shift, and go to state 77
    tSTRICTNEQUALS	shift, and go to state 78
    '<' 	shift, and go to state 79
    '>' 	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85

    $default	reduce using rule 15 (initialization)



state 166

    decl  ->  type identifiers initialization ';' .   (rule 10)

    $default	reduce using rule 10 (decl)



state 167

    stm  ->  tIF '(' exp ')' stm .   (rule 58)
    stm  ->  tIF '(' exp ')' stm . tELSE stm   (rule 59)

    tELSE	shift, and go to state 182

    $default	reduce using rule 58 (stm)



state 168

    stm  ->  tWHILE '(' exp ')' stm .   (rule 60)

    $default	reduce using rule 60 (stm)



state 169

    simpledecl  ->  tVAR tIDENTIFIER initialization .   (rule 11)

    $default	reduce using rule 11 (simpledecl)



state 170

    stm  ->  tFOR '(' forinits ';' exp . ';' exps ')' stm   (rule 61)
    exp  ->  exp . tEQUALS exp   (rule 75)
    exp  ->  exp . tNEQUALS exp   (rule 76)
    exp  ->  exp . tSTRICTEQUALS exp   (rule 77)
    exp  ->  exp . tSTRICTNEQUALS exp   (rule 78)
    exp  ->  exp . '<' exp   (rule 79)
    exp  ->  exp . '>' exp   (rule 80)
    exp  ->  exp . tLEQUALS exp   (rule 81)
    exp  ->  exp . tGEQUALS exp   (rule 82)
    exp  ->  exp . '+' exp   (rule 83)
    exp  ->  exp . '-' exp   (rule 84)
    exp  ->  exp . '*' exp   (rule 85)
    exp  ->  exp . '/' exp   (rule 86)
    exp  ->  exp . '%' exp   (rule 87)
    exp  ->  exp . tAND exp   (rule 88)
    exp  ->  exp . tOR exp   (rule 89)

    tAND	shift, and go to state 71
    tEQUALS	shift, and go to state 72
    tGEQUALS	shift, and go to state 73
    tLEQUALS	shift, and go to state 74
    tNEQUALS	shift, and go to state 75
    tOR 	shift, and go to state 76
    tSTRICTEQUALS	shift, and go to state 77
    tSTRICTNEQUALS	shift, and go to state 78
    '<' 	shift, and go to state 79
    '>' 	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85
    ';' 	shift, and go to state 183



state 171

    neforinits  ->  forinit ',' neforinits .   (rule 71)

    $default	reduce using rule 71 (neforinits)



state 172

    formal  ->  optvar tIDENTIFIER .   (rule 50)

    $default	reduce using rule 50 (formal)



state 173

    function  ->  tFUNCTION tIDENTIFIER '(' formals ')' . compoundstm   (rule 43)

    '{' 	shift, and go to state 26

    compoundstm	go to state 184



state 174

    neformals  ->  formal ',' . neformals   (rule 49)

    tVAR	shift, and go to state 139

    $default	reduce using rule 40 (optvar)

    optvar	go to state 140
    neformals	go to state 185
    formal	go to state 143



state 175

    function  ->  tMETHOD tIDENTIFIER '(' formals ')' . compoundstm   (rule 44)

    '{' 	shift, and go to state 26

    compoundstm	go to state 186



state 176

    unarypostfixexp  ->  tNEW tIDENTIFIER '(' exps ')' .   (rule 108)

    $default	reduce using rule 108 (unarypostfixexp)



state 177

    external  ->  tEXTERNAL tSTRINGCONST call_type ext_returns tIDENTIFIER . '(' ext_formals ')' ';'   (rule 42)

    '(' 	shift, and go to state 187



state 178

    stm  ->  tSWITCH '(' exp ')' '{' . dcases '}'   (rule 67)

    tCASE	shift, and go to state 188
    tDEFAULT	shift, and go to state 189

    tDEFAULT	[reduce using rule 114 (case_branches)]
    '}' 	reduce using rule 114 (case_branches)
    '}' 	[reduce using rule 119 (default_branch)]
    $default	reduce using rule 114 (case_branches)

    dcases	go to state 190
    case_branches	go to state 191
    case_branch	go to state 192
    default_branch	go to state 193



state 179

    neexps  ->  exp ',' neexps .   (rule 122)

    $default	reduce using rule 122 (neexps)



state 180

    unarypostfixexp  ->  tIDENTIFIER '.' tIDENTIFIER '(' exps . ')'   (rule 105)

    ')' 	shift, and go to state 194



state 181

    unarypostfixexp  ->  tIDENTIFIER '[' exp ']' '(' . exps ')'   (rule 106)

    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    $default	reduce using rule 109 (exps)

    exp 	go to state 107
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    exps	go to state 195
    neexps	go to state 109
    lvalue	go to state 42



state 182

    stm  ->  tIF '(' exp ')' stm tELSE . stm   (rule 59)

    tIF 	shift, and go to state 1
    tRETURN	shift, and go to state 2
    tWHILE	shift, and go to state 3
    tFOR	shift, and go to state 4
    tVAR	shift, and go to state 7
    tGLOBAL	shift, and go to state 8
    tCONST	shift, and go to state 9
    tNULL	shift, and go to state 10
    tBREAK	shift, and go to state 11
    tCONTINUE	shift, and go to state 12
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tSWITCH	shift, and go to state 17
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    ';' 	shift, and go to state 24
    '(' 	shift, and go to state 25
    '{' 	shift, and go to state 26
    '!' 	shift, and go to state 27

    decl	go to state 31
    type	go to state 32
    compoundstm	go to state 36
    stm 	go to state 196
    exp 	go to state 39
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 183

    stm  ->  tFOR '(' forinits ';' exp ';' . exps ')' stm   (rule 61)

    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    $default	reduce using rule 109 (exps)

    exp 	go to state 107
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    exps	go to state 197
    neexps	go to state 109
    lvalue	go to state 42



state 184

    function  ->  tFUNCTION tIDENTIFIER '(' formals ')' compoundstm .   (rule 43)

    $default	reduce using rule 43 (function)



state 185

    neformals  ->  formal ',' neformals .   (rule 49)

    $default	reduce using rule 49 (neformals)



state 186

    function  ->  tMETHOD tIDENTIFIER '(' formals ')' compoundstm .   (rule 44)

    $default	reduce using rule 44 (function)



state 187

    external  ->  tEXTERNAL tSTRINGCONST call_type ext_returns tIDENTIFIER '(' . ext_formals ')' ';'   (rule 42)

    tINT	shift, and go to state 147
    tBOOL	shift, and go to state 148
    tLONG	shift, and go to state 149
    tBYTE	shift, and go to state 150
    tSTRING	shift, and go to state 151
    tFLOAT	shift, and go to state 152
    tDOUBLE	shift, and go to state 153
    tSHORT	shift, and go to state 154
    tMEMBUFFER	shift, and go to state 155

    $default	reduce using rule 28 (ext_formals)

    ext_type	go to state 198
    ext_formals	go to state 199
    neext_formals	go to state 200
    ext_formal	go to state 201



state 188

    case_branch  ->  tCASE . unarypostfixexp ':' nestms   (rule 117)
    case_branch  ->  tCASE . unarypostfixexp ':'   (rule 118)

    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 202
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '(' 	shift, and go to state 203

    unarypostfixexp	go to state 204
    lvalue	go to state 61



state 189

    default_branch  ->  tDEFAULT . ':' nestms   (rule 120)

    ':' 	shift, and go to state 205



state 190

    stm  ->  tSWITCH '(' exp ')' '{' dcases . '}'   (rule 67)

    '}' 	shift, and go to state 206



state 191

    dcases  ->  case_branches .   (rule 112)
    dcases  ->  case_branches . default_branch   (rule 113)

    tDEFAULT	shift, and go to state 189

    '}' 	reduce using rule 112 (dcases)
    '}' 	[reduce using rule 119 (default_branch)]
    $default	reduce using rule 112 (dcases)

    default_branch	go to state 207



state 192

    case_branches  ->  case_branch .   (rule 115)
    case_branches  ->  case_branch . case_branches   (rule 116)

    tCASE	shift, and go to state 188

    tDEFAULT	reduce using rule 114 (case_branches)
    tDEFAULT	[reduce using rule 115 (case_branches)]
    '}' 	reduce using rule 114 (case_branches)
    '}' 	[reduce using rule 115 (case_branches)]
    $default	reduce using rule 114 (case_branches)

    case_branches	go to state 208
    case_branch	go to state 192



state 193

    dcases  ->  default_branch .   (rule 111)

    $default	reduce using rule 111 (dcases)



state 194

    unarypostfixexp  ->  tIDENTIFIER '.' tIDENTIFIER '(' exps ')' .   (rule 105)

    $default	reduce using rule 105 (unarypostfixexp)



state 195

    unarypostfixexp  ->  tIDENTIFIER '[' exp ']' '(' exps . ')'   (rule 106)

    ')' 	shift, and go to state 209



state 196

    stm  ->  tIF '(' exp ')' stm tELSE stm .   (rule 59)

    $default	reduce using rule 59 (stm)



state 197

    stm  ->  tFOR '(' forinits ';' exp ';' exps . ')' stm   (rule 61)

    ')' 	shift, and go to state 210



state 198

    ext_formal  ->  ext_type .   (rule 32)
    ext_formal  ->  ext_type . tIDENTIFIER   (rule 33)

    tIDENTIFIER	shift, and go to state 211

    $default	reduce using rule 32 (ext_formal)



state 199

    external  ->  tEXTERNAL tSTRINGCONST call_type ext_returns tIDENTIFIER '(' ext_formals . ')' ';'   (rule 42)

    ')' 	shift, and go to state 212



state 200

    ext_formals  ->  neext_formals .   (rule 29)

    $default	reduce using rule 29 (ext_formals)



state 201

    neext_formals  ->  ext_formal .   (rule 30)
    neext_formals  ->  ext_formal . ',' neext_formals   (rule 31)

    ',' 	shift, and go to state 213

    $default	reduce using rule 30 (neext_formals)



state 202

    unarypostfixexp  ->  tIDENTIFIER . '(' exps ')'   (rule 104)
    unarypostfixexp  ->  tIDENTIFIER . '.' tIDENTIFIER '(' exps ')'   (rule 105)
    unarypostfixexp  ->  tIDENTIFIER . '[' exp ']' '(' exps ')'   (rule 106)
    lvalue  ->  tIDENTIFIER .   (rule 123)
    lvalue  ->  tIDENTIFIER . '.' tIDENTIFIER   (rule 124)
    lvalue  ->  tIDENTIFIER . '[' exp ']'   (rule 125)

    '(' 	shift, and go to state 57
    '.' 	shift, and go to state 58
    '[' 	shift, and go to state 59

    $default	reduce using rule 123 (lvalue)



state 203

    unarypostfixexp  ->  '(' . exp ')'   (rule 103)

    tNULL	shift, and go to state 10
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    '(' 	shift, and go to state 25
    '!' 	shift, and go to state 27

    exp 	go to state 63
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 204

    case_branch  ->  tCASE unarypostfixexp . ':' nestms   (rule 117)
    case_branch  ->  tCASE unarypostfixexp . ':'   (rule 118)

    ':' 	shift, and go to state 214



state 205

    default_branch  ->  tDEFAULT ':' . nestms   (rule 120)

    tIF 	shift, and go to state 1
    tRETURN	shift, and go to state 2
    tWHILE	shift, and go to state 3
    tFOR	shift, and go to state 4
    tVAR	shift, and go to state 7
    tGLOBAL	shift, and go to state 8
    tCONST	shift, and go to state 9
    tNULL	shift, and go to state 10
    tBREAK	shift, and go to state 11
    tCONTINUE	shift, and go to state 12
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tSWITCH	shift, and go to state 17
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    ';' 	shift, and go to state 24
    '(' 	shift, and go to state 25
    '{' 	shift, and go to state 26
    '!' 	shift, and go to state 27

    decl	go to state 31
    type	go to state 32
    compoundstm	go to state 36
    nestms	go to state 215
    stm 	go to state 38
    exp 	go to state 39
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 206

    stm  ->  tSWITCH '(' exp ')' '{' dcases '}' .   (rule 67)

    $default	reduce using rule 67 (stm)



state 207

    dcases  ->  case_branches default_branch .   (rule 113)

    $default	reduce using rule 113 (dcases)



state 208

    case_branches  ->  case_branch case_branches .   (rule 116)

    $default	reduce using rule 116 (case_branches)



state 209

    unarypostfixexp  ->  tIDENTIFIER '[' exp ']' '(' exps ')' .   (rule 106)

    $default	reduce using rule 106 (unarypostfixexp)



state 210

    stm  ->  tFOR '(' forinits ';' exp ';' exps ')' . stm   (rule 61)

    tIF 	shift, and go to state 1
    tRETURN	shift, and go to state 2
    tWHILE	shift, and go to state 3
    tFOR	shift, and go to state 4
    tVAR	shift, and go to state 7
    tGLOBAL	shift, and go to state 8
    tCONST	shift, and go to state 9
    tNULL	shift, and go to state 10
    tBREAK	shift, and go to state 11
    tCONTINUE	shift, and go to state 12
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tSWITCH	shift, and go to state 17
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    ';' 	shift, and go to state 24
    '(' 	shift, and go to state 25
    '{' 	shift, and go to state 26
    '!' 	shift, and go to state 27

    decl	go to state 31
    type	go to state 32
    compoundstm	go to state 36
    stm 	go to state 216
    exp 	go to state 39
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 211

    ext_formal  ->  ext_type tIDENTIFIER .   (rule 33)

    $default	reduce using rule 33 (ext_formal)



state 212

    external  ->  tEXTERNAL tSTRINGCONST call_type ext_returns tIDENTIFIER '(' ext_formals ')' . ';'   (rule 42)

    ';' 	shift, and go to state 217



state 213

    neext_formals  ->  ext_formal ',' . neext_formals   (rule 31)

    tINT	shift, and go to state 147
    tBOOL	shift, and go to state 148
    tLONG	shift, and go to state 149
    tBYTE	shift, and go to state 150
    tSTRING	shift, and go to state 151
    tFLOAT	shift, and go to state 152
    tDOUBLE	shift, and go to state 153
    tSHORT	shift, and go to state 154
    tMEMBUFFER	shift, and go to state 155

    ext_type	go to state 198
    neext_formals	go to state 218
    ext_formal	go to state 201



state 214

    case_branch  ->  tCASE unarypostfixexp ':' . nestms   (rule 117)
    case_branch  ->  tCASE unarypostfixexp ':' .   (rule 118)

    tIF 	shift, and go to state 1
    tRETURN	shift, and go to state 2
    tWHILE	shift, and go to state 3
    tFOR	shift, and go to state 4
    tVAR	shift, and go to state 7
    tGLOBAL	shift, and go to state 8
    tCONST	shift, and go to state 9
    tNULL	shift, and go to state 10
    tBREAK	shift, and go to state 11
    tCONTINUE	shift, and go to state 12
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tSWITCH	shift, and go to state 17
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    ';' 	shift, and go to state 24
    '(' 	shift, and go to state 25
    '{' 	shift, and go to state 26
    '!' 	shift, and go to state 27

    $default	reduce using rule 118 (case_branch)

    decl	go to state 31
    type	go to state 32
    compoundstm	go to state 36
    nestms	go to state 219
    stm 	go to state 38
    exp 	go to state 39
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 215

    nestms  ->  nestms . stm   (rule 54)
    default_branch  ->  tDEFAULT ':' nestms .   (rule 120)

    tIF 	shift, and go to state 1
    tRETURN	shift, and go to state 2
    tWHILE	shift, and go to state 3
    tFOR	shift, and go to state 4
    tVAR	shift, and go to state 7
    tGLOBAL	shift, and go to state 8
    tCONST	shift, and go to state 9
    tNULL	shift, and go to state 10
    tBREAK	shift, and go to state 11
    tCONTINUE	shift, and go to state 12
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tSWITCH	shift, and go to state 17
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    ';' 	shift, and go to state 24
    '(' 	shift, and go to state 25
    '{' 	shift, and go to state 26
    '!' 	shift, and go to state 27

    $default	reduce using rule 120 (default_branch)

    decl	go to state 31
    type	go to state 32
    compoundstm	go to state 36
    stm 	go to state 70
    exp 	go to state 39
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 216

    stm  ->  tFOR '(' forinits ';' exp ';' exps ')' stm .   (rule 61)

    $default	reduce using rule 61 (stm)



state 217

    external  ->  tEXTERNAL tSTRINGCONST call_type ext_returns tIDENTIFIER '(' ext_formals ')' ';' .   (rule 42)

    $default	reduce using rule 42 (external)



state 218

    neext_formals  ->  ext_formal ',' neext_formals .   (rule 31)

    $default	reduce using rule 31 (neext_formals)



state 219

    nestms  ->  nestms . stm   (rule 54)
    case_branch  ->  tCASE unarypostfixexp ':' nestms .   (rule 117)

    tIF 	shift, and go to state 1
    tRETURN	shift, and go to state 2
    tWHILE	shift, and go to state 3
    tFOR	shift, and go to state 4
    tVAR	shift, and go to state 7
    tGLOBAL	shift, and go to state 8
    tCONST	shift, and go to state 9
    tNULL	shift, and go to state 10
    tBREAK	shift, and go to state 11
    tCONTINUE	shift, and go to state 12
    tNEW	shift, and go to state 13
    tTHIS	shift, and go to state 14
    tSWITCH	shift, and go to state 17
    tIDENTIFIER	shift, and go to state 18
    tINTCONST	shift, and go to state 19
    tBOOLCONST	shift, and go to state 20
    tFLOATCONST	shift, and go to state 21
    tSTRINGCONST	shift, and go to state 22
    '-' 	shift, and go to state 23
    ';' 	shift, and go to state 24
    '(' 	shift, and go to state 25
    '{' 	shift, and go to state 26
    '!' 	shift, and go to state 27

    $default	reduce using rule 117 (case_branch)

    decl	go to state 31
    type	go to state 32
    compoundstm	go to state 36
    stm 	go to state 70
    exp 	go to state 39
    unaryexp	go to state 40
    unarypostfixexp	go to state 41
    lvalue	go to state 42



state 220

    $   	go to state 221



state 221

    $   	go to state 222



state 222

    $default	accept
