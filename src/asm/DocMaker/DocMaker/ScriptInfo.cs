// This file is part of Wintermute Engine
// For conditions of distribution and use, see copyright notice in license.txt
// http://dead-code.org/redir.php?target=wme

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Xml;
using System.Reflection;

namespace DeadCode.WME.DocMaker
{
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	public class ScriptInfo
	{
		private static ScriptInfo SingleInst = null;
		private static string SingleInstFilename = "";		
		//////////////////////////////////////////////////////////////////////////
		public static ScriptInfo GetInstance(string Filename)
		{
			if(SingleInst==null || Filename != SingleInstFilename)
			{
				SingleInst = new ScriptInfo();
				if (SingleInst.ReadXml(Filename))
					SingleInstFilename = Filename;
				else
					SingleInst = null;
			}
			return SingleInst;
		}

		//////////////////////////////////////////////////////////////////////////
		public ScriptInfo()
		{
		}

		//////////////////////////////////////////////////////////////////////////
		public ScriptInfo(string Dir)
		{
			Load(Dir);
		}

		//////////////////////////////////////////////////////////////////////////
		public XmlDocument WriteXml()
		{
			XmlDocument Doc = new XmlDocument();

			// header
			XmlDeclaration Decl = Doc.CreateXmlDeclaration("1.0", "utf-8", null);

			Assembly A = Assembly.GetExecutingAssembly();
			XmlComment Comment1 = Doc.CreateComment("Generated by: " + A.GetName());
			XmlComment Comment2 = Doc.CreateComment("Generated on: " + DateTime.Now.ToString());

			// root
			XmlElement RootNode = Doc.CreateElement("WmeDocs");
			Doc.InsertBefore(Decl, Doc.DocumentElement);
			Doc.AppendChild(Comment1);
			Doc.AppendChild(Comment2);
			Doc.AppendChild(RootNode);

			// script objects
			XmlElement ObjectsNode = Doc.CreateElement("ScriptObjects");
			RootNode.AppendChild(ObjectsNode);
						
			// for each script object
			foreach(ScriptObject Obj in Objects)
			{
				Obj.WriteXml(ObjectsNode);
			}

			return Doc;
		}

		//////////////////////////////////////////////////////////////////////////
		public bool ReadXml(string Filename)
		{
			try
			{
				XmlDocument Doc = new XmlDocument();
				Doc.Load(Filename);
				return ReadXml(Doc);
			}
			catch
			{
				return false;
			}
		}

		//////////////////////////////////////////////////////////////////////////
		public bool ReadXml(XmlDocument Doc)
		{
			return ReadXml(Doc, true);
		}

		//////////////////////////////////////////////////////////////////////////
		public bool ReadXml(XmlDocument Doc, bool Append)
		{
			if (Objects == null || !Append) Objects = new List<ScriptObject>();

			XmlNode Root = Doc.DocumentElement;
			if (Root == null || Root.Name != "WmeDocs") return false;

			XmlNode Node = Root.FirstChild;
			while(Node!=null)
			{
				if(Node.Name=="ScriptObjects")
				{
					Node = Node.FirstChild;
					while (Node != null)
					{
						if(Node.Name=="ScriptObject")
						{
							ScriptObject Obj = new ScriptObject();
							if (Obj.ReadXml(Node)) Objects.Add(Obj);
						}
						Node = Node.NextSibling;
					}					
					break;
				}
				Node = Node.NextSibling;
			}
			return true;
		}


		public List<ScriptObject> Objects = null;
		public Encoding SourceEncoding = Encoding.Default;

		//////////////////////////////////////////////////////////////////////////
		public bool Load(string Dir)
		{
			return Load(Dir, "*.txt");
		}

		//////////////////////////////////////////////////////////////////////////
		public bool Load(string Dir, string Pattern)
		{
			return Load(Dir, Pattern, true);
		}

		//////////////////////////////////////////////////////////////////////////
		public bool Load(string Dir, string Pattern, bool Append)
		{
			if (Objects == null || !Append) Objects = new List<ScriptObject>();
			try
			{
				string[] Files = Directory.GetFiles(Dir, Pattern);
				foreach (string Filename in Files)
				{
					ScriptObject obj = ParseFile(Filename);
					if (obj != null) Objects.Add(obj);
				}
			}
			catch
			{
				Objects.Clear();
				return false;
			}
			return true;
		}

		//////////////////////////////////////////////////////////////////////////
		private void ReadLines(string Filename, ref List<string> Lines)
		{
			StreamReader reader = null;
			try
			{
				reader = new StreamReader(Filename, SourceEncoding);
				string line;
				while ((line = reader.ReadLine()) != null)
				{
					string Token = GetToken(line);
					if (Token == "*inc")
					{
						ReadLines(Path.GetDirectoryName(Filename) + "\\" + GetData(line), ref Lines);
					}
					else Lines.Add(line);
				}
				reader.Close();
				reader = null;
			}
			catch
			{
				if (reader != null) reader.Close();
			}
		}

		//////////////////////////////////////////////////////////////////////////
		private ScriptObject ParseFile(string Filename)
		{
			ScriptObject Obj = new ScriptObject();
			Obj.BaseFilename = Path.GetFileNameWithoutExtension(Filename);

			List<string> Lines = new List<string>();
			ReadLines(Filename, ref Lines);

			ScriptItem CurrentItem = null;
			string CurrentGroup = "";
			bool InExample = false;
			string CurrentExample = "";

			foreach (string line in Lines)
			{
				string Token = GetToken(line);
				string Data = GetData(line);

				switch (Token)
				{
					case "*tit":
					case "*title":
						if (Obj.Name != "") Obj.Name += "\n";
						Obj.Name += Data;
						break;

					case "*cls":
					case "*class":
						Obj.NativeClass = Data;
						break;

					case "*des":
					case "*desc":
					case "*description":
						if (CurrentItem != null)
						{
							if (CurrentItem.Desc != "") CurrentItem.Desc += "\n";
							CurrentItem.Desc += Data;
						}
						else if(Obj!=null)
						{
							if (Obj.Desc != "") Obj.Desc += "\n";
							Obj.Desc += Data;
						}
						break;

					case "*grp":
					case "*group":
						CurrentGroup = Data;
						break;

					case "*met":
					case "*method":
					case "*con":
						CurrentItem = new ScriptMethod();
						Obj.Methods.Add((ScriptMethod)CurrentItem);

						((ScriptMethod)CurrentItem).Headers.Add(Data);
						CurrentItem.Group = CurrentGroup;

						if (Token.StartsWith("*c")) ((ScriptMethod)CurrentItem).Constructor = true;
						break;

					case "*mt2":
					case "*met2":
					case "*method2":
					case "*con2":
						if (CurrentItem != null && CurrentItem is ScriptMethod)
						{
							((ScriptMethod)CurrentItem).Headers.Add(Data);
						}
						break;

					case "*par":
					case "*param":
					case "*parameter":
					case "*opt":
					case "*optpar":
						if (CurrentItem != null && CurrentItem is ScriptMethod)
						{
							string ParamName = GetToken(Data);
							string ParamData = GetData(Data);

							if (ParamName != "")
							{
								ScriptParameter Param = new ScriptParameter();
								Param.Name = ParamName;
								Param.Desc = ParamData;

								if (Token.StartsWith("*o")) Param.Optional = true;

								((ScriptMethod)CurrentItem).Parameters.Add(Param);
								//((ScriptMethod)CurrentItem).Parameters.Sort();

							}
						}
						break;

					case "*ret":
					case "*return":
						if (CurrentItem != null && CurrentItem is ScriptMethod)
						{
							ScriptMethod Mtd = (ScriptMethod)CurrentItem;
							if (Mtd.Return != "") Mtd.Return += "\n";
							Mtd.Return += Data;
						}
						break;

					case "*rem":
					case "*remark":
						if (CurrentItem != null && CurrentItem is ScriptMethod)
						{
							ScriptMethod Mtd = (ScriptMethod)CurrentItem;
							if (Mtd.Remark != "") Mtd.Remark += "\n";
							Mtd.Remark += Data;
						}
						break;

					case "*ex_start":
						InExample = true;
						CurrentExample = "";
						break;

					case "*ex_end":
						InExample = false;
						if (CurrentExample != "" && CurrentItem != null && CurrentItem is ScriptMethod)
						{
							((ScriptMethod)CurrentItem).Examples.Add(CurrentExample);
						}
						CurrentExample = "";
						break;

					case "*atr":
					case "*attr":
					case "*attribute":
					case "*gatr":
					case "*gattr":
					case "*gattribute":						
						CurrentItem = new ScriptAttribute();
						Obj.Attributes.Add((ScriptAttribute)CurrentItem);

						CurrentItem.Name = Data;
						CurrentItem.Group = CurrentGroup;

						if (Token.StartsWith("*g")) CurrentItem.IsGlobal = true;
						break;

					case "*ro":
						if (CurrentItem != null && CurrentItem is ScriptAttribute)
						{
							((ScriptAttribute)CurrentItem).ReadOnly = true;
						}
						break;

					case "*glo":
					case "*glob":
					case "*global":
						CurrentItem = new ScriptMethod();
						Obj.Methods.Add((ScriptMethod)CurrentItem);

						((ScriptMethod)CurrentItem).Headers.Add(Data);
						((ScriptMethod)CurrentItem).IsGlobal = true;
						CurrentItem.Group = CurrentGroup;
						break;

					case "*gl2":
					case "*glo2":
					case "*glob2":
					case "*global2":
						if (CurrentItem != null && CurrentItem is ScriptMethod)
						{
							((ScriptMethod)CurrentItem).Headers.Add(Data);
						}
						break;

					case "*evn":
					case "*evt":
					case "*event":
						CurrentItem = new ScriptEvent();
						Obj.Events.Add((ScriptEvent)CurrentItem);

						CurrentItem.Name = Data;
						CurrentItem.Group = CurrentGroup;
						break;

					default:
						if (InExample && line != "")
						{
							if (CurrentExample != "") CurrentExample += "\n";
							CurrentExample += line;
						}
						break;
				}

			}
			return Obj;
		}

		//////////////////////////////////////////////////////////////////////////
		public static string GetToken(string Line)
		{
			Line = Line.TrimStart();
			string Token = "";
			foreach (char ch in Line)
			{
				if (char.IsWhiteSpace(ch)) break;
				else Token += ch;
			}
			return Token;
		}

		//////////////////////////////////////////////////////////////////////////
		public static string GetData(string Line)
		{
			Line = Line.TrimStart();
			string Data = "";

			int i;
			for (i = 0; i < Line.Length; i++)
			{
				if (char.IsWhiteSpace(Line[i])) break;
			}
			if (i >= Line.Length) return "";
			else
			{
				Data = Line.Substring(i);
				return Data.TrimStart();
			}
		}

	}

	//////////////////////////////////////////////////////////////////////////
	public class ScriptObject
	{
		public string BaseFilename = "";
		public string NativeClass = "";
		public string Name = "";
		public string Desc = "";
		public List<ScriptMethod> Methods = new List<ScriptMethod>();
		public List<ScriptAttribute> Attributes = new List<ScriptAttribute>();
		public List<ScriptEvent> Events = new List<ScriptEvent>();

		public override string ToString()
		{
			return Name;
		}

		//////////////////////////////////////////////////////////////////////////
		internal void WriteXml(XmlNode RootNode)
		{
			XmlElement Node = RootNode.OwnerDocument.CreateElement("ScriptObject");
			RootNode.AppendChild(Node);

			// base filename
			XmlElement FileNode = RootNode.OwnerDocument.CreateElement("BaseFilename");
			FileNode.AppendChild(RootNode.OwnerDocument.CreateTextNode(BaseFilename));
			Node.AppendChild(FileNode);

			// native class
			XmlElement ClassNode = RootNode.OwnerDocument.CreateElement("NativeClass");
			ClassNode.AppendChild(RootNode.OwnerDocument.CreateTextNode(NativeClass));
			Node.AppendChild(ClassNode);

			// name
			XmlElement NameNode = RootNode.OwnerDocument.CreateElement("Name");
			NameNode.AppendChild(RootNode.OwnerDocument.CreateTextNode(Name));
			Node.AppendChild(NameNode);

			// desc
			XmlElement DescNode = RootNode.OwnerDocument.CreateElement("Description");
			DescNode.AppendChild(RootNode.OwnerDocument.CreateTextNode(Desc));
			Node.AppendChild(DescNode);

			// Methods
			if(Methods.Count>0)
			{
				foreach(ScriptMethod Method in Methods)
				{
					Method.WriteXml(Node);
				}
			}

			// Attributes
			if (Attributes.Count > 0)
			{
				foreach (ScriptAttribute Attribute in Attributes)
				{
					Attribute.WriteXml(Node);
				}
			}

			// Events
			if (Events.Count > 0)
			{
				foreach (ScriptEvent Event in Events)
				{
					Event.WriteXml(Node);
				}
			}
		}


		//////////////////////////////////////////////////////////////////////////
		internal bool ReadXml(XmlNode RootNode)
		{
			XmlNode Val = null;
			XmlNode Node = RootNode.FirstChild;
			while(Node!=null)
			{
				switch(Node.Name)
				{
					case "BaseFilename":
						Val = Node.FirstChild;
						if (Val is XmlText) this.BaseFilename = Val.Value;
						break;

					case "NativeClass":
						Val = Node.FirstChild;
						if (Val is XmlText) this.NativeClass = Val.Value;
						break;

					case "Name":
						Val = Node.FirstChild;
						if(Val is XmlText) this.Name = Val.Value;
						break;

					case "Description":
						Val = Node.FirstChild;
						if (Val is XmlText) this.Desc = Val.Value;
						break;

					case "Method":
						ScriptMethod Method = new ScriptMethod();
						if (Method.ReadXml(Node)) Methods.Add(Method);
						break;

					case "Attribute":
						ScriptAttribute Attr = new ScriptAttribute();
						if (Attr.ReadXml(Node)) Attributes.Add(Attr);
						break;

					case "Event":
						ScriptEvent Event = new ScriptEvent();
						if (Event.ReadXml(Node)) Events.Add(Event);
						break;
				}
				Node = Node.NextSibling;
			}
			
			return true;
		}

	}

	//////////////////////////////////////////////////////////////////////////
	public class ScriptParameter : ScriptItem, IComparable
	{
		public bool Optional = false;

		public int CompareTo(object obj)
		{
			if (obj is ScriptParameter)
			{
				ScriptParameter temp = (ScriptParameter)obj;
				return Name.CompareTo(temp.Name);
			}
			else if (obj is string)
			{
				string temp = (string)obj;
				return Name.CompareTo(temp);
			}
			throw new ArgumentException("object is not ScriptParameter");
		}

		public override string ToString()
		{
			return Name;
		}

		//////////////////////////////////////////////////////////////////////////
		internal override void WriteXml(XmlNode RootNode)
		{
			XmlElement Node = RootNode.OwnerDocument.CreateElement("Parameter");
			Node.SetAttribute("Optional", Optional.ToString());

			base.WriteXml(Node);

			RootNode.AppendChild(Node);
		}

		//////////////////////////////////////////////////////////////////////////
		internal override bool ReadXml(XmlNode RootNode)
		{
			XmlElement Root = RootNode as XmlElement;
			if (Root == null) return false;

			try
			{
				Optional = Convert.ToBoolean(Root.GetAttribute("Optional"));
			}
			catch
			{
				Optional = false;
			}

			return base.ReadXml(RootNode);
		}

	}

	//////////////////////////////////////////////////////////////////////////
	public abstract class ScriptItem
	{
		public string Name = "";
		public string Desc = "";
		public string Remark = "";
		public List<string> Examples = new List<string>();
		public string Group = "";
		public bool IsGlobal = false;

		//////////////////////////////////////////////////////////////////////////
		public override string ToString()
		{
			return Name;
		}

		//////////////////////////////////////////////////////////////////////////
		internal virtual void WriteXml(XmlNode RootNode)
		{
			// group
			if (Group != "")
			{
				XmlElement GroupNode = RootNode.OwnerDocument.CreateElement("Group");
				GroupNode.AppendChild(RootNode.OwnerDocument.CreateTextNode(Group));
				RootNode.AppendChild(GroupNode);
			}

			// name
			if (Name != "")
			{
				XmlElement NameNode = RootNode.OwnerDocument.CreateElement("Name");
				NameNode.AppendChild(RootNode.OwnerDocument.CreateTextNode(Name));
				RootNode.AppendChild(NameNode);
			}

			// desc
			if (Desc != "")
			{
				XmlElement DescNode = RootNode.OwnerDocument.CreateElement("Description");
				DescNode.AppendChild(RootNode.OwnerDocument.CreateTextNode(Desc));
				RootNode.AppendChild(DescNode);
			}

			// Remarks
			if (Remark != "")
			{
				XmlElement RemNode = RootNode.OwnerDocument.CreateElement("Remarks");
				RemNode.AppendChild(RootNode.OwnerDocument.CreateTextNode(Remark));
				RootNode.AppendChild(RemNode);
			}

			// Examples
			if(Examples.Count>0)
			{
				foreach(string Example in Examples)
				{
					XmlElement ExNode = RootNode.OwnerDocument.CreateElement("Example");
					ExNode.AppendChild(RootNode.OwnerDocument.CreateCDataSection(Example));
					RootNode.AppendChild(ExNode);
				}
			}
		}


		//////////////////////////////////////////////////////////////////////////
		internal virtual bool ReadXml(XmlNode RootNode)
		{
			XmlElement Root = RootNode as XmlElement;
			if (Root == null) return false;

			XmlNode Val = null;
			XmlNode Node = Root.FirstChild;
			while (Node != null)
			{
				switch (Node.Name)
				{
					case "Group":
						Val = Node.FirstChild;
						if (Val is XmlText) this.Group = Val.Value;
						break;

					case "Name":
						Val = Node.FirstChild;
						if (Val is XmlText) this.Name = Val.Value;
						break;

					case "Description":
						Val = Node.FirstChild;
						if (Val is XmlText) this.Desc = Val.Value;
						break;

					case "Remarks":
						Val = Node.FirstChild;
						if (Val is XmlText) this.Remark = Val.Value;
						break;

					case "Example":
						Val = Node.FirstChild;
						if (Val is XmlText) this.Examples.Add(Val.Value);
						break;
				}

				Node = Node.NextSibling;
			}
			return true;
		}


	}

	//////////////////////////////////////////////////////////////////////////
	public class ScriptMethod : ScriptItem
	{
		public List<ScriptParameter> Parameters = new List<ScriptParameter>();
		public List<string> Headers = new List<string>();
		public string Return = "";
		public bool Constructor = false;

		//////////////////////////////////////////////////////////////////////////
		public override string ToString()
		{
			if (Headers.Count > 0) return Headers[0];
			else return base.ToString();
		}

		//////////////////////////////////////////////////////////////////////////
		internal override void WriteXml(XmlNode RootNode)
		{
			XmlElement Node = RootNode.OwnerDocument.CreateElement("Method");
			Node.SetAttribute("Global", IsGlobal.ToString());
			Node.SetAttribute("Constructor", Constructor.ToString());

			base.WriteXml(Node);

			// headers
			foreach(string Header in Headers)
			{
				XmlNode HeaderNode = RootNode.OwnerDocument.CreateElement("Signature");
				XmlNode SigNode = RootNode.OwnerDocument.CreateTextNode(Header);
				HeaderNode.AppendChild(SigNode);

				Node.AppendChild(HeaderNode);
			}

			// parameters
			foreach(ScriptParameter Param in Parameters)
			{
				Param.WriteXml(Node);
			}

			RootNode.AppendChild(Node);
		}

		//////////////////////////////////////////////////////////////////////////
		internal override bool ReadXml(XmlNode RootNode)
		{
			XmlElement Root = RootNode as XmlElement;
			if (Root == null) return false;

			try
			{
				IsGlobal = Convert.ToBoolean(Root.GetAttribute("Global"));
			}
			catch
			{
				IsGlobal = false;
			}
			
			try
			{
				Constructor = Convert.ToBoolean(Root.GetAttribute("Constructor"));
			}
			catch
			{
				Constructor = false;
			}
			

			XmlNode Val = null;
			XmlNode Node = Root.FirstChild;
			while (Node != null)
			{
				switch (Node.Name)
				{
					case "Signature":
						Val = Node.FirstChild;
						if (Val is XmlText) this.Headers.Add(Val.Value);
						break;

					case "Parameter":
						ScriptParameter Param = new ScriptParameter();
						if (Param.ReadXml(Node)) Parameters.Add(Param);
						break;
				}

				Node = Node.NextSibling;
			}
			return base.ReadXml(RootNode);
		}
	}

	//////////////////////////////////////////////////////////////////////////
	public class ScriptAttribute : ScriptItem
	{
		public bool ReadOnly = false;

		//////////////////////////////////////////////////////////////////////////
		internal override void WriteXml(XmlNode RootNode)
		{
			XmlElement Node = RootNode.OwnerDocument.CreateElement("Attribute");
			Node.SetAttribute("Global", IsGlobal.ToString());
			Node.SetAttribute("ReadOnly", ReadOnly.ToString());

			base.WriteXml(Node);
			RootNode.AppendChild(Node);
		}

		//////////////////////////////////////////////////////////////////////////
		internal override bool ReadXml(XmlNode RootNode)
		{
			XmlElement Root = RootNode as XmlElement;
			if (Root == null) return false;

			try
			{
				IsGlobal = Convert.ToBoolean(Root.GetAttribute("Global"));
			}
			catch
			{
				IsGlobal = false;
			}

			try
			{
				ReadOnly = Convert.ToBoolean(Root.GetAttribute("ReadOnly"));
			}
			catch
			{
				ReadOnly = false;
			}

			return base.ReadXml(RootNode);
		}
	}

	//////////////////////////////////////////////////////////////////////////
	public class ScriptEvent : ScriptItem
	{
		//////////////////////////////////////////////////////////////////////////
		internal override void WriteXml(XmlNode RootNode)
		{
			XmlElement Node = RootNode.OwnerDocument.CreateElement("Event");

			base.WriteXml(Node);
			RootNode.AppendChild(Node);
		}

		//////////////////////////////////////////////////////////////////////////
		internal override bool ReadXml(XmlNode RootNode)
		{
			return base.ReadXml(RootNode);
		}
	}
}
