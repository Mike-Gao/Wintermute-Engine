// ProjectDoc.cpp : implementation of the CProjectDoc class
//

#include "stdafx.h"
#include "ProjectMan.h"
#include <algorithm>

#include "MainFrm.h"
#include "ChildFrm.h"
#include "ProjectDoc.h"
#include "ProjectView.h"
#include "ViewLog.h"
#include "PackagerFilter.h"
#include "FilterScript.h"
#include "FilterExclude.h"
#include "FilterUncompressed.h"
#include "FilterCopy.h"
#include "../MFCExt/TemplateDlg.h"
#include "../MFCExt/utils_mfc.h"

#include "PackageBuilder.h"


#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

/////////////////////////////////////////////////////////////////////////////
// CProjectDoc

IMPLEMENT_DYNCREATE(CProjectDoc, CDCGFDoc)

BEGIN_MESSAGE_MAP(CProjectDoc, CDCGFDoc)
	//{{AFX_MSG_MAP(CProjectDoc)
	ON_COMMAND(ID_PROJECT_COMPILE, OnProjectCompile)
	ON_COMMAND(ID_PROJECT_RUN, OnProjectRun)
	ON_COMMAND(ID_GENERATE_GDF, OnGenerateGdf)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CProjectDoc construction/destruction


//////////////////////////////////////////////////////////////////////////
CProjectDoc::CProjectDoc()
{
	Game = ::new CAdGame();
	Game->m_EditorForceScripts = true;
	Game->m_DoNotExpandStrings = true;
	Game->Initialize1();

	m_Settings = NULL;
	SetDefaults();
}


//////////////////////////////////////////////////////////////////////////
CProjectDoc::~CProjectDoc()
{	
	Cleanup();
	delete Game;
}


//////////////////////////////////////////////////////////////////////////
HRESULT CProjectDoc::Cleanup()
{
	int i;

	for(i=0; i<m_Packages.GetSize(); i++) delete m_Packages[i];
	m_Packages.RemoveAll();


	for(i=0; i<m_Filters.GetSize(); i++) delete m_Filters[i];
	m_Filters.RemoveAll();

	SAFE_DELETE(m_Settings);

	return S_OK;
}


//////////////////////////////////////////////////////////////////////////
HRESULT CProjectDoc::SetDefaults()
{
	m_DebugMode = true;
	m_ShowFPS = true;
	m_AllowWindowed = true;
	m_CompressedSavegames = true;
	m_ConsoleMode = 1;
	m_D3D9 = false;

	m_EditorPreview = true;
	
	m_PackBuildMasterIndex = false;
	m_PackOutputFolder = ".";
	m_PackGameVersion = 0;

	m_PackAddCrashLib = false;
	m_PackAddFpsDisplay = false;
	m_PackAddDebugMode = false;

	m_PackCopyD3DX = false;

	return S_OK;
}



/////////////////////////////////////////////////////////////////////////////
// CProjectDoc serialization

void CProjectDoc::Serialize(CArchive& ar)
{
	if (ar.IsStoring())
	{
		// TODO: add storing code here
	}
	else
	{
		// TODO: add loading code here
	}
}

/////////////////////////////////////////////////////////////////////////////
// CProjectDoc diagnostics

#ifdef _DEBUG
void CProjectDoc::AssertValid() const
{
	CDCGFDoc::AssertValid();
}

void CProjectDoc::Dump(CDumpContext& dc) const
{
	CDCGFDoc::Dump(dc);
}
#endif //_DEBUG

/////////////////////////////////////////////////////////////////////////////
// CProjectDoc commands



//////////////////////////////////////////////////////////////////////////
BOOL CProjectDoc::OnSaveDocument(LPCTSTR lpszPathName) 
{
	SetCurrentDirectory(m_ProjectRoot);

	CProjectView* View = GetView();

	
	FILE* f = fopen(lpszPathName, "wt");
	if(!f) return FALSE;

	int i;

	fprintf(f, "; generated by ProjectMan\n\n");


	// save packages
	fprintf(f, "[General]\n");
	fprintf(f, "Version=%d.%d.%03d\n", DCGF_VER_MAJOR, DCGF_VER_MINOR, DCGF_VER_BUILD);
	fprintf(f, "NumPackages=%d\n", m_Packages.GetSize());
	fprintf(f, "\n");

	for(i=0; i<m_Packages.GetSize(); i++){
		m_Packages[i]->SaveSettings(f, i+1);
		fprintf(f, "\n");
	}


	// save editor settings
	fprintf(f, "[Settings]\n");
	fprintf(f, "Preview=%d\n", m_EditorPreview);
	fprintf(f, "Direct3D9=%d\n", m_D3D9);
	fprintf(f, "\n");


	// save debug settings
	fprintf(f, "[Debug]\n");
	fprintf(f, "DebugMode=%d\n", m_DebugMode);
	fprintf(f, "AllowWindowed=%d\n", m_AllowWindowed);
	fprintf(f, "ShowFPS=%d\n", m_ShowFPS);
	fprintf(f, "DebugConsole=%d\n", m_ConsoleMode);	
	if(!m_CompressedSavegames){
		fprintf(f, "CompressedSavegames=%d\n", m_CompressedSavegames);
	}
	fprintf(f, "\n");


	// save resource mapping
	fprintf(f, "[Resource]\n");
	fprintf(f, "CustomPaths=");

	SortPackagesByPriority();
	for(i=0; i<m_Packages.GetSize(); i++){
		fprintf(f, m_Packages[i]->m_Folder);
		if(i<m_Packages.GetSize()-1) fprintf(f, ";");		
	}
	fprintf(f, "\n");
/*
	if(m_PackOutputFolder!="")
		fprintf(f, "PackagePaths=%s\n", m_PackOutputFolder);
*/
  
	fprintf(f, "\n");


	// save packager settings
	fprintf(f, "[Packager]\n");
	fprintf(f, "OutputFolder=%s\n", m_PackOutputFolder);
	fprintf(f, "CopyExe=%d\n", m_PackCopyExe);
	fprintf(f, "ExeName=%s\n", m_PackExeName);
	fprintf(f, "ChangeIcon=%d\n", m_PackChangeIcon);
	fprintf(f, "IconName=%s\n", m_PackIconName);
	fprintf(f, "BindPackage=%s\n", m_BindPackage);

	fprintf(f, "CopySet=%d\n", m_PackCopySet);
	fprintf(f, "SetName=%s\n", m_PackSetName);
	fprintf(f, "ChangeIconSet=%d\n", m_PackChangeIconSet);
	fprintf(f, "IconNameSet=%s\n", m_PackIconNameSet);

	fprintf(f, "CopyD3DX=%d\n", m_PackCopyD3DX);

	fprintf(f, "AddGeData=%d\n", m_PackAddGeData);
	fprintf(f, "GdfFile=%s\n", m_PackGdfFile);
	fprintf(f, "GdfThumbnail=%s\n", m_PackGdfThumbnail);

	fprintf(f, "AddCrashLib=%d\n", m_PackAddCrashLib);
	fprintf(f, "AddFpsDisplay=%d\n", m_PackAddFpsDisplay);
	fprintf(f, "AddDebugMode=%d\n", m_PackAddDebugMode);


	fprintf(f, "\n");

	// save plugin settings
	fprintf(f, "[Plugins]\n");
	fprintf(f, "NumPlugins=%d\n", m_PluginList.GetSize());
	for(i=0; i<m_PluginList.GetSize(); i++)
	{
		fprintf(f, "Plugin%d=%s\n", i+1, m_PluginList[i]);
	}
	fprintf(f, "\n");


	// save filter settings
	for(i=0; i<m_Filters.GetSize(); i++){
		m_Filters[i]->SaveSettings(f);
		fprintf(f, "\n");
	}
	fprintf(f, "\n");

	fclose(f);


	// save settings file
	bool Error = false;

	SetCurrentDirectory(LPCSTR(m_ProjectRoot));
	
	CString SettingsFilename = GetFullPath("startup.settings");
	CString GameFilename = "";

	if(m_Settings->m_EdGame && m_Settings->m_EdGame->m_Filename)
		GameFilename = GetFullPath(m_Settings->m_EdGame->m_Filename);

	CBDynBuffer* buf = ::new CBDynBuffer(Game);
	
	m_Settings->SaveAsText(buf, 0);
	f = fopen(LPCSTR(SettingsFilename), "wt");
	if(f){
		fwrite(buf->m_Buffer, buf->GetSize(), 1, f);
		fclose(f);
	}
	else{
		MessageBox(NULL, CString(LOC("/str0046/Error writing to a file")) + " '" + SettingsFilename + "'.", LOC("/str1002/Error"), MB_ICONERROR|MB_OK);
		Error = true;
	}

	if(GameFilename!=""){		
		buf->Cleanup();
		m_Settings->m_EdGame->SaveAsText(buf, 0);
		f = fopen(LPCSTR(GameFilename), "wt");
		if(f){
			fwrite(buf->m_Buffer, buf->GetSize(), 1, f);
			fclose(f);
		}
		else{
			MessageBox(NULL, CString(LOC("/str0046/Error writing to a file")) + " '" + GameFilename + "'.", LOC("/str1002/Error"), MB_ICONERROR|MB_OK);
			Error = true;
		}
	}

	delete buf;


	SetModifiedFlag(Error);

	return CDCGFDoc::OnSaveDocument(lpszPathName);
}


//////////////////////////////////////////////////////////////////////////
BOOL CProjectDoc::OnOpenDocument(LPCTSTR lpszPathName) 
{
	if (!CDocument::OnOpenDocument(lpszPathName))
		return FALSE;
	
	Cleanup();
	SetDefaults();

	SetProjectRoot(lpszPathName);

	int i;
	char str[MAX_PATH];

	// check version
	GetPrivateProfileString("General", "Version", "0.0.0", str, MAX_PATH, lpszPathName);
	DWORD VerMajor = atoi(Entry(1, str, '.'));
	DWORD VerMinor = atoi(Entry(2, str, '.'));
	DWORD VerBuild = atoi(Entry(3, str, '.'));

	bool NewerVersion = false;
		
	if(VerMajor > DCGF_VER_MAJOR) NewerVersion = true;
	else if(VerMajor == DCGF_VER_MAJOR && VerMinor > DCGF_VER_MINOR) NewerVersion = true;
	else if(VerMajor == DCGF_VER_MAJOR && VerMinor == DCGF_VER_MINOR && VerBuild > DCGF_VER_BUILD) NewerVersion = true;

	if(NewerVersion){
		if(AfxMessageBox(LOC("/str1084/This project has been created in a newer version of WME. It is recommended that you upgrade before opening this file.\n\nDo you want to open this project anyway? (not recommended)"), MB_YESNO|MB_ICONQUESTION)!=IDYES) return FALSE;
	}
	


	// debug settings
	m_DebugMode = GetPrivateProfileInt("Debug", "DebugMode", 1, lpszPathName)!=0;
	m_AllowWindowed = GetPrivateProfileInt("Debug", "AllowWindowed", 1, lpszPathName)!=0;
	m_ShowFPS = GetPrivateProfileInt("Debug", "ShowFPS", 1, lpszPathName)!=0;
	m_CompressedSavegames = GetPrivateProfileInt("Debug", "CompressedSavegames", 1, lpszPathName)!=0;
	m_ConsoleMode = GetPrivateProfileInt("Debug", "DebugConsole", 1, lpszPathName);
	

	// editor settings
	m_EditorPreview = GetPrivateProfileInt("Settings", "Preview", 1, lpszPathName)!=0;
	m_D3D9 = GetPrivateProfileInt("Settings", "Direct3D9", 0, lpszPathName)!=0;


	// packager settings
	GetPrivateProfileString("Packager", "OutputFolder", ".", str, MAX_PATH, lpszPathName);
	m_PackOutputFolder = CString(str);

	/*
	m_PackBuildMasterIndex = GetPrivateProfileInt("Packager", "BuildMasterIndex", 1, lpszPathName)!=0;
	m_PackGameVersion = GetPrivateProfileInt("Packager", "GameVersion", 1, lpszPathName);
	*/

	m_PackCopyExe = GetPrivateProfileInt("Packager", "CopyExe", 1, lpszPathName)!=0;
	GetPrivateProfileString("Packager", "ExeName", "game.exe", str, MAX_PATH, lpszPathName);
	m_PackExeName = CString(str);
	
	m_PackChangeIcon = GetPrivateProfileInt("Packager", "ChangeIcon", 0, lpszPathName)!=0;
	GetPrivateProfileString("Packager", "IconName", "", str, MAX_PATH, lpszPathName);
	m_PackIconName = CString(str);

	GetPrivateProfileString("Packager", "BindPackage", "", str, MAX_PATH, lpszPathName);
	m_BindPackage = CString(str);


	m_PackCopySet = GetPrivateProfileInt("Packager", "CopySet", 1, lpszPathName)!=0;
	GetPrivateProfileString("Packager", "SetName", "settings.exe", str, MAX_PATH, lpszPathName);
	m_PackSetName = CString(str);

	m_PackCopyD3DX = GetPrivateProfileInt("Packager", "CopyD3DX", 0, lpszPathName)!=0;

	m_PackChangeIconSet = GetPrivateProfileInt("Packager", "ChangeIconSet", 0, lpszPathName)!=0;
	GetPrivateProfileString("Packager", "IconNameSet", "", str, MAX_PATH, lpszPathName);
	m_PackIconNameSet = CString(str);

	m_PackAddGeData = GetPrivateProfileInt("Packager", "AddGeData", 0, lpszPathName)!=0;
	GetPrivateProfileString("Packager", "GdfFile", "", str, MAX_PATH, lpszPathName);
	m_PackGdfFile = CString(str);
	GetPrivateProfileString("Packager", "GdfThumbnail", "", str, MAX_PATH, lpszPathName);
	m_PackGdfThumbnail = CString(str);

	m_PackAddCrashLib = GetPrivateProfileInt("Packager", "AddCrashLib", 0, lpszPathName)!=0;
	m_PackAddFpsDisplay = GetPrivateProfileInt("Packager", "AddFpsDisplay", 0, lpszPathName)!=0;
	m_PackAddDebugMode = GetPrivateProfileInt("Packager", "AddDebugMode", 0, lpszPathName)!=0;


	// load packages	
	int NumPackages = GetPrivateProfileInt("General", "NumPackages", 0, lpszPathName);
	for(i=0; i<NumPackages; i++)
	{
		CPackage* package = new CPackage;
		if(SUCCEEDED(package->LoadSettings(lpszPathName, i+1)))
		{
			m_Packages.Add(package);
		}
		else delete package;
	}
	ValidatePackages();


	bool PrimaryFound = false;
	for(i=0; i<m_Packages.GetSize(); i++)
	{
		if(m_Packages[i]->m_Primary)
		{
			PrimaryFound = true;
			break;
		}
	}
	if(!PrimaryFound && m_Packages.GetSize()>0) m_Packages[0]->m_Primary = true;

	// load plugin settings
	m_PluginList.RemoveAll();
	int NumPlugins = GetPrivateProfileInt("Plugins", "NumPlugins", 0, lpszPathName);
	for(i=0; i<NumPlugins; i++)
	{
		char str2[MAX_PATH];
		sprintf(str2, "Plugin%d", i+1);
		GetPrivateProfileString("Plugins", str2, "", str, MAX_PATH, lpszPathName);
		if(strcmp(str, "")!=0) m_PluginList.Add(CString(str));
	}

	// load filter settings
	CFilterExclude* FilterExclude = new CFilterExclude(this);
	FilterExclude->LoadSettings(lpszPathName);
	m_Filters.Add(FilterExclude);
	
	CFilterUncompressed* FilterUncompressed = new CFilterUncompressed(this);
	FilterUncompressed->LoadSettings(lpszPathName);
	m_Filters.Add(FilterUncompressed);

	CFilterScript* FilterScript = new CFilterScript(this);
	FilterScript->LoadSettings(lpszPathName);
	m_Filters.Add(FilterScript);

	CFilterCopy* FilterCopy = new CFilterCopy(this);
	FilterCopy->LoadSettings(lpszPathName);
	m_Filters.Add(FilterCopy);

	
	// other settings
	Game->m_Registry->SetIniName((char*)lpszPathName);
	Game->m_FileManager->SetBasePath((char*)LPCSTR(m_ProjectRoot));

	SAFE_DELETE(m_Settings);
	m_Settings = ::new CEdSettings(Game);
	if(!m_Settings || FAILED(m_Settings->LoadFile("startup.settings"))){
		MessageBox(NULL, LOC("/str0047/Error loading the settings file."), LOC("/str1002/Error"), MB_ICONERROR|MB_OK);
		SAFE_DELETE(m_Settings);
		return FALSE;
	}
	

	return TRUE;
}


//////////////////////////////////////////////////////////////////////////
BOOL CProjectDoc::OnNewDocument() 
{
	// default filter settings
	CPackagerFilter* FilterExclude = new CFilterExclude(this);
	m_Filters.Add(FilterExclude);
	
	CFilterUncompressed* FilterUncompressed = new CFilterUncompressed(this);
	m_Filters.Add(FilterUncompressed);

	CFilterScript* FilterScript = new CFilterScript(this);
	m_Filters.Add(FilterScript);
	
	CFilterCopy* FilterCopy = new CFilterCopy(this);
	m_Filters.Add(FilterCopy);


	CTemplateDlg dlg;
	dlg.m_SelectDir = true;
	dlg.m_Subdir = "project";
	dlg.m_Title = LOC("/str0129/New project");
	dlg.m_InitName = "";		
	if(dlg.DoModal()==IDOK){
		if(OnOpenDocument(dlg.m_Target + dlg.m_SelectedName + ".wpr")){
			SetPathName(dlg.m_Target + dlg.m_SelectedName + ".wpr", TRUE);
			return TRUE;
		}
		else return FALSE;
	}
	else return FALSE;
}


//////////////////////////////////////////////////////////////////////////
HRESULT CProjectDoc::SetProjectRoot(LPCSTR Filename)
{
	char drive[_MAX_DRIVE];
	char dir[_MAX_DIR];
	_splitpath(Filename, drive, dir, NULL, NULL);
	m_ProjectRoot.Format("%s%s", drive, dir);

	return S_OK;
}


//////////////////////////////////////////////////////////////////////////
CString CProjectDoc::GetFullPath(CString Filename)
{
	char FullName[MAX_PATH];
	if(!Game->m_FileManager->GetFullPath((char*)LPCSTR(Filename), FullName)){
		bool Found = false;
		for(int i=0; i<m_Packages.GetSize(); i++){
			if(m_Packages[i]->m_Primary){
				sprintf(FullName, "%s%s\\%s", m_ProjectRoot, m_Packages[i]->m_Folder, Filename);
				Found = true;
				break;
			}
		}
		if(Found) sprintf(FullName, "%s%s", m_ProjectRoot, Filename);
	}
	return CString(FullName);
}


//////////////////////////////////////////////////////////////////////////
bool CProjectDoc::IsPrimaryPackage(CString Name)
{
	for(int i=0; i<m_Packages.GetSize(); i++){
		if(m_Packages[i]->m_Folder.CompareNoCase(Name)==0 && m_Packages[i]->m_Primary) return true;
	}
	return false;
}

//////////////////////////////////////////////////////////////////////////
void CProjectDoc::ValidatePackages()
{
	bool FoundPrimary = false;
	for(int i=0; i<m_Packages.GetSize(); i++){
		CFileFind finder;
		if(!finder.FindFile(m_ProjectRoot+m_Packages[i]->m_Folder)){
			delete m_Packages[i];
			m_Packages.RemoveAt(i);
			i--;
		}
		else if(m_Packages[i]->m_Primary){
			if(FoundPrimary) m_Packages[i]->m_Primary = false;
			else FoundPrimary = true;
		}
	}

	if(!FoundPrimary && m_Packages.GetSize()>0) m_Packages[0]->m_Primary = true;
}


//////////////////////////////////////////////////////////////////////////
void CProjectDoc::OnProjectCompile() 
{
	CompilePackages();
}

//////////////////////////////////////////////////////////////////////////
bool CProjectDoc::CompilePackages(CPackage* SinglePackage)
{
	ValidatePackages();
	CPackageBuilder builder(this);

	CChildFrame* frame = (CChildFrame*)((CMainFrame*)AfxGetMainWnd())->GetActiveFrame();
	if(frame)
	{
		frame->m_Framework.SetActiveTab(frame->m_Framework.Get(6));
	}

	OnSaveDocument(GetPathName());
	bool Ret = builder.Compile(SinglePackage);

	for(int i=0; i<m_Packages.GetSize(); i++)
	{
		if(m_Packages[i]->m_Primary)
		{
			PrioritizePackage(m_Packages[i]->m_Folder);
			break;
		}
	}
	return Ret;
}

//////////////////////////////////////////////////////////////////////////
void CProjectDoc::AddWarning(CString Text, CString Filename)
{
	CProjectView* View = GetView();
	if(View && View->m_ViewLog) View->m_ViewLog->AddWarning(Text, Filename);
}


//////////////////////////////////////////////////////////////////////////
void CProjectDoc::AddError(CString Text, CString Filename)
{
	CProjectView* View = GetView();
	if(View && View->m_ViewLog) View->m_ViewLog->AddError(Text, Filename);
}


//////////////////////////////////////////////////////////////////////////
void CProjectDoc::AddInfo(CString Text, CString Filename)
{
	CProjectView* View = GetView();
	if(View && View->m_ViewLog) View->m_ViewLog->AddInfo(Text, Filename);
}


//////////////////////////////////////////////////////////////////////////
void CProjectDoc::AddLog(CString Text, CString Filename)
{
	CProjectView* View = GetView();
	if(View && View->m_ViewLog) View->m_ViewLog->AddLog(Text, Filename);
}


//////////////////////////////////////////////////////////////////////////
CString CProjectDoc::GetWMEPath()
{
	CString ExeName;
	if(m_D3D9) ExeName = "wme_D3D9.exe";
	else ExeName = "wme.exe";

	CString Path = GetRegString(HKEY_CURRENT_USER, DCGF_TOOLS_REG_PATH, "ToolsPath");
	if(Path[Path.GetLength()-1]!='\\') Path+="\\";
	CString WmePath = Path + ExeName;
	

	CFileFind finder;
	if(!finder.FindFile(WmePath)){
		CString Filter = CString(LOC("/str0130/WME runtime")) + " (" + ExeName + ")|" + ExeName + "|" + LOC("/str1003/All Files") + " (*.*)|*.*||";
		CFileDialog dlg(TRUE, NULL, NULL, OFN_HIDEREADONLY|OFN_ENABLESIZING|OFN_FILEMUSTEXIST|OFN_PATHMUSTEXIST|OFN_NOCHANGEDIR, Filter, AfxGetMainWnd());
		dlg.m_ofn.lpstrInitialDir = Path;
	
		if(dlg.DoModal()==IDOK){
			SetRegString(HKEY_CURRENT_USER, DCGF_TOOLS_REG_PATH, "ToolsPath", GetPath(dlg.GetPathName()));
			return dlg.GetPathName();
		}
		else return "";
	}
	else return WmePath;
}


//////////////////////////////////////////////////////////////////////////
void CProjectDoc::OnProjectRun() 
{
	int ShowSettings = GetRegInt(HKEY_CURRENT_USER, DCGF_TOOLS_REG_PATH, "ShowSettingsDlg", 1);

	if((GetAsyncKeyState(VK_CONTROL) & 0x8000)!=0){
		if(ShowSettings) ShowSettings = 0;
		else ShowSettings = 1;
	}

	CString WmePath = GetWMEPath();
	if(WmePath=="") return;

	OnSaveDocument(GetPathName());

	CString Params = "";
	Params += "-project \"" + GetPathName() + "\"";
	if(ShowSettings) Params += " -detect";
	
	((CDCGFApp*)AfxGetApp())->m_Active = false;
	//UINT Ret = WinExec(WmePath, SW_NORMAL);
	ShellExecute(NULL, "open", WmePath, Params, GetPath(GetPathName()), SW_NORMAL);
}


//////////////////////////////////////////////////////////////////////////
CProjectView* CProjectDoc::GetView()
{
	POSITION pos = GetFirstViewPosition();
	if(pos) return (CProjectView*)GetNextView(pos);
	else return NULL;
}


//////////////////////////////////////////////////////////////////////////
BOOL CProjectDoc::SaveModified() 
{
	CProjectView* View = GetView();
	if(View && View->m_ThreadWorking){
		MessageBeep(MB_ICONERROR);
		return FALSE;
	}
	
	return CDCGFDoc::SaveModified();
}



//////////////////////////////////////////////////////////////////////////
void CProjectDoc::PrioritizePackage(CString Name)
{
	bool WasChange = true;
	while (WasChange){
		WasChange = false;
		for(int i=0; i<m_Packages.GetSize()-1; i++){
			if(m_Packages[i]->m_Folder == Name) continue;

			if(m_Packages[i+1]->m_Folder == Name || m_Packages[i]->m_Priority < m_Packages[i+1]->m_Priority){
				CPackage* Dummy = m_Packages[i+1];
				m_Packages[i+1] = m_Packages[i];
				m_Packages[i] = Dummy;

				WasChange = true;
			}
		}
	}
	CString List = "";
	for(int i=0; i<m_Packages.GetSize(); i++) List += m_Packages[i]->m_Folder + ";";
	
	WritePrivateProfileString("Resource", "CustomPaths", List, GetPathName());
}


//////////////////////////////////////////////////////////////////////////
void CProjectDoc::SortPackagesByPriority()
{
	std::sort(m_Packages.GetData(), m_Packages.GetData() + m_Packages.GetSize(), PriorityComparer);
}

//////////////////////////////////////////////////////////////////////////
bool CProjectDoc::PriorityComparer(const CPackage* x, const CPackage* y)
{
	return x->m_Priority > y->m_Priority;
}

//////////////////////////////////////////////////////////////////////////
void CProjectDoc::OnGenerateGdf() 
{
	DWORD Flags = OFN_HIDEREADONLY|OFN_ENABLESIZING|OFN_NOCHANGEDIR|OFN_OVERWRITEPROMPT;
	CString Filter = LOC("/str1167/Game definition files") +  CString(" (*.xml; *.gdf)|*.xml;*.gdf|") + LOC("/str1003/All Files") + " (*.*)|*.*||";

	CFileDialog dlg(FALSE, "xml", NULL, Flags, Filter, AfxGetMainWnd());
	if(dlg.DoModal()!=IDOK) return;

	FILE* f = fopen(dlg.GetPathName(), "wt");
	if(!f)
	{
		MessageBox(NULL, CString(LOC("/str0046/Error writing to a file")) + " '" + dlg.GetPathName() + "'.", LOC("/str1002/Error"), MB_ICONERROR|MB_OK);
		return;
	}

	LPOLESTR  olestr;
	char GuidStr[50];
	StringFromIID(m_Settings->m_GameGUID, &olestr);
	wcstombs(GuidStr, olestr, 50);
	CoTaskMemFree(olestr);

	fprintf(f, "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
	fprintf(f, "<GameDefinitionFile xmlns:baseTypes=\"urn:schemas-microsoft-com:GamesExplorerBaseTypes.v1\" xmlns=\"urn:schemas-microsoft-com:GameDescription.v1\">\n");
	fprintf(f, "  <GameDefinition gameID=\"%s\">\n", GuidStr);
	fprintf(f, "    <Name>%s</Name>\n", GetUtf8String(CString(Game->m_Caption[0])));
	fprintf(f, "    <Description>%s</Description>\n", GetUtf8String(CString(Game->m_Caption[0])));
	fprintf(f, "    <ReleaseDate>2000-01-01</ReleaseDate>\n");
	fprintf(f, "    <Genres>\n");
	fprintf(f, "      <Genre>Action/Adventure</Genre>\n");
	fprintf(f, "    </Genres>\n");

	if(m_Settings->m_EdGame->m_PersonalizedSave)
		fprintf(f, "    <SavedGames baseKnownFolderID=\"{4C5C32FF-BB9D-43B0-B5B4-2D72E54EAAA4}\" path=\"%s\" />\n", GetUtf8String(CString(Game->m_Caption[0]), true));
	else
		fprintf(f, "    <SavedGames path=\"%s\" />\n", GetUtf8String(CString(Game->m_LocalSaveDir), true));
	
	fprintf(f, "    <WindowsSystemPerformanceRating minimum=\"1\" recommended=\"1\" />\n");

	fprintf(f, "    <Developers>\n");
	fprintf(f, "      <Developer URI=\"http://www.example.com/\">Developer</Developer>\n");
	fprintf(f, "    </Developers>\n");
	fprintf(f, "    <Publishers>\n");
	fprintf(f, "      <Publisher URI=\"http://www.example.com/\">Publisher</Publisher>\n");
	fprintf(f, "    </Publishers>\n");
	fprintf(f, "    <Version>\n");
	fprintf(f, "      <VersionNumber versionNumber=\"1.0.0.0\" />\n");
	fprintf(f, "    </Version>\n");
	fprintf(f, "    <GameExecutables>\n");

	if(m_PackCopyExe)
		fprintf(f, "      <GameExecutable path=\"%s\" />\n", GetUtf8String(m_PackExeName));
	if(m_PackCopySet)
		fprintf(f, "      <GameExecutable path=\"%s\" />\n", GetUtf8String(m_PackSetName));
	fprintf(f, "    </GameExecutables>\n");

	fprintf(f, "  </GameDefinition>\n", GuidStr);
	fprintf(f, "</GameDefinitionFile>\n", GuidStr);

	fclose(f);

	ShellExecute(NULL, "", dlg.GetPathName(), NULL, NULL, SW_NORMAL);
}	

//////////////////////////////////////////////////////////////////////////
CString CProjectDoc::GetUtf8String(CString& OrigStr, bool RemoveUnsafeChars)
{
	CString String = OrigStr;

	// strip localization ID
	if(OrigStr.GetLength() >= 3 && OrigStr[0]=='/')
	{
		char* value = (char*)strchr(LPCSTR(OrigStr)+1, '/');
		if(value!=NULL)
		{
			String = CString(value+1);
		}
	}

	if(RemoveUnsafeChars)
	{
		for(int i=0; i<String.GetLength(); i++)
		{
			if(strchr("\\|*?:\"<>/", String[i])) String.SetAt(i, '_');
		}
	}

	wchar_t* StringW = CBTextUtils::AnsiToUnicode((char*)LPCSTR(String));
	char* Utf8String = CBTextUtils::UnicodeToUtf8(StringW);

	String = CString(Utf8String);

	delete [] Utf8String;
	delete [] StringW;

	String.Replace("&", "&amp;");

	return String;
}